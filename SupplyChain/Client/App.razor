@inject Microsoft.AspNetCore.Components.WebAssembly.Services.LazyAssemblyLoader lazyLoader
@using System.Reflection

<Router AppAssembly="@typeof(Program).Assembly" OnNavigateAsync="OnNavigationAsync"
        AdditionalAssemblies="assemblies">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
            <Authorizing>
                <div class="pt-5 mt-5">
                    <text>Autorizando...</text>
                </div>

            </Authorizing>
            <NotAuthorized>
                
            </NotAuthorized>
        </AuthorizeRouteView>
    </Found>
    <NotFound>
        <CascadingAuthenticationState>
            <LayoutView Layout="@typeof(MainLayout)">
                <p class="mt-5 pt-5">Lo siento, No hay nada en esta ubicacion.</p>
            </LayoutView>

        </CascadingAuthenticationState>

    </NotFound>
</Router>

@code{

    private List<Assembly> assemblies = new List<Assembly>();
    private async Task OnNavigationAsync(NavigationContext args)
    {
        if (args.Path.Contains("maquina") || args.Path.Contains("produccion")
            || args.Path.Contains("servicio"))
        {
            var assembliesCargados = await lazyLoader.LoadAssembliesAsync(
                new List<string> { "Syncfusion.Pdf.Portable.dll" }
                );

            assemblies.AddRange(assembliesCargados);
        }
    }
}



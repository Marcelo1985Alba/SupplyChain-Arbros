@using System.Reflection
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@inject LazyAssemblyLoader lazyLoader

<Router AppAssembly="@typeof(Program).Assembly" OnNavigateAsync="OnNavigationAsync"
        AdditionalAssemblies="assemblies">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
            <Authorizing>
                <div class="pt-5 mt-5">
                    <text>Autorizando...</text>
                </div>

            </Authorizing>
            <NotAuthorized>

                <RedirectLogin></RedirectLogin>
            </NotAuthorized>
        </AuthorizeRouteView>
    </Found>
    <NotFound>
        <CascadingAuthenticationState>
            <LayoutView Layout="@typeof(MainLayout)">
                <p class="mt-5 pt-5">Lo siento, No hay nada en esta ubicacion.</p>
            </LayoutView>

        </CascadingAuthenticationState>

    </NotFound>
</Router>

@code{

    private readonly List<Assembly> assemblies = new();

    private async Task OnNavigationAsync(NavigationContext args)
    {
    //if (args.Path.Contains("maquina") || args.Path.Contains("produccion")
    //    || args.Path.Contains("servicio")
    //    || args.Path.Contains("trazabilidad")
    //    || args.Path.Contains("Noconformidades")
    //    || args.Path.Contains("inventario"))
    //{
    //    var assembliesCargados = await lazyLoader.LoadAssembliesAsync(
    //        new List<string> { "Syncfusion.Pdf.Portable.dll" }
    //        );

    //    assemblies.AddRange(assembliesCargados);
    //}
    }

}
@page "/inventarios"
@page "/inventario/{OperacionId:int}"
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@using System.Text.Json
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using SupplyChain.Client.Shared.Inventarios
@attribute [Authorize]

<div class="col-12 control-section mt-4">
    <SfToast ID="toast_default" @ref="ToastObj">
        <ToastPosition X="Center" Y="Top"></ToastPosition>
    </SfToast>
    <div class="content-wrapper">
        <div class="form-inline">
            <h4 class="pt-3 text-left">
                Operaciones de Stock a Realizar
                @*<small class="text-info"> <strong>@StockEncabezado.TIRE?.Descrip</strong></small>*@
            </h4>

        </div>
        <hr />
        <EditForm Model="@StockEncabezado" OnValidSubmit="@(async()=> await onGuardar())">
            @*<DataAnnotationsValidator />*@
            <ObjectGraphDataAnnotationsValidator/>
            <div class="form-row">
                <div class="form-group col-lg-6 col-md-4 col-sm-12 col-12">
                    <label class="col-form-label">Ope. de Stock</label>
                    <ComboTipoo TipoOperacionIdUnico="@OperacionId" TipooSeleccionado="@StockEncabezado.TIPOO"
                                OnSelectedTireChanged="@SelectedTireChanged" />
                </div>
                <div class="form-group col-lg-2 col-md-3 col-sm-6 col-11">
                    <label class="col-form-label">Vale</label>
                    <SfNumericTextBox TValue="int" @bind-Value="@StockEncabezado.VALE" Readonly="true" ShowSpinButton="false" />
                </div>
                <div class="form-group col-lg-1 col-md-1 col-sm-1 col-1 mt-2">
                    <br />
                    <SfButton OnClick="@(async (e)=> await AbrirVale())" CssClass="btn btn-sm" IsPrimary="false"
                              IconCss="fa fa-search" Disabled="@DisableCssClass"></SfButton>
                </div>
                <div class="form-group col-lg-3 col-md-3 col-sm-6 col-12">
                    <label class="col-form-label">Fecha</label>
                    <SfDatePicker TValue="DateTime" Value='@StockEncabezado.FE_MOV' Format='dd/MM/yyyy'></SfDatePicker>
                </div>


            </div>

            <div class="form-row">
                @if (StockEncabezado.TIPOO == 10)
                {
                    <div class="form-group col-lg-3 col-md-4 col-sm-6">
                        <label class="col-form-label">Orden de Fabricación:</label>
                        <BuscadorOFab EsSoloLectura="@OFSoloLectura" DeshabilitaBotonBusqueda="@DeshabilitaBotonOF"
                                      MostraBotonBusqueda="@MostrarBotorOF" MostrarSpin="false"
                                      Valor="@StockEncabezado.CG_ORDF" OnOFSeleccionada="onProgramaSelected" />
                    </div>


                }

                @if (StockEncabezado.TIPOO == 5)
                {
                    <div class="form-group col-lg-3 col-md-4 col-sm-6">
                        <label class="col-form-label">O. de Compra:</label>
                        <BuscadorOCompra EsSoloLectura="@OCSoloLectura" DeshabilitaBotonBusqueda="@DeshabilitaBotonOC"
                                         MostraBotonBusqueda="@MostrarBotorOC" MostrarSpin="false" HtmlAttr="@HtmlAttribute"
                                         CodigoDeposito="@StockEncabezado.CG_DEP" Remito="@StockEncabezado.REMITO"
                                         Tipoo="StockEncabezado.TIPOO"
                                         Valor="@((int)StockEncabezado.OCOMPRA)" OnOCSeleccionada="OnCompraSelected" />
                    </div>

                    <div class="form-group col-lg-3 col-md-4 col-sm-12">
                        <label class="col-form-label">Remito:</label>
                        <SfTextBox ID="Remito" ShowClearButton="true" @bind-Value="@StockEncabezado.REMITO" Type="InputType.Text" Readonly="false">
                        </SfTextBox>

                    </div>
                }


                @if (StockEncabezado.TIPOO == 1)
                {
                    <div class="form-group col-lg-3 col-md-4 col-sm-6">
                        <label class="col-form-label">Pedido</label>
                        <BuscadorPedido Valor="@StockEncabezado.PEDIDO" MostrarSpin="false" EsSoloLectura="true"
                                        HabilitaBotonBusqueda="false" MostraBotonBusqueda="false" />
                    </div>
                }

                <div class="form-group col-lg-2 col-md-6 col-sm-12">
                    <label class="col-form-label">@labelClienteProveedor</label>
                    <SfNumericTextBox ID="Cg_CLI_Cg_PROVE" TValue="int?" @bind-Value="@Cg_CLI_Cg_PROVE" Readonly="true" ShowSpinButton="false">

                    </SfNumericTextBox>
                </div>
                <div class="form-group col-lg-4 col-md-6 col-sm-12">
                    <label class="col-form-label">Razon Social:</label>
                    <SfTextBox ID="DescripcionPro" ShowClearButton="true"
                               @bind-Value="@DescripcionPro" Readonly="true">

                    </SfTextBox>

                </div>

            </div>
            <div class="form-row">

                <div class="form-group col-6">
                    <label class="col-form-label">Depósito de Ingreso</label>
                    <ComboDeposito DepositoSeleccionado="@StockEncabezado.CG_DEP" EsSoloLectura="@DepositoIngresoSoloLectura"
                                   OnSelectedDepositoChanged="SelectedDepositoIngresoChanged" />
                </div>
                @*<div class="form-group col-6">
                <label class="col-form-label">Depósito de Salida</label>
                <ComboDeposito DepositoSeleccionado="@selectedDepositoSalida" EsSoloLectura="@DepositoSalidaSoloLectura"
                               OnSelectedDepositoChanged="SelectedDepositoSalidaChanged" />
            </div>*@

            </div>


            @if (puedeBuscarStock)@*AJUSTE DE INVENTARIO O MOVIM ENTRE DEPOS*@
            {
                <div class="form-row">
                    <div class="form-group col-6">
                        <BuscadorResumenStock MostraBotonBusqueda="puedeBuscarStock" HabilitaBotonBusqueda="!puedeBuscarStock" MostrarSpin="false"
                                              OnRSSeleccionada="onResumenStockSelected" TextoButon="Buscar Stock" />

                    </div>

                </div>


            }


            <CascadingValue Value="@StockEncabezado">
                <GridEditStock DataSource="@StockEncabezado.Items" PermiteAgregar="@PermiteAgregarItem"
                               PermiteEditar="@PermiteEditarItem" PermiteEliminar="@PermiteEliminarItem"
                               onGuardar="onGuardarPedido" />
            </CascadingValue>
            <ValidationSummary />
            <SfButton Content="Guardar" IsPrimary="true" IconCss="fa fa-save"
                      Disabled="@(StockEncabezado.TIPOO == 0 || StockEncabezado.Items.Count == 0)"></SfButton>

        </EditForm>

    </div>
</div>



<BuscadorEmergente TItem="Pedidos" Titulo=@tituloBuscador Visible="@PopupBuscadorVisible" DataSource="@ItemsABuscar"
                   Columnas="@ColumnasBuscador" onObjetoSeleccionado="onObjectSelected" />





@code {

    [CascadingParameter] public MainLayout MainLayout { get; set; }
    [Parameter] public int OperacionId { get; set; } = 0;
    [Parameter] public PedidoEncabezado StockEncabezado { get; set; } = new PedidoEncabezado();

    protected SfToast ToastObj;
    bool DisableCssClass { get => StockEncabezado.TIPOO == 0 ? true : false; }
    private bool puedeBuscarStock = false;
    BuscadorEmergenteResumenStock BuscadorEmergenteResumenStock;
    private bool DepositoSalidaSoloLectura = true;
    private bool DepositoIngresoSoloLectura = true;

    private Dictionary<string, object> HtmlAttribute = new Dictionary<string, object>()
    {
         {"type", "button" }
    };


    Producto[] Productos = null;
    //Deposito[] Depositos = null;
    //Pedidos[] ItemsVale = null;

    bool PermiteAgregarItem { get; set; } = false;
    bool PermiteEditarItem { get; set; } = false;
    bool PermiteEliminarItem { get; set; } = false;

    #region "PARA BUSCAR ORDENES DE COMPRAS"
    bool OCSoloLectura = true;
    bool DeshabilitaBotonOC = true;
    bool MostrarBotorOC = false;
    #endregion

    #region "PARA BUSCAR ORDENES DE FABRICACION"
    bool OFSoloLectura = true;
    bool DeshabilitaBotonOF = true;
    bool MostrarBotorOF = false;
    #endregion

    string labelClienteProveedor = "Cliente/Prove";

    Producto selectedProducto;
    public Producto SelectedProducto
    {
        get { return selectedProducto; }
        set
        {
            selectedProducto = value;
            InvokeAsync(StateHasChanged);
        }
    }






    #region "CABACERA VALE"
    private int? Cg_CLI_Cg_PROVE { get; set; } = 0;
    string Codigoi { get; set; } = "";
    string DescripcionPro { get; set; } = "";



    void OnChanged() { InvokeAsync(StateHasChanged); }
    #endregion


    protected override async Task OnInitializedAsync()
    {
        MainLayout.Titulo = "Administracion de Stock";

        await GetVale();

        StockEncabezado.Items = new List<Pedidos>();



        await InvokeAsync(StateHasChanged);

    }

    protected async Task GetVale()
    {
        StockEncabezado.VALE = await Http.GetFromJsonAsync<int>($"api/Stock/GetMaxVale");
    }


    async Task SelectedTireChanged(Tire tire)
    {
        StockEncabezado = new();
        StockEncabezado.FE_MOV = DateTime.Now;
        await GetVale();
        StockEncabezado.Items = new List<Pedidos>();
        //selectedTire = tire;

        //Dependiendo el TIPOO Habilitar controles

        StockEncabezado.TIPOO = tire.Tipoo;
        //StockEncabezado.TIRE = tire;
        MostrarBotorOC = false;
        DeshabilitaBotonOC = true;
        OCSoloLectura = true;
        DeshabilitaBotonOF = true;
        OFSoloLectura = true;
        DepositoSalidaSoloLectura = true;
        DepositoIngresoSoloLectura = true;
        puedeBuscarStock = false;

        if (tire.Tipoo == 5) //recep prove
        {
            DeshabilitaBotonOC = false;
            MostrarBotorOC = true;
            DepositoIngresoSoloLectura = false;
            labelClienteProveedor = "Proveedor:";

            StockEncabezado.CG_DEP = 4;
        }

        if (StockEncabezado.TIPOO == 6)//dev prove
        {
            DeshabilitaBotonOC = false;
            MostrarBotorOC = true;
            DepositoSalidaSoloLectura = false;
            labelClienteProveedor = "Proveedor:";
        }

        if (StockEncabezado.TIPOO == 10) //OF
        {
            DeshabilitaBotonOF = false;
            OFSoloLectura = true;

        }

        if (StockEncabezado.TIPOO == 9) //Movimeinto Entre deposito
        {
            puedeBuscarStock = true;
            DepositoIngresoSoloLectura = false;
            if (StockEncabezado?.CG_DEP == null || StockEncabezado?.CG_DEP == 0)
            {
                //toastService.ShowToast("Seleccionar Deposito de Ingreso", TipoAlerta.Info);
                await this.ToastObj.Show(new ToastModel
                {
                    Title = "AVISO!",
                    Content = "Órden sin indicar cantidad fabricada. Se continuará igualmente.",
                    CssClass = "e-toast-warning",
                    Icon = "e-warning toast-icons"
                });
                //return;
            }

        }

        if (StockEncabezado.TIPOO== 10) //Entrega de insumos a una orden de fabricación
        {
            PermiteEditarItem = true;
            OFSoloLectura = true;
            DeshabilitaBotonOF = false;
            MostrarBotorOF = true;

        }

        if (StockEncabezado.TIPOO == 21) //Ajuste de Invetario
        {
            PermiteAgregarItem = false;
            puedeBuscarStock = true;
        }

        //StockEncabezado.TIRE = tire; // lo utilizo para pasar la variable a los items de la grilla.
        await InvokeAsync(StateHasChanged);
    }

    void SelectedDepositoSalidaChanged(Deposito deposito)
    {
        //selectedDepositoSalida = deposito;

        if (StockEncabezado.TIPOO == 6) //DEVOL prove
        {
            StockEncabezado.CG_DEP = deposito.CG_DEP;
        }
    }
    void SelectedDepositoIngresoChanged(Deposito deposito)
    {
        //selectedDepositoIngreso = deposito;
        if (StockEncabezado.TIPOO == 5) //RECEP prove
        {
            StockEncabezado.CG_DEP = deposito.CG_DEP;
        }

        if (StockEncabezado.TIPOO == 9) //MOVIM ENTRE DEP
        {
            PermiteAgregarItem = true;
            StockEncabezado.Items = new List<Pedidos>();
        }
    }

    async Task CargarVale()
    {
        //Cargando Datos de Cabecera
        StockEncabezado.VALE = StockEncabezado.Items[0].VALE;
        StockEncabezado.FE_MOV = StockEncabezado.Items[0].FE_MOV;
        //depos: ver cual campo es ingreso y salida: tal vez depende segun el tipo de operacion
        StockEncabezado.CG_DEP = StockEncabezado.Items[0].CG_DEP;
        //selectedDepositoIngreso = Depositos.Where(d => d.CG_DEP == ItemsVale[0].CG_DEP).FirstOrDefault();
        StockEncabezado.CG_ORDF = (int)StockEncabezado.Items[0].CG_ORDF;
        StockEncabezado.OCOMPRA = StockEncabezado.Items[0].OCOMPRA;
        StockEncabezado.PEDIDO = (int)StockEncabezado.Items[0].PEDIDO;
        Cg_CLI_Cg_PROVE = StockEncabezado.Items[0].CG_CLI == 0 ? StockEncabezado.Items[0].CG_PROVE : StockEncabezado.Items[0].CG_CLI;
        DescripcionPro = StockEncabezado.Items[0].CG_CLI == 0 ? "Proveedor" : "Cliente";
        StockEncabezado.REMITO = StockEncabezado.Items[0].REMITO;
        PermiteAgregarItem = false;
        PermiteEditarItem = true;
        PermiteEliminarItem = true;

        //Cargando datos para controlar si exige lote etc: para controlar validaciones en la edicion.

        await StockEncabezado.Items.ForEachAsync(async i =>
        {
            var cg_prod = i.CG_ART;
            var prod = await Http.GetFromJsonAsync<Producto>($"api/Prod/{cg_prod}");
            i.EXIGEDESPACHO = prod.EXIGEDESPACHO;
            i.EXIGELOTE = prod.EXIGELOTE;
            i.EXIGESERIE = prod.EXIGESERIE;
        });


        await InvokeAsync(StateHasChanged);
    }

    #region "BUSCADOR EMERGENTE"
    string tituloBuscador { get; set; } = "";
    private bool popupVisible = false;
    bool PopupVisible { get => popupVisible; set { popupVisible = value; InvokeAsync(StateHasChanged); } }



    private async Task BuscarResumenStock()
    {
        PermiteAgregarItem = false;
        popupBuscadorVisible = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task onResumenStockSelected(ResumenStock item)
    {
        popupBuscadorVisible = false;
        List<Pedidos> lStock = new List<Pedidos>();
        int registronegativo = 0;


        //var cg_art = "OR312-233";
        //var despacho = "testing";
        //var serie = "";
        //var lote = "";
        //var cg_dep = 1;

        //var resumen = await Http
        //           .GetFromJsonAsync<ResumenStock[]>($"api/ResumenStocks/GetStock?CG_ART={cg_art}&CG_DEP={cg_dep}&DESPACHO={despacho}&LOTE={lote}&SERIE={serie}");
        //foreach (var rs in resumen)
        //{



        //    //pedido.PEDIDO = item.PEDIDO;
        //    //pedido.CG_ORDF = item.CG_ORDF;
        //    //OrdenFabricacion = item.CG_ORDF;



        //}

        registronegativo--;
        Pedidos pedido = new Pedidos();
        pedido.CG_ART = item.CG_ART;
        pedido.CG_DEP = item.CG_DEP;
        pedido.SERIE = item.SERIE;
        pedido.LOTE = item.LOTE;
        pedido.DESPACHO = item.DESPACHO;
        pedido.STOCK = item.STOCK;

        //datos del producto: exigeserie etc.
        var prod = await Http.GetFromJsonAsync<Producto>($"api/Prod/{item.CG_ART}");
        pedido.UNID = prod.UNID;
        pedido.EXIGEDESPACHO = prod.EXIGEDESPACHO;
        pedido.EXIGESERIE = prod.EXIGESERIE;
        pedido.EXIGELOTE = prod.EXIGELOTE;
        pedido.DES_ART = prod.DES_PROD;
        pedido.REGISTRO = registronegativo;

        pedido.CG_PROVE = 0;
        Cg_CLI_Cg_PROVE = 0;

        lStock.Add(pedido);

        StockEncabezado.Items = lStock;

        PermiteAgregarItem = false;
        PermiteEditarItem = true;
        PermiteEliminarItem = true;
    }

    private async Task onGuardar()
    {

        await StockEncabezado.Items.ForEachAsync(async s =>
        {
            await onGuardarPedido(s);

        });

    }


    private async Task onGuardarPedido(Pedidos stock)
    {


        //stock.NUMOCI = 0;
        stock.FE_MOV = StockEncabezado.FE_MOV;
        stock.VALE = StockEncabezado.VALE;


        //stock.CG_CLI = 0;
        stock.CG_PROVE = Cg_CLI_Cg_PROVE;


        stock.TIPOO = StockEncabezado.TIPOO;
        //TODO: controlar el TIPOO al guardar para setar cada campo
        if (stock.TIPOO == 5)
        {

            stock.AVISO = "RECEPCION DE INSUMOS DE PROVEEDOR"; /*VERIFICAR TIPOO*/
            stock.OCOMPRA = StockEncabezado.OCOMPRA;
            //stock.DES_PROVE = DescripcionPro.Trim();
            stock.REMITO = StockEncabezado.REMITO;
            stock.CG_DEP = StockEncabezado.CG_DEP;
        }

        if (stock.TIPOO == 6)
        {

            stock.OCOMPRA = StockEncabezado.OCOMPRA;
            //stock.DES_PROVE = DescripcionPro.Trim();
            @*stock.CG_DEP = SelectedDepositoSalida.CG_DEP;*@
            stock.STOCK = -stock.STOCK;
        }

        if (stock.TIPOO == 9)//movim depos
        {
            stock.CG_DEP_ALT = StockEncabezado.CG_DEP_ALT;
        }

    stock.ENTRREAL = DateTime.UtcNow;
    var esNuevoRegistro = stock.REGISTRO == null || stock.REGISTRO <= 0;
    HttpResponseMessage response = null;
    if (esNuevoRegistro)
    {
        //TODO: RESERVAR VALE EN GENERA DEPENDIENTO EL TIPO DE OPERACION
        Genera genera = await Http.GetFromJsonAsync<Genera>($"api/Genera/Reserva/VALE");
        stock.VALE = Convert.ToInt32(genera.VALOR1);
        response = await Http.PostAsJsonAsync("api/Pedidos", stock);
        genera = await Http.GetFromJsonAsync<Genera>($"api/Genera/Libera/VALE");
    }
    else
    {
        var registro = stock.REGISTRO;
        response = await Http.PutAsJsonAsync($"api/Pedidos/{registro}", stock);
    }



    if (response.StatusCode == System.Net.HttpStatusCode.BadRequest
        || response.StatusCode == System.Net.HttpStatusCode.NotFound
        || response.StatusCode == System.Net.HttpStatusCode.Conflict)
    {
        var mensServidor = await response.Content.ReadAsStringAsync();


        Console.WriteLine($"Error: {mensServidor}");
        //toastService.ShowToast($"{mensServidor}", TipoAlerta.Error);
        await this.ToastObj.Show(new ToastModel
        {
            Title = "ERROR!",
            Content = "Error al guardar",
            CssClass = "e-toast-danger",
            Icon = "e-error toast-icons",
            ShowCloseButton = true,
            ShowProgressBar = true
        });
    }
    else
    {
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var pedido = await response.Content.ReadFromJsonAsync<Pedidos>();
            //StockEncabezado =
            await InvokeAsync(StateHasChanged);
            var itemsJson = JsonSerializer.Serialize(pedido);
            if (esNuevoRegistro)
            {
                await StockEncabezado.Items.Where(i => i.REGISTRO == stock.REGISTRO).ForEachAsync(async s =>
                {
                    await Task.Run(() =>
                    {
                        s.REGISTRO = pedido.REGISTRO;
                        s.IMPORTE2 = pedido.IMPORTE2;
                        s.IMPORTE3 = pedido.IMPORTE3;
                        s.IMPORTE4 = pedido.IMPORTE4;
                        s.IMPORTE6 = pedido.IMPORTE6;
                    });


                });
            }


            await this.ToastObj.Show(new ToastModel
            {
                Title = "EXITO!",
                Content = "Vale Guardado Correctamente.",
                CssClass = "e-toast-success",
                Icon = "e-success toast-icons",
                ShowCloseButton = true,
                ShowProgressBar = true
            });
        }



    }

}

private async Task onProgramaSelected(Programa programaSel)
{
    List<Pedidos> lStock = new List<Pedidos>();
    int registronegativo = 0;
    var ItemsPrograma = await Http.GetFromJsonAsync<ItemAbastecimiento[]>($"api/Programa/GetAbastecimientoByOF/{programaSel.CG_ORDF}");
    //Cargar los item de sp en los items de items para guardar vale
    foreach (var item in ItemsPrograma)
    {
        registronegativo--;
        Pedidos pedido = new();
        //pedido.PEDIDO = item.PEDIDO;
        pedido.CG_ORDF = programaSel.CG_ORDF;
        StockEncabezado.CG_ORDF = programaSel.CG_ORDF;
        //OCompra = (int)item.NUMERO;
        pedido.CG_PROVE = 0;
        Cg_CLI_Cg_PROVE = programaSel.CG_CLI;
        //DescripcionPro = item.des;
        pedido.CG_ART = item.CG_ART;
        pedido.DES_ART = item.DES_ART;
        pedido.UNID = item.UNID;
        pedido.LOTE = item.LOTE;
        pedido.SERIE = item.SERIE;
        pedido.DESPACHO = item.DESPACHO;
        pedido.REGISTRO = registronegativo;
        lStock.Add(pedido);
    }

    StockEncabezado.Items = lStock;
    PermiteAgregarItem = false;
    PermiteEditarItem = true;
    PermiteEliminarItem = true;
}

private async Task OnCompraSelected(Compra compraSel)
{
    //ItemsVale = new ObservableCollection<Stock>();
    List<Pedidos> lStock = new List<Pedidos>();
    int registronegativo = 0;
    StockEncabezado.OCOMPRA = compraSel.NUMERO;

    if (StockEncabezado.TIPOO == 5)
    {
        var ItemsCompras = await Http.GetFromJsonAsync<Compra[]>($"api/Compras/GetCompraByNumero/{compraSel.NUMERO}");

        //Cargar los item de compras en los items de items para guardar vale

        foreach (var item in ItemsCompras)
        {
            registronegativo--;
            Pedidos pedido = new();
            pedido.Proveedor = compraSel.ProveedorNavigation;
            pedido.OCOMPRA = item.NUMERO;
            pedido.CG_PROVE = item.NROCLTE;
            Cg_CLI_Cg_PROVE = item.NROCLTE;
            DescripcionPro = item.DES_PROVE;
            pedido.CG_ART = item.CG_MAT;
            pedido.DES_ART = item.DES_MAT;
            pedido.MONEDA = item.MONEDA;
            pedido.UNID = item.UNID;
            //pedido.CG_ORDEN = item.CG_ORE
            //Calcular stockA
            pedido.STOCKA = item.AUTORIZADO;
            pedido.STOCK = item.AUTORIZADO * item.CG_DEN;
            pedido.IMPORTE1 = item.PRECIONETO * item.CG_DEN;


            //datos del producto: exigeserie etc.
            var prod = await Http.GetFromJsonAsync<Producto>($"api/Prod/{item.CG_MAT}");

            pedido.EXIGEDESPACHO = prod.EXIGEDESPACHO;
            pedido.EXIGESERIE = prod.EXIGESERIE;
            pedido.EXIGELOTE = prod.EXIGELOTE;

            pedido.REGISTRO = registronegativo;


            lStock.Add(pedido);
            StockEncabezado.Items = lStock;

        }


    }

    if (StockEncabezado.TIPOO == 6)
    {
        //Devuelve con los items con su respectivo stock
        StockEncabezado.Items = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Stock/AbriValeByOCParaDevol/{compraSel.NUMERO}");
        //ItemsVale = new ObservableCollection<Stock>(data);

        registronegativo = 0;
        await StockEncabezado.Items.ForEachAsync(async stock =>
        {
            registronegativo--;
            stock.REGISTRO = registronegativo;
            stock.STOCK = Math.Abs((decimal)stock.STOCK);
            await InvokeAsync(StateHasChanged);
        });
    }

    //ItemsVale = new ObservableCollection<Stock>(lStock);
    //ItemsVale = lStock.ToArray();

    PermiteAgregarItem = StockEncabezado.TIPOO == 5;
    PermiteEditarItem = true;
    PermiteEliminarItem = true;
}

private async Task onResumenStockSelected(Pedidos stockSel)
{
    //ItemsVale = null;
    PopupBuscadorVisible = false;
    //Get items del vale
    var vale = stockSel.VALE;
    StockEncabezado.Items = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Stock/AbriVale/{stockSel.VALE}");
    //ItemsVale = new ObservableCollection<Stock>(data);

    if (StockEncabezado.Items != null || StockEncabezado.Items.Count > 0)
    {
        await CargarVale();
    }

    //if (tipoEntidad == "Producto")
    //{
    //    selectedProducto = (Producto)obj;
    //    Codigoi = selectedProducto.CG_PROD;
    //    DescripcionPro = selectedProducto.DES_PROD;
    //}

    await InvokeAsync(StateHasChanged);
}

#endregion

#region "BUSCAR VALES"


private bool popupBuscadorVisible = false;
bool PopupBuscadorVisible { get => popupBuscadorVisible; set { popupBuscadorVisible = value; InvokeAsync(StateHasChanged); } }
private bool popupBuscadorVisibleRS = false;
bool PopupBuscadorVisibleRS { get => popupBuscadorVisibleRS; set { popupBuscadorVisibleRS = value; InvokeAsync(StateHasChanged); } }
string[] ColumnasBuscador = null; /*{ "VALE", "FE_MOV", "CG_ART", "DES_ART", "DESPACHO", "LOTE", "SERIE" };*/
Pedidos[] ItemsABuscar;
ResumenStock[] buscarResumenStock;

private async Task onObjectSelected(Pedidos stockSel)
{
    PopupBuscadorVisible = false;
    //Get items del vale
    var vale = stockSel.VALE;
    StockEncabezado.Items = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Stock/AbriVale/{stockSel.VALE}");
    //ItemsVale = new ObservableCollection<Stock>(data);

    if (StockEncabezado.Items != null || StockEncabezado.Items.Count > 0)
    {
        await CargarVale();
    }

    //if (tipoEntidad == "Producto")
    //{
    //    selectedProducto = (Producto)obj;
    //    Codigoi = selectedProducto.CG_PROD;
    //    DescripcionPro = selectedProducto.DES_PROD;
    //}

    await InvokeAsync(StateHasChanged);
}

protected async Task AbrirVale()
{

    var vale = StockEncabezado.VALE;
    StockEncabezado.Items = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Stock/AbriVale/{vale}");

    if (StockEncabezado.Items != null || StockEncabezado.Items.Count > 0)
    {
        await BuscarVales();
    }
    else
    {
        await CargarVale();
    }
}

protected async Task BuscarVales()
{
    ItemsABuscar = null;
    PopupBuscadorVisible = true;
    tituloBuscador = $"Listado de Vales";
    ColumnasBuscador = new string[] { "VALE", "FE_MOV", "CG_ART", "DES_ART" };
    var tipoo = StockEncabezado.TIPOO;
    ItemsABuscar = await Http.GetFromJsonAsync<Pedidos[]>($"api/Stock/GetValesByTipo/{tipoo}");
    if (ItemsABuscar == null)
    {
        ItemsABuscar = new List<Pedidos>().ToArray();
    }
    await InvokeAsync(StateHasChanged);
}

#endregion




}

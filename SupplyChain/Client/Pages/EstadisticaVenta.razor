@page "/ventas/estadisticas"
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Navigations
@inject HttpClient Http


<SfSpinner @ref="refSpinner" Label="Cargando..." Type="SpinnerType.Fabric" @bind-Visible="@VisibleSpinner"></SfSpinner>


<SfTab>
    <TabItems>
        <TabItem>
            <ChildContent>
                <TabHeader Text="Pedidos Ingresados"></TabHeader>
            </ChildContent>
            <ContentTemplate>
                <div class="row">
                    <div class="col-6">
                        <div class="card">
                            <div class="card-body">
                                <SfChart Title="Unidades Equivalentes de Pedidos Ingresados Anuales" Width="100%">
                                    <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"
                                                       EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                                    </ChartPrimaryXAxis>

                                    <ChartPrimaryYAxis LabelFormat="{value}">
                                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                        <ChartAxisLabelStyle Color="transparent"></ChartAxisLabelStyle>
                                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    </ChartPrimaryYAxis>
                                    <ChartSeriesCollection>
                                        <ChartSeries DataSource="@PedidosIngresadosAnuales" XName="XSerieName" YName="YSerieName" Name="Año"
                                                     Type="Syncfusion.Blazor.Charts.ChartSeriesType.Column">
                                            <ChartMarker>
                                                <ChartDataLabel Visible="false" Position="Syncfusion.Blazor.Charts.LabelPosition.Top">
                                                    <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                                </ChartDataLabel>
                                            </ChartMarker>
                                        </ChartSeries>
                                    </ChartSeriesCollection>
                                    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                    <ChartEvents OnPointClick="@(async (a)=> await MostrarDetalle(a))"></ChartEvents>
                                </SfChart>
                            </div>


                        </div>

                    </div>

                    <div class="col-6">
                        <div class="card">
                            <div class="card-body">
                                <SfChart @ref="refChartDetalle" Title="@TituloGraficoMensual" Width="100%">
                                    <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"
                                                       EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                                    </ChartPrimaryXAxis>

                                    <ChartPrimaryYAxis LabelFormat="{value} hs">
                                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                        <ChartAxisLabelStyle Color="transparent"></ChartAxisLabelStyle>
                                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    </ChartPrimaryYAxis>
                                    <ChartSeriesCollection>
                                        <ChartSeries DataSource="@PedidosIngresadosMensuales" XName="XSerieName" YName="YSerieName" Name="Mes"
                                                     Type="Syncfusion.Blazor.Charts.ChartSeriesType.Column">
                                            <ChartMarker>
                                                <ChartDataLabel Visible="false" Position="Syncfusion.Blazor.Charts.LabelPosition.Top">
                                                    <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                                </ChartDataLabel>
                                            </ChartMarker>
                                        </ChartSeries>
                                    </ChartSeriesCollection>
                                    <ChartTooltipSettings Enable="true">
                                    </ChartTooltipSettings>
                                </SfChart>
                            </div>


                        </div>

                    </div>

                    <div class="col-12">
                        <div class="card">
                            <div class="card-body">
                                <SfGrid DataSource="@DataPedidosIngresados" GridLines="GridLine.Both" AllowResizing="true"
                                        AllowPaging="true" Height="450"> </SfGrid>
                            </div>
                        </div>

                    </div>
                </div>
            </ContentTemplate>
        </TabItem>
        <TabItem>
            <ChildContent>
                <TabHeader Text="Pedidos dados de Alta"></TabHeader>
            </ChildContent>
            <ContentTemplate>
                <div class="row">
                    <div class="col-6">
                        <div class="card">
                            <div class="card-body">
                                <SfChart Title="Unidades Equivalentes de Pedidos Alta Anuales" Width="100%">
                                    <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"
                                                       EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                                    </ChartPrimaryXAxis>

                                    <ChartPrimaryYAxis LabelFormat="{value}">
                                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                        <ChartAxisLabelStyle Color="transparent"></ChartAxisLabelStyle>
                                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    </ChartPrimaryYAxis>
                                    <ChartSeriesCollection>
                                        <ChartSeries DataSource="@PedidosAltasAnuales" XName="XSerieName" YName="YSerieName" Name="Año"
                                                     Type="Syncfusion.Blazor.Charts.ChartSeriesType.Column">
                                            <ChartMarker>
                                                <ChartDataLabel Visible="false" Position="Syncfusion.Blazor.Charts.LabelPosition.Top">
                                                    <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                                </ChartDataLabel>
                                            </ChartMarker>
                                        </ChartSeries>
                                    </ChartSeriesCollection>
                                    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                    <ChartEvents OnPointClick="@(async (a)=> await MostrarDetallePedidosAlta(a))"></ChartEvents>
                                </SfChart>
                            </div>


                        </div>

                    </div>

                    <div class="col-6">
                        <div class="card">
                            <div class="card-body">
                                <SfChart @ref="refChartDetallePedidosAlta" Title="@TituloGraficoMensualPedidosAlta" Width="100%">
                                    <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"
                                                       EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                                    </ChartPrimaryXAxis>

                                    <ChartPrimaryYAxis LabelFormat="{value} hs">
                                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                        <ChartAxisLabelStyle Color="transparent"></ChartAxisLabelStyle>
                                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    </ChartPrimaryYAxis>
                                    <ChartSeriesCollection>
                                        <ChartSeries DataSource="@PedidosAltasMensuales" XName="XSerieName" YName="YSerieName" Name="Mes"
                                                     Type="Syncfusion.Blazor.Charts.ChartSeriesType.Column">
                                            <ChartMarker>
                                                <ChartDataLabel Visible="false" Position="Syncfusion.Blazor.Charts.LabelPosition.Top">
                                                    <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                                </ChartDataLabel>
                                            </ChartMarker>
                                        </ChartSeries>
                                    </ChartSeriesCollection>
                                    <ChartTooltipSettings Enable="true">
                                    </ChartTooltipSettings>
                                </SfChart>
                            </div>


                        </div>

                    </div>

                    <div class="col-12">
                        <div class="card">
                            <div class="card-body">
                                <SfGrid DataSource="@DataPedidosAltas" GridLines="GridLine.Both" AllowResizing="true"
                                        AllowPaging="true" Height="450"> </SfGrid>
                            </div>
                        </div>

                    </div>
                </div>
            </ContentTemplate>
        </TabItem>
    </TabItems>
</SfTab>



<style>
    .e-pivotview {
        min-height: 200px;
    }

    html, body {
        height: 100%;
    }
</style>
@code{
    [CascadingParameter] public MainLayout MainLayout { get; set; }


    protected SfSpinner refSpinner;
    protected bool VisibleSpinner = false;
    public List<vEstadPedidosIngresados> DataPedidosIngresados { get; set; }
    public List<vEstadPedidosAlta> DataPedidosAltas { get; set; }
    protected int AñoMax = DateTime.Now.Year;

    List<DropDownData> ChartTypes = new List<DropDownData>() {
        new DropDownData { Name = "Column", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.Column },
        new DropDownData { Name = "Bar", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.Bar },
        new DropDownData { Name = "Line", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.Line },
        new DropDownData { Name = "Spline", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.Spline },
        new DropDownData { Name = "Area", Value =Syncfusion.Blazor.PivotView.ChartSeriesType.Area },
        new DropDownData { Name = "SplineArea", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.SplineArea },
        new DropDownData { Name = "StepLine", Value =Syncfusion.Blazor.PivotView. ChartSeriesType.StepLine },
        new DropDownData { Name = "StepArea", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.StepArea },
        new DropDownData { Name = "StackingColumn", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.StackingColumn },
        new DropDownData { Name = "StackingBar", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.StackingBar },
        new DropDownData { Name = "StackingArea", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.StackingArea },
        new DropDownData { Name = "StackingColumn100", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.StackingColumn100 },
        new DropDownData { Name = "StackingBar100", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.StackingBar100 },
        new DropDownData { Name = "StackingArea100", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.StackingArea100 },
        new DropDownData { Name = "Scatter", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.Scatter },
        new DropDownData { Name = "Bubble", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.Bubble },
        new DropDownData { Name = "Polar", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.Polar },
        new DropDownData { Name = "Radar", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.Radar },
        new DropDownData { Name = "Pareto", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.Pareto },
        new DropDownData { Name = "Pie", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.Pie },
        new DropDownData { Name = "Doughnut", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.Doughnut },
        new DropDownData { Name = "Funnel", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.Funnel },
        new DropDownData { Name = "Pyramid", Value = Syncfusion.Blazor.PivotView.ChartSeriesType.Pyramid }
    };
    public class DropDownData
    {
        public string Name { get; set; }
        public Syncfusion.Blazor.PivotView.ChartSeriesType Value { get; set; }
    }

    public class ChartData
    {
        public string XSerieName { get; set; }
        public double YSerieName { get; set; }
    }
    protected SfChart refChartDetalle;
    protected List<ChartData> PedidosIngresadosAnuales { get; set; } = new List<ChartData>();
    protected List<ChartData> PedidosIngresadosMensuales { get; set; } = new List<ChartData>();
    protected string TituloGraficoMensual = "";
    protected string SerieSelecciona = "";

    protected SfChart refChartDetallePedidosAlta;
    protected List<ChartData> PedidosAltasAnuales { get; set; } = new List<ChartData>();
    protected List<ChartData> PedidosAltasMensuales { get; set; } = new List<ChartData>();
    protected string TituloGraficoMensualPedidosAlta = "";
    protected string SerieSeleccionaPedidosAlta = "";

    protected override async Task OnInitializedAsync()
    {
        MainLayout.Titulo = "Estadistica de Ventas";
        VisibleSpinner = true;

        await GetPedidosIngresados();
        await GetPedidosAltas();

        VisibleSpinner = false;
    }


    protected async Task GetPedidosIngresados()
    {
        this.DataPedidosIngresados = await Http.GetFromJsonAsync<List<vEstadPedidosIngresados>>("api/EstadisticaVentas/PedidosIngresados");

        PedidosIngresadosAnuales = DataPedidosIngresados.GroupBy(g => new { g.ANIO })
        .Select(d => new ChartData()
        {
            XSerieName = d.Key.ANIO.ToString(),
            YSerieName = Convert.ToDouble(d.Sum(p => p.UNIDEQUI))
        }).OrderBy(c => c.XSerieName)
        .ToList();
    }

    protected async Task GetPedidosAltas()
    {
        this.DataPedidosAltas = await Http.GetFromJsonAsync<List<vEstadPedidosAlta>>("api/EstadisticaVentas/PedidosAltas");

        PedidosAltasAnuales = DataPedidosAltas.GroupBy(g => new { g.ANIO })
        .Select(d => new ChartData()
        {
            XSerieName = d.Key.ANIO.ToString(),
            YSerieName = Convert.ToDouble(d.Sum(p => p.UNIDEQUI))
        }).OrderBy(c => c.XSerieName)
        .ToList();
    }

    protected async Task MostrarDetalle(Syncfusion.Blazor.Charts.PointEventArgs args)
    {
        var año = args.Point.X;
        SerieSelecciona = args.Series.Name;
        TituloGraficoMensual = $"Unidades Equivalentes Mensual {año}";


        PedidosIngresadosMensuales = DataPedidosIngresados
            .Where(v => v.ANIO == Convert.ToInt32(año))
            .OrderBy(o => o.MES)
            .GroupBy(g => new { g.MES }).Select(d => new ChartData()
            {
                XSerieName = d.Key.MES.ToString(),
                YSerieName = Math.Round(Convert.ToDouble(d.Sum(p => p.UNIDEQUI)))
            }).ToList();

        await InvokeAsync(StateHasChanged);
        await refChartDetalle.RefreshAsync();
        await refChartDetalle.RefreshAsync();


    }

    protected async Task MostrarDetallePedidosAlta(Syncfusion.Blazor.Charts.PointEventArgs args)
    {
        var año = args.Point.X;
        SerieSeleccionaPedidosAlta = args.Series.Name;
        TituloGraficoMensualPedidosAlta = $"Unidades Equivalentes Mensual {año}";


        PedidosAltasMensuales = DataPedidosAltas
            .Where(v => v.ANIO == Convert.ToInt32(año))
            .OrderBy(o => o.MES)
            .GroupBy(g => new { g.MES }).Select(d => new ChartData()
            {
                XSerieName = d.Key.MES.ToString(),
                YSerieName = Math.Round(Convert.ToDouble(d.Sum(p => p.UNIDEQUI)))
            }).ToList();

        await InvokeAsync(StateHasChanged);
        await refChartDetallePedidosAlta.RefreshAsync();
        await refChartDetallePedidosAlta.RefreshAsync();


    }
}
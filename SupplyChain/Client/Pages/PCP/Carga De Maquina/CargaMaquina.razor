@page "/CargaMaquina"
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Lists
@using Syncfusion.Pdf;
@using Syncfusion.Pdf.Graphics;
@using Syncfusion.Pdf.Grid;
@using Syncfusion.Pdf.Tables;
@using System.IO;
@using Syncfusion.Blazor.Gantt
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [Authorize]

@*<div>
        <h3 class="titulo">Carga de Máquina</h3>
    </div>*@
<SfToast ID="toast_default" @ref="ToastObj">
    <ToastPosition X="Center" Y="Top"></ToastPosition>
</SfToast>
<h3 class="card-title">Carga de Máquina</h3>
<hr />
<div class="row">
    <div class="col-3">
        <div style="margin-top:20px;text-align:right;width:150px">
            <SfNumericTextBox TValue="int" @bind-Value="@ordenAbuscar" Format="N0" ShowClearButton="true" Step="1" Width="150" />
        </div>
    </div>
    <div class="col-9">
        <div style="margin-top:20px;margin-left:20px;width:200px">
            <SfButton IsPrimary="true" @onclick="BuscarOrden_Click" IconCss="fa fa-search">Buscar órden de fabricación</SfButton>
        </div>
    </div>
</div>
<SfSpinner @ref="SpinnerCDM" Size="60" Label="@MensajeCargando" CssClass="mt-5 pt-5"
           Type="SpinnerType.Bootstrap" Target="#cargaMaq"
           @bind-Visible="Visible"></SfSpinner>
<div class="row" id="cargaMaq">
    <div class="col">
        <div class="table-responsive">
            <table width="700" class="table table-bordered table-hover">
                @if (dbCarga == null)
                {
                    @*<p><em>Loading...</em></p>*@


                }
                else
                {
                    <thead>
                        @*Fechas del calendario*@
                        <tr class="CargaRowClass" style="height:20px">
                            <td class="CargaCellClass" style="min-width: 40px;" />
                            <td class="CargaCellClass" style="min-width: 200px;" />
                            @{bool xDiaLaboral;
                                totalDiasNoLaborables = 0;}
                            @for (int x = 0; x < extensionDias; x++)
                            {
                                string xCultureDayName = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(fechaInicial.AddDays(x).DayOfWeek);
                                if ((xCultureDayName.ToLower() == "sábado" || xCultureDayName.ToLower() == "saturday") && !sabadosLaborables)
                                {
                                    xDiaLaboral = false;
                                    totalDiasNoLaborables++;
                                }
                                else if ((xCultureDayName.ToLower() == "domingo" && xCultureDayName.ToLower() != "sunday") && !domingosLaborables)
                                {
                                    xDiaLaboral = false;
                                    totalDiasNoLaborables++;
                                }
                                else if (dbDiasFestivos.Where(z => z.ID == fechaInicial.AddDays(x).ToString("yyyMMdd")).ToList().Count > 0)
                                {
                                    xDiaLaboral = false;
                                }
                                else
                                {
                                    xDiaLaboral = true;
                                }

                                if (xDiaLaboral)
                                {
                                    <td class="CargaCellClass"
                                        colspan="@CantidadColumnasPorPeriodo"
                                        style="border-left: solid;
                                            border-left-width: thin;
                                            border-left-color:lightgray;">
                                        <a style="font-size:12px">&nbsp;&nbsp;@(xCultureDayName + " " + fechaInicial.AddDays(x).Day.ToString() + " " + fechaInicial.AddDays(x).ToString("MMMM") + " " + fechaInicial.AddDays(x).ToString("yy"))</a>
                                    </td>
                                }
                            }
                        </tr>
                        @*Horas del calendario*@
                        <tr class="CargaRowClass" style="height:20px">
                            <td class="CargaCellClass" colspan="2"
                                style="
                        border-bottom: solid;
                        border-bottom-width:thin;
                        border-bottom-color:lightgray;
                        border-color:lightgray;
                        border-width:1px;">
                                <a style="font-size:12px">CELDA</a>
                            </td>
                            @{xHora = 1;}
                            @for (int x = 1; x <= (extensionDias - totalDiasNoLaborables) * CantidadColumnasPorPeriodo; x++)
                            {
                                <td class="CargaCellClass"
                                    style="
                                border-left: solid;
                                border-bottom: solid;
                                border-left-width: thin;
                                border-bottom-width:thin;
                                border-left-color:lightgray;
                                border-bottom-color:lightgray;
                                border-color:lightgray;
                                border-width:1px;
                                text-align:center;
                                min-width:60px;">
                                    <a style="font-size:12px">@xHora</a>
                                </td>
                                xHora++;
                                if (xHora > CantidadColumnasPorPeriodo)
                                {
                                    xHora = 1;
                                }
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @*Dibuja barras*@
                        @{int i = 0;}
                        @while (i < dbCarga.Count)
                        {
                            <tr class="CargaRowClass">
                                @*CG_CELDA*@
                                <td class="CargaCellClass">
                                    <a href="sc/celdas/list" class="CargaHyperLink">
                                        @dbCarga[i].CG_CELDA
                                    </a>
                                </td>
                                @*DES_CELDA*@
                                <td class="CargaCellClass" style="min-width:200px;border-right: solid;
                                border-right-width: thin;
                                border-right-color:lightgray;">
                                    <a href="sc/celdas/list"
                                       class="CargaHyperLink">
                                        @dbCarga[i].DES_CELDA
                                    </a>
                                </td>

                                @*recorre en el while mientras sea la misma celda*@
                                @{
                                    xCg_celda = dbCarga[i].CG_CELDA.Trim();
                                    xColumna = 2;
                                    xHora = 1;
                                }
                                @while (i < dbCarga.Count && xCg_celda == dbCarga[i].CG_CELDA.Trim())
                                {
                                    xColumnaInicialBarra = Convert.ToInt16(dbCarga[i].COLUMNA);
                                    for (int x = xColumna; x < xColumnaInicialBarra; x++)
                                    {
                                        @*Celda en blanco*@
                                        if (xHora == 1)
                                        {
                                            <td class="CargaCellClass" style="border-left: solid;
                                                            border-left-width: thin;
                                                            border-left-color:lightgray;" />
                                        }
                                        else
                                        {
                                            <td class="CargaCellClass" />
                                        }
                                        xColumna++;
                                        xHora++;
                                        if (xHora > CantidadColumnasPorPeriodo)
                                        {
                                            xHora = 1;
                                        }
                                    }
                                    <td class="CargaCellClass" colspan="@dbCarga[i].COLUMNSPAN">
                                        @{
                                            int xOrdenFabricacion = dbCarga.ElementAt(i).CG_ORDF;
                                            bool xExigeOA = dbCarga.ElementAt(i).EXIGEOA;
                                            int xPedido = dbCarga.ElementAt(i).PEDIDO;
                                            string xCgProd = dbCarga.ElementAt(i).CG_PROD;
                                            decimal xCantidad = dbCarga.ElementAt(i).CANT;
                                            ModeloCarga xCarga = dbCarga.ElementAt(i);
                                            OrdenDeFabAlta = dbCarga.Where(t => t.CG_ORDFASOC == dbCarga.ElementAt(i).CG_ORDFASOC).OrderByDescending(t => t.CG_ORDF).FirstOrDefault().CG_ORDF;
                                        }

                                        @*<SfTooltip CssClass="e-tooltip-css" OpensOn="Hover" Target="@(".botonOrden" + xOrdenFabricacion.ToString())" Width="700" Height="220" MouseTrail=true>
                                                <TooltipTemplates>
                                                    <Content>
                                                        <div id='democontent' class='democontent'>
                                                            <div class='info'>
                                                                <div style='margin-top:0px;font-size:13px'>
                                                                    <table width="100%">
                                                                        <tr>
                                                                            <td>
                                                                                <div style="text-align:right">Proceso:&nbsp;</div>
                                                                            </td>
                                                                            <td>
                                                                                <div><b>@xCarga.PROCESO</b></div>
                                                                            </td>
                                                                        </tr>
                                                                    </table>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </Content>
                                                </TooltipTemplates>
                                            </SfTooltip>*@

                                        @{
                                            int ValorBoton;
                                            if (dbCarga[i].EXIGEOA)
                                            {
                                                ValorBoton = dbCarga[i].PEDIDO;
                                            }
                                            else
                                            {
                                                ValorBoton = OrdenDeFabAlta;
                                            }
                                        }
                                        <div class="@("botonOrden" + xOrdenFabricacion.ToString())" id="ButtonHover">
                                            <input type="button"
                                                   class="CargaButtonClass@((dbCarga.ElementAt(i).CG_ORDF == ordenAbuscar || (dbCarga.ElementAt(i).PEDIDO == ordenAbuscar && dbCarga.ElementAt(i).PEDIDO != 0)) ? " CargaButtonClassBuscarOrden" : ((dbCarga.ElementAt(i).BORDE) ? " CargaButtonClassFirstFirme" : ""))"
                                                   @onclick=@(() => OrdenFabricacionOpen(xOrdenFabricacion, xExigeOA, xPedido, xCgProd, xCantidad))
                                                   style="width: 100%;background-image: linear-gradient( @dbCarga[i].BACKGROUND.ToLower(), whitesmoke)"
                                                   value="@ValorBoton"
                                                   id="of + @dbCarga[i].CG_ORDF" />
                                            @{
                                                if (@dbCarga.ElementAt(i).EXIGEOA == false)
                                                {
                                                    <label class="tooltiptext">
                                                        @dbCarga.ElementAt(i).CG_PROD.Trim()<br />
                                                        @dbCarga.ElementAt(i).DES_PROD.Trim()<br />
                                                        <a class="font-weight-bold">Cantidad: </a>@(Decimal.ToInt32(dbCarga.ElementAt(i).CANT))<br />
                                                        <a class="font-weight-bold">OF Inicial: </a>@dbCarga.ElementAt(i).CG_ORDFASOC<br />
                                                        <a class="font-weight-bold">OF Alta: </a>@OrdenDeFabAlta<br />
                                                        @dbCarga.ElementAt(i).PROCESO.Trim()
                                                    </label>
                                                }
                                                else
                                                {
                                                    <label class="tooltiptext">
                                                        <a class="font-weight-bold">Pedido: </a>@dbCarga.ElementAt(i).PEDIDO<br />
                                                        @dbCarga.ElementAt(i).DES_CLI.Trim()<br />
                                                        @dbCarga.ElementAt(i).CG_PROD.Trim()<br />
                                                        @dbCarga.ElementAt(i).DES_PROD.Trim()<br />
                                                        @dbCarga.ElementAt(i).PROCESO.Trim()
                                                    </label>
                                                }
                                            }
                                        </div>
                                    </td>
                                    xColumna = xColumna + dbCarga[i].COLUMNSPAN;
                                    xHora = xHora + dbCarga[i].COLUMNSPAN;
                                    if (xHora > 8)
                                    {
                                        xHora = 0 + dbCarga[i].COLUMNSPAN;
                                    }
                                    i++;
                                }
                            </tr>
                        }
                    </tbody>
                }
            </table>
        </div>
    </div>

</div>


<!--<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGantt DataSource="@dbCarga" Height="450px" Width="100%" HighlightWeekends="true"
                     Toolbar="@(new List<string>(){ "Add", "Edit", "Update", "Delete", "Cancel", "ExpandAll", "CollapseAll"})"
                     AllowSelection="true" GridLines="Syncfusion.Blazor.Gantt.GridLine.Both" TreeColumnIndex="1"
                     ProjectStartDate="@fechaInicial" ProjectEndDate="@fechaInicial.AddDays(extensionDias)">
                <GanttTaskFields Id="CG_ORDF" Name="CG_ORDF" StartDate="FE_CURSO" 
                                 EndDate="EndDate" Duration="COLSPAN">

                </GanttTaskFields>
                <GanttEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" 
                                   AllowTaskbarEditing="true" ShowDeleteConfirmDialog="true">

                </GanttEditSettings>
                <GanttColumns>-->
                    @*<GanttColumn Field="TaskId" Width="100"></GanttColumn>*@
                    <!--<GanttColumn Field="CG_ORDF" HeaderText="Ord. Fab." Width="50"></GanttColumn>
                    <GanttColumn Field="CG_CELDA" HeaderText="Cod. Celda" Width="50"></GanttColumn>
                    <GanttColumn Field="DES_CELDA" HeaderText="Celda" Width="100"></GanttColumn>-->
                    @*<GanttColumn Field="Duration"></GanttColumn>
        <GanttColumn Field="Progress"></GanttColumn>
        <GanttColumn Field="Predecessor"></GanttColumn>*@
                <!--</GanttColumns>
                <GanttLabelSettings>
                    <LeftLabelTemplate>
                        <div class="e-left-label-inner-div" style="height:22px;margin-top:7px;">
                            <span class="e-label">@((context as ModeloCarga).CG_ORDF)</span>
                        </div>
                    </LeftLabelTemplate>
                </GanttLabelSettings>
                <GanttTimelineSettings>
                    <GanttTopTierSettings Unit="TimelineViewMode.Week" Format="MMM dd, y"></GanttTopTierSettings>
                    <GanttBottomTierSettings Unit="TimelineViewMode.Day"></GanttBottomTierSettings>
                </GanttTimelineSettings>
            </SfGantt>
        </div>
    </div>
</div>-->


@*DIALOG ORDEN DE FABRICACION*@
@if (isOrdenDialogVisible && ordenFabricacion != null && dbCarga != null)
{
    <div id="targetPreguntaFoto" class="cssOrdenFabricacionDialog">
        <SfDialog AllowDragging="true" Target="#cargaMaq" CssClass="" IsModal="false"
                  ShowCloseIcon="true" CloseOnEscape="true" Height="900" Width="900"
                  @bind-Visible="@isOrdenDialogVisible">
            <DialogTemplates>
                <Header><p style="font-weight:800">@ordenTitulo - Cantidad: @(Decimal.ToInt32(ordenFabricacion.CANT))</p></Header>
                <Content>
                    @if (ordenFabricacionEncabezado != null)
                    {
                        <div>
                            @*INFORMACION GENERAL*@
                            <div class="form-row">
                                <div class="form-group col-md-6" style="text-align:left">
                                    @if (ordenFabricacion.EXIGEOA == true)
                                    {
                                        <label class="font-weight-normal"><a class="font-weight-bold">Fecha de Entrega: </a>@ordenFabricacionEncabezado.ENTRPREV.ToShortDateString()</label>
                                    }
                                    else
                                    {
                                        <label class="font-weight-normal"><a class="font-weight-bold">Fecha de Entrega: </a>@ordenFabricacion.FE_ENTREGA</label>
                                    }
                                </div>
                                @if (ordenFabricacion.EXIGEOA == true)
                                {
                                    <div class="form-group col-md-6" style="text-align:left">
                                        <label class="font-weight-normal"><a class="font-weight-bold">Cliente: </a>@(ordenFabricacionEncabezado.CG_CLI + " - " + ordenFabricacionEncabezado.DES_CLI)</label>
                                    </div>
                                }
                            </div>
                            <hr class="separator">
                            @*PARAMETROS MODIFICABLES*@
                            <div class="form-row">
                                <div class="form-group col-md-4">
                                    @{
                                        if (ordenFabricacion.CG_CELDA == "BE3")
                                        {
                                            <div>
                                                <label style="color:blue">Operario:</label>
                                            </div>
                                            <SfComboBox TValue="string" TItem="Operario" PopupWidth="auto" AllowFiltering="true"
                                                        @bind-Value="@ordenFabricacion.DES_OPER" DataSource="@operariosBE3">
                                                <ComboBoxFieldSettings Value="DES_OPER" Text="DES_OPER"></ComboBoxFieldSettings>
                                                <ComboBoxTemplates TItem="Operario">
                                                    <HeaderTemplate>
                                                        <table><tr><th class="e-text-center combo-width">Código</th><th>Operario</th></tr></table>
                                                    </HeaderTemplate>
                                                    <ItemTemplate>
                                                        <table><tbody><tr><td class="e-text-center combo-width">@((context as Operario).CG_OPER)</td><td>@((context as Operario).DES_OPER)</td></tr> </tbody></table>
                                                    </ItemTemplate>
                                                </ComboBoxTemplates>
                                            </SfComboBox>
                                        }
                                        else
                                        {
                                            <div>
                                                <label style="color:blue">Operario:</label>
                                            </div>
                                            <SfComboBox TValue="string" TItem="Operario" PopupWidth="auto" AllowFiltering="true"
                                                        @bind-Value="@ordenFabricacion.DES_OPER" DataSource="@operariosList">
                                                <ComboBoxFieldSettings Value="DES_OPER" Text="DES_OPER"></ComboBoxFieldSettings>
                                                <ComboBoxTemplates TItem="Operario">
                                                    <HeaderTemplate>
                                                        <table><tr><th class="e-text-center combo-width">Código</th><th>Operario</th></tr></table>
                                                    </HeaderTemplate>
                                                    <ItemTemplate>
                                                        <table><tbody><tr><td class="e-text-center combo-width">@((context as Operario).CG_OPER)</td><td>@((context as Operario).DES_OPER)</td></tr> </tbody></table>
                                                    </ItemTemplate>
                                                </ComboBoxTemplates>
                                            </SfComboBox>
                                        }
                                    }
                                </div>
                                <div class="form-group col-md-4">
                                    <label style="color:blue">Celda:</label>
                                    <SfComboBox TValue="string" TItem="ModeloGenericoStringString" PopupWidth="auto" AllowFiltering="true"
                                                @bind-Value="@ordenFabricacion.CG_CELDA" DataSource="@dbCeldas">
                                        <ComboBoxFieldSettings Value="ID" Text="TEXTO"></ComboBoxFieldSettings>
                                        <ComboBoxTemplates TItem="ModeloGenericoStringString">
                                            <HeaderTemplate>
                                                <table><tr><th class="e-text-center combo-width">Código</th><th>Celda</th></tr></table>
                                            </HeaderTemplate>
                                            <ItemTemplate>
                                                <table><tbody><tr><td class="e-text-center combo-width">@((context as ModeloGenericoStringString).ID)</td><td>@((context as ModeloGenericoStringString).TEXTO)</td></tr> </tbody></table>
                                            </ItemTemplate>
                                        </ComboBoxTemplates>
                                    </SfComboBox>
                                </div>
                                <div class="form-group col-md-4">
                                    <div>
                                        <label style="color:blue">Proceso:</label>
                                    </div>
                                    <SfComboBox TValue="string" TItem="ModeloGenericoStringString" PopupWidth="auto" AllowFiltering="true"
                                                @bind-Value="@ordenFabricacion.PROCESO" DataSource="@dbProcesos">
                                        <ComboBoxFieldSettings Value="ID" Text="TEXTO"></ComboBoxFieldSettings>
                                        <ComboBoxTemplates TItem="ModeloGenericoStringString">
                                            <HeaderTemplate>
                                                <table><tr><th class="e-text-center combo-width">Código</th><th>Proceso</th></tr></table>
                                            </HeaderTemplate>
                                            <ItemTemplate>
                                                <table><tbody><tr><td class="e-text-center combo-width">@((context as ModeloGenericoStringString).ID)</td><td>@((context as ModeloGenericoStringString).TEXTO)</td></tr> </tbody></table>
                                            </ItemTemplate>
                                        </ComboBoxTemplates>
                                    </SfComboBox>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-2">
                                    <label style="color:blue">Planificada Inicio:</label>
                                    <SfDateTimePicker Format="dd/MM/yyyy" TValue="DateTime" @bind-Value="@ordenFabricacion.FECHA_PREVISTA_FABRICACION"></SfDateTimePicker>
                                </div>
                                <div class="form-group col-md-2">
                                    <label style="color:blue">Inicio real:</label>
                                    <SfDateTimePicker TValue="DateTime" @bind-Value="@ordenFabricacion.FECHA_INICIO_REAL_FABRICACION"></SfDateTimePicker>
                                </div>
                                <div class="form-group col-md-2">
                                    <label style="color:blue">Finalización real:</label>
                                    <SfDateTimePicker TValue="DateTime" @bind-Value="@ordenFabricacion.FE_CIERRE"></SfDateTimePicker>
                                </div>
                                <div class="form-group col-md-2">
                                    <label style="color:blue">Cantidad fabricada:</label>
                                    <SfNumericTextBox TValue="decimal" Format="N0" @bind-Value="@ordenFabricacion.CANTFAB" ShowClearButton="true" Step="1"></SfNumericTextBox>
                                </div>
                                <div class="form-group col-md-2">
                                    <label style="color:blue">Seleccione Acción:</label>
                                    <SfDropDownList TValue="int" TItem="ModeloGenericoIntString" @bind-Value="@ordenFabricacion.CG_ESTADOCARGA" DataSource="@dbEstadoCarga">
                                        <DropDownListFieldSettings Value="ID" Text="TEXTO"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group col-md-2">
                                    <label style="color:blue">Dependencia:</label>
                                    <SfDropDownList TValue="int" TItem="ModeloGenericoIntString" @bind-Value="@ordenFabricacion.CG_ORDFORIG" DataSource="@dbOrdenesDependientes">
                                        <DropDownListFieldSettings Value="ID" Text="TEXTO"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                            </div>
                        </div>
                        <hr class="separator">
                        @*BOTONES PARA OBTENER DATOS*@
                        <div>
                            <div class="form-row">
                                <div class="form-group col-md-2">
                                    <SfButton IsPrimary="true" @onclick="@(async ()=> await VerPlano(ordenFabricacion.CG_PROD))">Ver plano</SfButton>
                                </div>
                                @if (ordenFabricacion.EXIGEOA == true)
                                {
                                    <div class="form-group col-md-2">
                                        <SfButton IsPrimary="true" @onclick="@(async ()=> await DownloadText())">Descargar Datos</SfButton>
                                    </div>
                                }
                                @if (ordenFabricacion.CG_PROD.Substring(0, 4) == "0012" ||
                                        ordenFabricacion.CG_PROD.Substring(0, 5) == "00130" ||
                                        ordenFabricacion.CG_PROD.Substring(0, 5) == "00131")
                                {
                                    <div class="form-group col-md-2">
                                        <SfButton IsPrimary="true" @onclick="@(async ()=> await IrAServicio(ordenFabricacion.PEDIDO.ToString().Trim()))">Ver en Modulo Servicios</SfButton>
                                    </div>
                                }
                                <div class="form-group col-md-2">
                                    <SfButton IsPrimary="true" @onclick="@(async ()=> await Etiqueta())">Identificación</SfButton>
                                </div>
                                @if (ordenFabricacion.EXIGEOA == true)
                                {
                                    <div class="form-group col-md-2">
                                        <SfButton IsPrimary="true" @onclick="@(async ()=> await Ensayos(ordenFabricacion.PEDIDO.ToString().Trim()))">Ver Ensayos</SfButton>
                                    </div>
                                    <div class="form-group col-md-2">
                                        <SfButton IsPrimary="true" @onclick="@(async ()=> await IrAPrograma(ordenFabricacion.CG_PROD.Trim()))">Ver Programa</SfButton>
                                    </div>
                                }
                            </div>
                        </div>
                        <hr class="separator">
                        @*PRODUCTO*@
                        <div>
                            <div class="form-row">
                                <div class="form-group col-md-4" style="text-align:left">
                                    <label class="font-weight-normal"><a class="font-weight-bold">Código: </a>@ordenFabricacion.CG_PROD</label>
                                </div>
                                <div class="form-group col-md-4" style="text-align:left">
                                    <label class="font-weight-normal"><a class="font-weight-bold">Descripción: </a>@ordenFabricacion.DES_PROD</label>
                                </div>
                                <div class="form-group col-md-2" style="text-align:left">
                                    <label class="font-weight-normal"><a class="font-weight-bold">Cantidad: </a>@ordenFabricacion.CANT</label>
                                </div>
                                <div class="form-group col-md-2" style="text-align:left">
                                    <label class="font-weight-normal"><a class="font-weight-bold">Avance: </a>@(ordenFabricacion.AVANCE.ToString() + " %")</label>
                                </div>
                            </div>
                        </div>
                        <hr class="separator">
                        @*CAMPOS PERSONALIZADOS DE PEDCLI*@
                        @if (ordenFabricacion != null)
                        {
                            @if (ordenFabricacion.PEDIDO > 0)
                            {
                                <div>
                                    <div class="form-row">
                                        <div class="form-group col-md-4" style="text-align:left">
                                            <label class="font-weight-normal"><a class="font-weight-bold">@ordenFabricacionEncabezado.TITULO_CAMPOCOM1: </a>@ordenFabricacionEncabezado.CAMPOCOM1</label>
                                        </div>
                                        <div class="form-group col-md-4" style="text-align:left">
                                            <label class="font-weight-normal"><a class="font-weight-bold">@ordenFabricacionEncabezado.TITULO_CAMPOCOM2: </a>@ordenFabricacionEncabezado.CAMPOCOM2</label>
                                        </div>
                                        <div class="form-group col-md-4" style="text-align:left">
                                            <label class="font-weight-normal"><a class="font-weight-bold">@ordenFabricacionEncabezado.TITULO_CAMPOCOM3: </a>@ordenFabricacionEncabezado.CAMPOCOM3</label>
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group col-md-4" style="text-align:left">
                                            <label class="font-weight-normal"><a class="font-weight-bold">@ordenFabricacionEncabezado.TITULO_CAMPOCOM4: </a>@ordenFabricacionEncabezado.CAMPOCOM4</label>
                                        </div>
                                        <div class="form-group col-md-4" style="text-align:left">
                                            <label class="font-weight-normal"><a class="font-weight-bold">@ordenFabricacionEncabezado.TITULO_CAMPOCOM5: </a>@ordenFabricacionEncabezado.CAMPOCOM5</label>
                                        </div>
                                        <div class="form-group col-md-4" style="text-align:left">
                                            <label class="font-weight-normal"><a class="font-weight-bold">@ordenFabricacionEncabezado.TITULO_CAMPOCOM6: </a>@ordenFabricacionEncabezado.CAMPOCOM6</label>
                                        </div>
                                    </div>
                                </div>
                                <hr class="separator">
                                <div>
                                    <div class="form-row">
                                        <div class="form-group col-md-12" style="text-align:left">
                                            <label class="font-weight-normal"><a class="font-weight-bold">OBSERVACIONES: </a>@ordenFabricacionEncabezado.OBSERITEM</label>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        @*INFORMACION GENERAL*@
                        <div>
                            @if (ordenFabricacion.EXIGEOA == true)
                            {
                                <div class="form-row">
                                    <div class="form-group col-md-6" style="text-align:left">
                                        <label class="font-weight-normal"><a class="font-weight-bold">Transportista: </a>
                                        @(ordenFabricacionEncabezado.CG_TRANS + " - " + ordenFabricacionEncabezado.DES_TRANS)</label>
                                    </div>
                                    <div class="form-group col-md-6" style="text-align:left">
                                        <label class="font-weight-normal"><a class="font-weight-bold">Entrega: </a>
                                        @(ordenFabricacionEncabezado.DIRENT + " - " + ordenFabricacionEncabezado.DIRTRANS)</label>
                                    </div>
                                </div>
                            }
                        </div>
                        <hr class="separator">
                    }
                    <table width="100%">
                        <tbody>
                            <tr>
                                <td style="vertical-align:top">
                                    @*ENCABEZADO*@
                                    @if (ordenFabricacionEncabezado != null)
                                    {
                                        <div class="form-group" style="margin-left:50px;margin-right:50px">
                                            <table width="100%">
                                                @*MATERIAS PRIMAS*@
                                                @if (ordenFabricacionMP != null)
                                                {
                                                    @if (ordenFabricacionMP.Count > 0)
                                                    {
                                                        <tr style="font-weight:bold">
                                                            <td colspan="2">
                                                                MATERIAS PRIMAS
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <td colspan="2">
                                                                <table width="100%">
                                                                    <tr class="font-weight-bold">
                                                                        <td width="15%" style="border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Código</label>
                                                                        </td>
                                                                        <td style="margin-left:10px;white-space:nowrap;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Descripción</label>
                                                                        </td>
                                                                        <td width="10%" style="margin-left:10px;text-align:right;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Cantidad</label>
                                                                        </td>
                                                                        <td width="10%" style="margin-left:10px;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Lote</label>
                                                                        </td>
                                                                        <td width="10%" style="margin-left:10px;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Identific</label>
                                                                        </td>
                                                                        @if (ordenFabricacion.EXIGEOA)
                                                                        {
                                                                            <td width="10%" style="margin-left:10px;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                                <label>Serie</label>
                                                                            </td>
                                                                        }
                                                                    </tr>
                                                                    @foreach (ModeloOrdenFabricacionMP xMP in ordenFabricacionMP)
                                                                    {
                                                                        <tr>
                                                                            <td>
                                                                                <label>@xMP.CG_ART</label>
                                                                            </td>
                                                                            <td>
                                                                                <label>@xMP.DES_ART</label>
                                                                            </td>
                                                                            <td style="text-align:right">
                                                                                <label>@xMP.STOCK</label>
                                                                            </td>
                                                                            <td>
                                                                                <label>@xMP.LOTE</label>
                                                                            </td>
                                                                            <td>
                                                                                <label>@xMP.DESPACHO</label>
                                                                            </td>
                                                                            @if (ordenFabricacion.EXIGEOA)
                                                                            {
                                                                                <td>
                                                                                    <label>@xMP.SERIE</label>
                                                                                </td>
                                                                            }
                                                                        </tr>
                                                                    }
                                                                </table>
                                                            </td>
                                                        </tr>
                                                    }
                                                }
                                                @*SEMI ELABORADOS*@
                                                @if (ordenFabricacionSE != null)
                                                {
                                                    @if (ordenFabricacionSE.Count > 0)
                                                    {
                                                        <tr style="font-weight:bold">
                                                            <td colspan="2">
                                                                SEMI ELABORAODS
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <td colspan="2">
                                                                <table width="100%">
                                                                    <tr class="font-weight-bold">
                                                                        <td width="15%" style="border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Código</label>
                                                                        </td>
                                                                        <td style="margin-left:10px;white-space:nowrap;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Descripción</label>
                                                                        </td>
                                                                        <td width="8%" style="margin-left:10px;text-align:right;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Cantidad</label>
                                                                        </td>
                                                                        <td width="8%" style="margin-left:10px;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Lote</label>
                                                                        </td>
                                                                        <td width="8%" style="margin-left:10px;text-align:right;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Línea</label>
                                                                        </td>
                                                                        <td width="8%" style="margin-left:10px;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Ubicación</label>
                                                                        </td>
                                                                        <td width="8%" style="margin-left:10px;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Despacho</label>
                                                                        </td>
                                                                        <td width="8%" style="margin-left:10px;text-align:right;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Vale</label>
                                                                        </td>
                                                                    </tr>
                                                                    @foreach (ModeloOrdenFabricacionSE xSE in ordenFabricacionSE)
                                                                    {
                                                                        <tr>
                                                                            <td>
                                                                                <label>@xSE.CG_ART</label>
                                                                            </td>
                                                                            <td>
                                                                                <label>@xSE.DES_ART</label>
                                                                            </td>
                                                                            <td style="text-align:right">
                                                                                <label>@xSE.STOCK</label>
                                                                            </td>
                                                                            <td>
                                                                                <label>@xSE.LOTE</label>
                                                                            </td>
                                                                            <td style="text-align:right">
                                                                                <label>@xSE.CG_LINEA</label>
                                                                            </td>
                                                                            <td>
                                                                                <label>@xSE.UBICACION</label>
                                                                            </td>
                                                                            <td>
                                                                                <label>@xSE.DESPACHO</label>
                                                                            </td>
                                                                            <td style="text-align:right">
                                                                                <label>@xSE.VALE</label>
                                                                            </td>
                                                                        </tr>
                                                                    }
                                                                </table>
                                                            </td>
                                                        </tr>
                                                    }
                                                }
                                                @*HOJA DE RUTA*@
                                                @if (ordenFabricacionHojaRuta != null)
                                                {
                                                    @if (ordenFabricacionHojaRuta.Count > 0)
                                                    {
                                                        <tr style="font-weight:bold">
                                                            <td colspan="2">
                                                                HOJA DE RUTA
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <td colspan="2">
                                                                <table width="100%">
                                                                    <tr class="font-weight-bold">
                                                                        <td width="5%" style="text-align:center;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Órden</label>
                                                                        </td>
                                                                        <td width="8%" style="margin-left:10px;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Proceso</label>
                                                                        </td>
                                                                        <td style="margin-left:10px;white-space:nowrap;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Descripción</label>
                                                                        </td>
                                                                        <td width="8%" style="border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Celda</label>
                                                                        </td>
                                                                        <td style="margin-left:10px;white-space:nowrap;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Descripción</label>
                                                                        </td>
                                                                        <td width="8%" style="margin-left:10px;text-align:right;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Tiempo</label>
                                                                        </td>
                                                                        <td width="5%" style="margin-left:10px;text-align:center;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Proporc</label>
                                                                        </td>
                                                                        <td width="8%" style="margin-left:10px;text-align:right;border-top:solid;border-top-color:lightgray;border-top-width:0.2px;border-bottom:solid;border-bottom-color:lightgray;border-bottom-width:0.2px">
                                                                            <label>Tiempo Unitario</label>
                                                                        </td>
                                                                    </tr>
                                                                    @foreach (ModeloOrdenFabricacionHojaRuta xHojaRuta in ordenFabricacionHojaRuta)
                                                                    {
                                                                        <tr>
                                                                            <td style="text-align:center">
                                                                                <label>@xHojaRuta.ORDEN</label>
                                                                            </td>
                                                                            <td>
                                                                                <label>@xHojaRuta.PROCESO</label>
                                                                            </td>
                                                                            <td>
                                                                                <label>@xHojaRuta.DESCRIP</label>
                                                                            </td>
                                                                            <td>
                                                                                <label>@xHojaRuta.CG_CELDA</label>
                                                                            </td>
                                                                            <td>
                                                                                <label>@xHojaRuta.DES_CELDA</label>
                                                                            </td>
                                                                            <td style="text-align:right">
                                                                                <label>@xHojaRuta.TIEMPO_TOTAL</label>
                                                                            </td>
                                                                            <td style="text-align:center">
                                                                                <label>@xHojaRuta.PROPORC</label>
                                                                            </td>
                                                                            <td style="text-align:right">
                                                                                <label>@xHojaRuta.TIEMPO1</label>
                                                                            </td>
                                                                        </tr>
                                                                    }
                                                                </table>
                                                            </td>
                                                        </tr>
                                                    }
                                                }
                                            </table>
                                        </div>
                                    }
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </Content>
            </DialogTemplates>
            <DialogEvents Closed="@OrdenFabricacionClose"></DialogEvents>
            <DialogButtons>
                <DialogButton Content="OK" IsPrimary="true" OnClick="@OrdenFabricacionOk" />
                <DialogButton Content="Cancel" OnClick="@OrdenFabricacionClose" />
            </DialogButtons>
        </SfDialog>
    </div>
}

@*DIALOG SCRAP*@
@if (isScrapDialogVisible && ordenFabricacion != null && dbCarga != null && dbScrap != null)
{
    <div id="targetPreguntaFoto" class="cssScrapDialog">
        <SfDialog Target="#targetPreguntaFoto" Width="90%" Height="95%" CssClass="" IsModal="false" ShowCloseIcon="true"
                  CloseOnEscape="true"
                  @bind-Visible="@isScrapDialogVisible">
            <DialogTemplates>
                <Header><p style="font-weight:800">Seleccione Scrap</p></Header>
                <Content>
                    <SfListView @ref="@listViewScrap" DataSource="@dbScrap" TValue="ModeloGenericoIntString">
                        <ListViewFieldSettings Id="Id" Text="Texto" TValue="ModeloGenericoIntString" />
                        <ListViewTemplates TValue="ModeloGenericoIntString">
                            <Template>
                                @{
                                    ModeloGenericoIntString xContext = (ModeloGenericoIntString)context;
                                    <div class="e-list-wrapper e-list-multi-line e-list-avatar" @onclick="(e => Scrap_Selection(xContext))">
                                        <span class="e-list-content">@xContext.ID</span>
                                        <span class="e-list-content">&nbsp;&nbsp;</span>
                                        <span class="e-list-content">@xContext.TEXTO</span>
                                    </div>
                                }
                            </Template>
                        </ListViewTemplates>
                    </SfListView>
                    <br />
                    <span style="color:chocolate;margin-top:20px">@scrapSeleccionadoMensaje</span>
                </Content>
            </DialogTemplates>
            <DialogEvents Closed="@DialogScrapClose"></DialogEvents>
            <DialogButtons>
                <DialogButton Content="Aceptar" IsPrimary="true" OnClick="@DialogScrapOk" />
                <DialogButton Content="Cancelar" OnClick="@DialogScrapClose" />
            </DialogButtons>
        </SfDialog>
    </div>
}


@code
{
    public DateTime ProjectStart = new DateTime(2019, 3, 25);
    public DateTime ProjectEnd = new DateTime(2019, 7, 28);
    [Inject] protected Microsoft.JSInterop.IJSRuntime JS { get; set; }
    protected List<ModeloCarga> dbCarga;
    protected int extensionDias = 365;
    protected int totalDiasNoLaborables = 0;
    protected int CantidadColumnasPorPeriodo = 8;
    protected int xHora = 1;
    protected int xColumna;
    protected string xCg_celda;
    protected int xColumnaInicialBarra;
    protected bool isOrdenDialogVisible = false;
    protected bool isScrapDialogVisible = false;
    protected bool sabadosLaborables = false;
    protected bool domingosLaborables = false;
    protected SfToast ToastObj;
    protected int ordenNumero = 0;
    protected string ordenTitulo = "";
    protected DateTime fechaInicial;
    protected int ordenAbuscar = 0;
    protected ModeloOrdenFabricacion ordenFabricacion;
    protected ModeloOrdenFabricacion ordenFabricacionOriginal;
    protected ModeloOrdenFabricacionEncabezado ordenFabricacionEncabezado;
    protected List<ModeloOrdenFabricacionMP> ordenFabricacionMP;
    protected List<ModeloOrdenFabricacionSE> ordenFabricacionSE;
    protected List<ModeloOrdenFabricacionHojaRuta> ordenFabricacionHojaRuta;
    protected List<ModeloGenericoIntString> dbOrdenesDependientes;
    protected List<ModeloGenericoIntString> dbEstadoCarga;
    protected List<ModeloGenericoStringString> dbCeldas;
    protected List<ModeloGenericoStringString> dbProcesos;
    protected List<ModeloGenericoStringString> dbDiasFestivos;
    protected List<ModeloGenericoIntString> dbScrap;
    protected int? scrapSeleccionado;
    protected string Usuario = "USER";
    protected int OrdenDeFabAlta;
    public SfListView<ModeloGenericoIntString> listViewScrap;
    private string scrapSeleccionadoMensaje { get; set; } = "";
    protected IEnumerable<Operario> operariosBE3;
    protected List<Solution> rutas;

    protected List<Operario> operariosList = new List<Operario>();
    protected List<PedCli> PedCliList = new List<PedCli>();
    protected List<Producto> prodList = new List<Producto>();
    private SfSpinner SpinnerCDM;
    private bool Visible = false;
    private string MensajeCargando = "Cargando...";
    protected override async Task OnInitializedAsync()
    {
        //await SpinnerCDM.ShowAsync();
        Visible = true;

        dbEstadoCarga = new List<ModeloGenericoIntString>();
        dbEstadoCarga.Add(new ModeloGenericoIntString() { ID = 2, TEXTO = "FIRME" });
        dbEstadoCarga.Add(new ModeloGenericoIntString() { ID = 3, TEXTO = "EN CURSO" });
        dbEstadoCarga.Add(new ModeloGenericoIntString() { ID = 4, TEXTO = "CERRADA" });
        dbEstadoCarga.Add(new ModeloGenericoIntString() { ID = 5, TEXTO = "ANULADA" });


        operariosList = await Http.GetFromJsonAsync<List<Operario>>("api/Operario");

        operariosBE3 = from operariosBE3 in (IEnumerable<Operario>)operariosList
                       where operariosBE3.CG_OPER == 51 || operariosBE3.CG_OPER == 131 || operariosBE3.CG_OPER == 135 || operariosBE3.CG_OPER == 139 || operariosBE3.CG_OPER == 144
                       select operariosBE3;


        PedCliList = await Http.GetFromJsonAsync<List<PedCli>>("api/PedCli/GetPedidos");
        prodList = await Http.GetFromJsonAsync<List<Producto>>("api/Prod/GetPedidos");

        rutas = await Http.GetFromJsonAsync<List<Solution>>("api/Solution");

        await Refrescar();

        //await SpinnerCDM.HideAsync();
        Visible = false;
    }

    protected async Task Refrescar()
    {
        try
        {
            Visible = true;
            dbCarga = await Http.GetFromJsonAsync<List<ModeloCarga>>("api/Cargas");
            // turno
            List<ModeloGenericoIntString> xTurno = await Http.GetFromJsonAsync<List<ModeloGenericoIntString>>("api/ModelosGenericosIntString/Select Top 1 CONVERT(INT, ValorN) ID, '' TEXTO From Solution Where Campo = 'HORASDIA'");
            CantidadColumnasPorPeriodo = xTurno.FirstOrDefault().ID;
            // Dias de calendario
            List<ModeloGenericoIntString> xDias = await Http.GetFromJsonAsync<List<ModeloGenericoIntString>>("api/ModelosGenericosIntString/Select Top 1 CONVERT(INT, ValorN) ID, '' TEXTO From Solution Where Campo = 'DIASCARGA'");
            extensionDias = xDias.FirstOrDefault().ID;
            // Sabados laborables
            List<ModeloGenericoIntString> xSabadosLaborables = await Http.GetFromJsonAsync<List<ModeloGenericoIntString>>("api/ModelosGenericosIntString/Select Top 1 CONVERT(INT, ValorN) ID, '' TEXTO From Solution Where Campo = 'SABADOSLABORABLES'");
            sabadosLaborables = (xSabadosLaborables.FirstOrDefault().ID == 1) ? true : false;
            // Domingos laborables
            List<ModeloGenericoIntString> xDomingosLaborables = await Http.GetFromJsonAsync<List<ModeloGenericoIntString>>("api/ModelosGenericosIntString/Select Top 1 CONVERT(INT, ValorN) ID, '' TEXTO From Solution Where Campo = 'DOMINGOSLABORABLES'");
            domingosLaborables = (xDomingosLaborables.FirstOrDefault().ID == 1) ? true : false;
            // Dias laborables
            dbDiasFestivos = await Http.GetFromJsonAsync<List<ModeloGenericoStringString>>("api/ModelosGenericosStringString/select distinct convert(char(8), Fecha, 112) ID, '' TEXTO from CalendarioFestivos");
            //Busca Scrap
            dbScrap = await Http.GetFromJsonAsync<List<ModeloGenericoIntString>>("api/ModelosGenericosIntString/SELECT convert(int, cg_scrap) ID, des_scrap TEXTO FROM scrap ORDER BY Cg_scrap");
            // fecha inicial
            if (dbCarga.Where(x => x.FE_CURSO != null && x.FE_CURSO.Year != 1900 && x.CG_ESTADOCARGA == 3).ToList().Count > 0)
                fechaInicial = dbCarga.Where(x => x.FE_CURSO != null && x.FE_CURSO.Year != 1900 && x.CG_ESTADOCARGA == 3).Min(x => x.FE_CURSO);
            else
                fechaInicial = DateTime.Now;


            Visible = false;
        }
        catch
        {
            throw;
        }
    }

    protected async Task OrdenFabricacionOpen(int xOrdenFabricacion, bool xExigeOA, int xPedido, string xCgProd, decimal xCantidad)
    {
        Visible = true;
        try
        {

            // Titulo
            if (xExigeOA)
            {
                ordenTitulo = "ORDEN DE ARMADO Nº " + xOrdenFabricacion.ToString();
            }
            else
            {
                ordenTitulo = "ORDEN DE FABRICACIÓN Nº " + xOrdenFabricacion.ToString();
            }
            if (xPedido > 0)
            {
                ordenTitulo += " - SERIE / PEDIDO Nº " + xPedido.ToString();
            }
            // Datos de la orden
            ordenNumero = xOrdenFabricacion;
            ordenFabricacion = await Http.GetFromJsonAsync<ModeloOrdenFabricacion>("api/OrdenesFabricacion/" + ordenNumero.ToString());
            ordenFabricacionOriginal = Newtonsoft.Json.JsonConvert.DeserializeObject<ModeloOrdenFabricacion>(Newtonsoft.Json.JsonConvert.SerializeObject(ordenFabricacion));
            // Ordenes dependientes
            string xSQLcommand = String.Format("SELECT 0 ID, CONVERT(varchar, 0) TEXTO UNION SELECT DISTINCT CG_ORDF ID, CONVERT(varchar, CG_ORDF) TEXTO FROM PROGRAMA WHERE CG_ORDFASOC = {0} AND CG_ORDF != {1}",
                                                  ordenFabricacion.CG_ORDFASOC,
                                                  ordenFabricacion.CG_ORDF);
            dbOrdenesDependientes = await Http.GetFromJsonAsync<List<ModeloGenericoIntString>>("api/ModelosGenericosIntString/" + xSQLcommand);
            // Celdas
            xSQLcommand = String.Format("SELECT ltrim(rtrim(CG_CELDA)) ID, DES_CELDA TEXTO FROM CELDAS ORDER BY CG_CELDA");
            dbCeldas = await Http.GetFromJsonAsync<List<ModeloGenericoStringString>>("api/ModelosGenericosStringString/" + xSQLcommand);
            // Procesos
            xSQLcommand = String.Format("SELECT PROCESO ID, DESCRIP TEXTO FROM PROTAB ORDER BY PROCESO");
            dbProcesos = await Http.GetFromJsonAsync<List<ModeloGenericoStringString>>("api/ModelosGenericosStringString/" + xSQLcommand);
            // Datos del encabezado del detalle
            ordenFabricacionEncabezado = await Http.GetFromJsonAsync<ModeloOrdenFabricacionEncabezado>("api/OrdenesFabricacionEncabezado/" + ordenNumero.ToString());
            // Materias primas
            ordenFabricacionMP = await Http.GetFromJsonAsync<List<ModeloOrdenFabricacionMP>>("api/OrdenesFabricacionMP/" + ordenNumero.ToString());
            // Semi elaborados
            ordenFabricacionSE = await Http.GetFromJsonAsync<List<ModeloOrdenFabricacionSE>>("api/OrdenesFabricacionSE/" + ordenNumero.ToString());
            // Semi elaborados
            ordenFabricacionHojaRuta = await Http.GetFromJsonAsync<List<ModeloOrdenFabricacionHojaRuta>>("api/OrdenesFabricacionHojaRuta/" + xCgProd + "/" + xCantidad.ToString());
            Visible = false;
            isOrdenDialogVisible = true;
        }
        catch
        {
            throw;
        }
    }

    private void OrdenFabricacionClose(Object args)
    {
        try
        {
            isOrdenDialogVisible = false;
            ordenFabricacion = null;
        }
        catch
        {
            throw;
        }
    }

    private async Task OrdenFabricacionOk(Object args)
    {
        Visible = true;

        isOrdenDialogVisible = false;
        var respuesta = await Http.PutAsJsonAsync("api/OrdenesFabricacion/" + ordenFabricacion.CG_ORDF, ordenFabricacion);
        if (respuesta.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            Console.WriteLine("Error en api/OrdenesFabricacion");

            string xSQL = string.Format("UPDATE Programa SET FECHA_PREVISTA_FABRICACION = '{0}', FECHA_INICIO_REAL_FABRICACION = '{1}', CANTFAB = {2}, FE_CIERRE = '{3}', " +
                                            "CG_ORDFORIG = {4}, CG_CELDA = '{5}', PROCESO = '{6}', CG_OPER = {7}, DES_OPER = '{8}' WHERE Cg_ordf = {9}",
                                          ordenFabricacion.FECHA_PREVISTA_FABRICACION,
                                          ordenFabricacion.FECHA_INICIO_REAL_FABRICACION,
                                          ordenFabricacion.CANTFAB.ToString().Replace(",", "."),
                                          ordenFabricacion.FE_CIERRE,
                                          ordenFabricacion.CG_ORDFORIG,
                                          ordenFabricacion.CG_CELDA,
                                          ordenFabricacion.PROCESO,
                                          ordenFabricacion.CG_OPER,
                                          ordenFabricacion.DES_OPER,
                                          ordenFabricacion.CG_ORDF);
            Console.WriteLine(" VER QUERY");
            Console.WriteLine(xSQL);

            await this.ToastObj.Show(new ToastModel { Title = "ERROR!",
                Content = $"Ocurrrio un error.Error al intentar Guardar OF: {ordenFabricacion.CG_ORDF} ",
                CssClass = "e-toast-danger",
                Icon = "e-error toast-icons",
                ShowCloseButton = true,
                ShowProgressBar = true
            });
        }
        if (ordenFabricacion.CG_ESTADOCARGA == 2 || ordenFabricacion.CG_ESTADOCARGA == 3 && (ordenFabricacion.CG_ESTADOCARGA != ordenFabricacionOriginal.CG_ESTADOCARGA))
        {
            string sqlCommandString = string.Format("UPDATE Programa SET CG_ESTADOCARGA = {0},Fe_curso = GETDATE(), CG_ESTADO = {1} WHERE (Cg_ordf = {2} OR Cg_ordfAsoc = {2})",
                                      ordenFabricacion.CG_ESTADOCARGA,
                                      ordenFabricacionOriginal.CG_ESTADOCARGA,
                                      ordenFabricacion.CG_ORDF);
            await Http.PutAsJsonAsync("api/SQLgenericCommandString/" + sqlCommandString, ordenFabricacion);
            ordenFabricacion = null;
            await Refrescar();
        }
        else if (ordenFabricacion.CG_ESTADOCARGA == 4)
        {
            if (ordenFabricacion.CANTFAB == 0)
            {
                await this.ToastObj.Show(new ToastModel { Title = "AVISO!",
                    Content = "Órden sin indicar cantidad fabricada. Se continuará igualmente.",
                    CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
            }

            if (dbScrap != null)
            {
                isScrapDialogVisible = true;
                StateHasChanged();
            }
            else
            {
                await CerrarOrdenFabricacion();
            }
        }
        else if (ordenFabricacion.CG_ESTADOCARGA == 5)
        {
            string sqlCommandString = "EXEC NET_PCP_Anular_OrdenFabricacion " + ordenFabricacion.CG_ORDF.ToString() + ", '" + Usuario + "'";
            var respuesta2 = await Http.PutAsJsonAsync("api/SQLgenericCommandString/" + sqlCommandString, ordenFabricacion);
            if (respuesta2.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                await this.ToastObj.Show(new ToastModel
                {
                    Title = "ERROR!",
                    Content = $"Ocurrio un error. Error al intentar anular OF: {ordenFabricacion.CG_ORDF}",
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons",
                    ShowCloseButton = true,
                    ShowProgressBar = true
                });
            }
            StateHasChanged();
            await this.ToastObj.Show(new ToastModel { Title = "AVISO!", Content = "Órden anulada.",
                CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
            ordenFabricacion = null;
            await Refrescar();
        }

        //await this.ToastObj.Show(new ToastModel
        //{
        //    Title = "Exito!",
        //    Content = $"Guardado Correctamente!  Se actualizo OF: {ordenFabricacion.CG_PROD.Trim()}",
        //    CssClass = "e-toast-success",
        //    Icon = "e-success toast-icons",
        //    ShowCloseButton = true,
        //    ShowProgressBar = true
        //});


        Visible = false;


    }

    private void Scrap_Selection(ModeloGenericoIntString args)
    {
        try
        {
            scrapSeleccionadoMensaje = "";
            scrapSeleccionado = args.ID;
        }
        catch
        {
            throw;
        }
    }

    private async Task DialogScrapClose(Object args)
    {
        try
        {
            isScrapDialogVisible = false;
            await CerrarOrdenFabricacion();
        }
        catch
        {
            throw;
        }
    }

    private async Task DialogScrapOk(Object args)
    {
        try
        {
            if (scrapSeleccionado == null)
            {
                scrapSeleccionadoMensaje = "No seleccionó ningún Item";
            }
            else
            {
                isScrapDialogVisible = false;
                await CerrarOrdenFabricacion();
            }
        }
        catch
        {
            throw;
        }
    }

    protected async Task CerrarOrdenFabricacion()
    {

        Visible = true;
        string sqlCommandString = "EXEC NET_PCP_Cerrar_OrdenFabricacion " + ordenFabricacion.CG_ORDF.ToString() + ", '" + Usuario + "', " + scrapSeleccionado.ToString();
        await Http.PutAsJsonAsync("api/SQLgenericCommandString/" + sqlCommandString, ordenFabricacion);
        if (ordenFabricacion.CG_ORDF == ordenFabricacion.ULTIMAORDENASOCIADA)
        {
            await this.ToastObj.Show(new ToastModel { Title = "Exito!",
                Content = $"Guardado Correctamente! Alta {ordenFabricacion.CG_PROD.Trim()}",
                CssClass = "e-toast-success",
                Icon = "e-success toast-icons",
                ShowCloseButton = true,
                ShowProgressBar = true
            });
        }
        ordenFabricacion = null;
        scrapSeleccionado = null;
        await Refrescar();
        Visible = false;
    }

    protected async Task EstadoCarga_Change()
    {
        try
        {
            if (ordenFabricacionOriginal.CG_ESTADOCARGA == 0 && ordenFabricacion.CG_ESTADOCARGA == 2)
            {
                await this.ToastObj.Show(new ToastModel { Title = "ERROR!", Content = "No puede pasar una órden de fabricación EMITIDA a estado EN FIRME.", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
            }
            else if (ordenFabricacionOriginal.CG_ESTADOCARGA == 0 && ordenFabricacion.CG_ESTADOCARGA == 3)
            {
                await this.ToastObj.Show(new ToastModel { Title = "ERROR!", Content = "No puede pasar una órden de fabricación EMITIDA a estado EN CURSO.", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
            }
            else if (ordenFabricacionOriginal.CG_ESTADOCARGA == 1 && ordenFabricacion.CG_ESTADOCARGA == 3)
            {
                await this.ToastObj.Show(new ToastModel { Title = "ERROR!", Content = "No puede pasar una órden de fabricación PLANEADA a estado EN CURSO.", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
            }
        }
        catch
        {
            throw;
        }
    }

    protected async Task BuscarOrden_Click()
    {
        await Refrescar();
    }

    protected async Task VerPlano(string cg_prod)
    {
        //NavigationManager.NavigateTo($"Pdf/{cg_prod}/RUTAOF");
        //await JS.InvokeVoidAsync("open", new object[2] { $"Pdf/{cg_prod}/RUTAOF", $"_blank" });
        await JS.InvokeAsync<object>("open", $"Pdf/{cg_prod.Trim()}/RUTAOF", "_blank");
        //NavigationManager.NavigateTo($"/VerPdf/{cg_prod}/RUTAOF");
    }

    protected async Task IrAServicio(string pedido)
    {
        //NavigationManager.NavigateTo($"sc/servicio/list/{pedido}");
        await JS.InvokeVoidAsync("open", new object[2] { $"sc/servicio/list/{pedido}", $"sc/servicio/list/{pedido}" });
    }

    protected async Task IrAPrograma(string cg_prod)
    {
        //Pdf/@(ordenFabricacion.CG_PROD)/RUTACNC
        await JS.InvokeVoidAsync("open", new object[2] { $"Pdf/{cg_prod}/RUTACNC", $"Pdf/{cg_prod}/RUTACNC" });
    }

    protected async Task Ensayos(string pedido)
    {
        //NavigationManager.NavigateTo($"Pdf/{pedido}/ENSAYOS");
        await JS.InvokeVoidAsync("open", new object[2] { $"Pdf/{pedido}/ENSAYOS", $"Pdf/{pedido}/ENSAYOS" });
    }

    async Task DownloadText()
    {
        string presion = ordenFabricacionEncabezado.CAMPOCOM4.Trim();
        if (String.IsNullOrEmpty(presion))
        {
            presion = ordenFabricacionEncabezado.CAMPOCOM1.Trim();
        }
        presion = presion.Replace(',', '.');
        // Generate a text file
        //byte[] file;
        if (String.IsNullOrEmpty(ordenFabricacion.DES_OPER))
        {
            await this.ToastObj.Show(new ToastModel { Title = "AVISO!", Content = "Antes de generar el archivo debe asignar un operario", CssClass = "e-toast-danger", Icon = "e-success toast-icons" });
        }
        else
        {
            @foreach (Solution ruta in rutas)
            {
                if (ruta.CAMPO == "RUTADATOS")
                {
                    string fileName = ruta.VALORC + ordenFabricacion.PEDIDO + ".txt";
                    try
                    {
                        // Check if file already exists. If yes, delete it.
                        if (File.Exists(fileName))
                        {
                            File.Delete(fileName);
                        }

                        // Create a new file
                        using (StreamWriter sw = File.CreateText(fileName))
                        {
                            sw.WriteLine($"{ordenFabricacionEncabezado.DES_CLI.Trim()}");
                            sw.WriteLine($"{ordenFabricacion.PEDIDO}");
                            sw.WriteLine($"{presion}");
                            sw.WriteLine($"{ordenFabricacion.DES_OPER}");
                        }
                        await this.ToastObj.Show(new ToastModel { Title = "AVISO!", Content = "Archivo generado con éxito", CssClass = "e-toast-success", Icon = "e-success toast-icons" });
                    }
                    catch (Exception Ex)
                    {
                        Console.WriteLine(Ex.ToString());
                    }

                }
            }
        }
    }
    protected async Task Etiqueta()
    {
        if (ordenFabricacion.CG_CELDA == "BE3" || ordenFabricacion.CG_CELDA == "GC1")
        {
            if (ordenFabricacion.CG_PROD.Substring(0, 1) == "2")
            {
                string espaciosPedido = "";
                string CLIENTE = PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().DES_CLI.Trim();
                if (CLIENTE.Contains("YPF") || CLIENTE.Contains("Y.P.F"))
                {
                    //Chapa de 101 mm x 78 mm
                    PdfDocument document1 = new PdfDocument();
                    document1.PageSettings.Size = new Syncfusion.Drawing.SizeF(382, 295);
                    document1.PageSettings.Margins.All = 0;
                    PdfGrid pdfGrid1 = new PdfGrid();
                    PdfPage page = document1.Pages.Add();
                    PdfGraphics graphics = page.Graphics;
                    PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 16);
                    PdfLightTable pdfTable = new PdfLightTable();
                    page.Graphics.RotateTransform(-360);
                    for (int i = 0; i < (20 - PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim().Length); i++)
                    {
                        espaciosPedido = espaciosPedido + " ";
                    }
                    var tipo2 = from item in prodList
                                where item.CG_PROD == ordenFabricacion.CG_PROD
                                select item.CAMPOCOM6;
                    string tipo = "";
                    if (tipo2 is null || tipo2.Contains("System.Linq"))
                    {
                        tipo = "";
                    }
                    else
                    {
                        tipo = tipo2.ToString();
                    }
                    FileStream fs = new FileStream("wwwroot\\logo_aerre.jpg", FileMode.Open);

                    graphics.DrawString($" \r\n" +
                        $"\r\n" +
                        $"\r\n" +
                        $"    Año:{DateTime.Now.Year}  N°:{ordenFabricacion.PEDIDO} \r\n" +
                        $"    TAG:{PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim()}\r\n" +
                        $"    Tipo:\r\n" +
                        $"    Codigo:{ordenFabricacion.CG_PROD.Trim()}\r\n" +
                        $"    Medida:{prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM2.Trim()}  {prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM3.Trim()}\r\n" +
                        $"    Clase:{prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM5.Trim()}\r\n" +
                        $"    Temp:{PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM6.Trim()}\r\n" +
                        $"    Presion SET:{PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM1.Trim()}\r\n" +
                        $"    P. Aj Banco:{PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM4.Trim()}\r\n" +
                        $"    Ctra.P:{PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM5.Trim()}\r\n" +
                        $"    Fluido:{PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM3.Trim()}\r\n" +
                        $"    Cuerpo:\r\n" +
                        $"    Tobera:\r\n" +
                        $"    Resorte:\r\n" +
                        $"    T.OPDS N°:8/11\r\n" +
                        $"    M.OPDS N°:47642\r\n" +
                        $"          Arbros S.A.\r\n" +
                        $"       www.aerre.com.ar\r\n" +
                        $"     Industria  Argentina\r\n" +
                        $"                               ", font, PdfBrushes.Black, new Syncfusion.Drawing.PointF(0, 0));


                    MemoryStream xx = new MemoryStream();
                    document1.Save(xx);
                    document1.Close(true);
                    await JS.SaveAs("ETOF" + ordenFabricacion.CG_PROD.Trim() + ".pdf", xx.ToArray());
                }
                else
                {

                    string espaciosPedidox = "";
                    string espaciosAnio = "";
                    string espaciosSegundoCampo3bis = "";
                    string espaciosSegundoCampo4bis = "";
                    string espaciosSegundoCampo5bis = "";

                    //Chapa de 101 mm x 78 mm
                    PdfDocument document1 = new PdfDocument();
                    document1.PageSettings.Size = new Syncfusion.Drawing.SizeF(382, 295);
                    document1.PageSettings.Margins.All = 0;
                    PdfGrid pdfGrid1 = new PdfGrid();
                    PdfPage page = document1.Pages.Add();
                    PdfGraphics graphics = page.Graphics;
                    PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 16);
                    PdfLightTable pdfTable = new PdfLightTable();
                    page.Graphics.RotateTransform(-360);

                    for (int i = 0; i < (25 - PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Length); i++)
                    {
                        espaciosPedidox = espaciosPedidox + " ";
                    }
                    for (int i = 0; i < (16 - ordenFabricacion.CG_PROD.Length); i++)
                    {
                        espaciosAnio = espaciosAnio + " ";
                    }
                    for (int i = 0; i < (25 - prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM5.Trim().Length); i++)
                    {
                        espaciosSegundoCampo3bis = espaciosSegundoCampo3bis + " ";
                    }
                    for (int i = 0; i < (25 - PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM3.Trim().Length); i++)
                    {
                        espaciosSegundoCampo4bis = espaciosSegundoCampo4bis + " ";
                    }
                    for (int i = 0; i < (25 - prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM5.Trim().Length); i++)
                    {
                        espaciosSegundoCampo5bis = espaciosSegundoCampo5bis + " ";
                    }

                    string xd1 = prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM2.Trim();
                    string xd2 = prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM5.Trim();
                    int UbicacionXMedida = xd1.ToLower().IndexOf('x');
                    int UbicacionXMedida2 = xd2.ToLower().IndexOf('x');

                    string primeramedida1 = xd1.Substring(0, UbicacionXMedida);
                    string segundamedida1 = xd1.Substring(UbicacionXMedida + 1);
                    string primeramedida2 = xd2.Substring(0, UbicacionXMedida2);
                    string segundamedida2 = xd2.Substring(UbicacionXMedida2 + 1);

                    graphics.DrawString($"\r\n\r\n\r\n\r\n\r\n\r\n    {PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE}{espaciosPedidox}{ordenFabricacion.PEDIDO} " +
                        $"\r\n\r\n         {ordenFabricacion.CG_PROD} {espaciosAnio}     {DateTime.Now.Year} " +
                        $"\r\n             {primeramedida1}                {segundamedida1}" +
                        $"\r\n\r\n    {primeramedida2}   {segundamedida2}        {prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM3.Trim()}" +
                        $"\r\n                     { PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM1.Trim()}    " +
                        $"\r\n\r\n       {PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM3.Trim()}{espaciosSegundoCampo4bis} " +
                        $"\r\n         {PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM5.Trim()}                        " +
                        $"\r\n\r\n" +
                        $"\r\n" +
                        $"\r\n\r\n                         {PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM4.Trim()}   " +
                        $"\r\n                     {PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM2.Trim()}" +
                        $"\r\n\r\n" +
                        $"\r\n    " +
                        $"\r\n    ", font, PdfBrushes.Black, new Syncfusion.Drawing.PointF(0, 0));

                    MemoryStream xx = new MemoryStream();
                    document1.Save(xx);
                    document1.Close(true);
                    await JS.SaveAs("ETOF" + ordenFabricacion.CG_PROD.Trim() + ".pdf", xx.ToArray());
                }
            }
            if (ordenFabricacion.CG_PROD.Substring(0, 1) == "1")
            {
                //Chapa de 25 x 95
                PdfDocument document1 = new PdfDocument();
                document1.PageSettings.Size = new Syncfusion.Drawing.SizeF(359, 94);
                document1.PageSettings.Margins.All = 0;
                document1.PageSettings.Rotate = PdfPageRotateAngle.RotateAngle180;
                PdfGrid pdfGrid1 = new PdfGrid();
                PdfPage page = document1.Pages.Add();
                PdfGraphics graphics = page.Graphics;
                PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
                PdfLightTable pdfTable = new PdfLightTable();
                page.Graphics.RotateTransform(-90);
                string espaciosTag = "";
                for (int i = 0; i < (20 - ordenFabricacion.PEDIDO.ToString().Length); i++)
                {
                    espaciosTag = espaciosTag + " ";
                }
                string espaciosAnio = "";
                for (int i = 0; i < (32 - PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim().Length); i++)
                {
                    espaciosAnio = espaciosAnio + " ";
                }
                string espaciosOrif = "";
                for (int i = 0; i < (32 - prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM2.Trim().Length); i++)
                {
                    espaciosOrif = espaciosOrif + " ";
                }
                string espaciosClase = "";
                for (int i = 0; i < (20 - PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM4.Trim().Length); i++)
                {
                    espaciosClase = espaciosClase + " ";
                }
                string espaciosSinLote = "";
                for (int i = 0; i < 43; i++)
                {
                    espaciosSinLote = espaciosSinLote + " ";
                }

                //graphics.DrawString($"\r\n\r\n\r\n                  {ordenFabricacion.PEDIDO}{espaciosTag}{PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim()}{espaciosAnio}{DateTime.Now.Year} " +
                //    $"\r\n\r\n                        {ordenFabricacion.CG_PROD.Trim()}{espaciosMed}{prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM2.Trim()}{espaciosOrif}{prodList.Where(t => t.CG_PROD.Trim() == ordenFabricacion.CG_PROD.Trim()).OrderByDescending(t => t.CG_PROD.Trim()).FirstOrDefault().CAMPOCOM3.Trim()} " +
                //    $"\r\n\r\n                                                                        {PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM4.Trim()}{espaciosClase}{prodList.Where(t => t.CG_PROD.Trim() == ordenFabricacion.CG_PROD.Trim()).OrderByDescending(t => t.CG_PROD.Trim()).FirstOrDefault().CAMPOCOM5.Trim()} ", font, PdfBrushes.Black, new Syncfusion.Drawing.PointF(-359, 0));
                if (!String.IsNullOrEmpty(PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim()))
                {
                    graphics.DrawString($"\r\n\r\n                                     {ordenFabricacion.PEDIDO}{espaciosSinLote}{DateTime.Now.Year}     .  .  .  .  ." +
                        $"\r\n               {ordenFabricacion.CG_PROD.Trim()}          {prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM2.Trim()}{espaciosOrif}{prodList.Where(t => t.CG_PROD.Trim() == ordenFabricacion.CG_PROD.Trim()).OrderByDescending(t => t.CG_PROD.Trim()).FirstOrDefault().CAMPOCOM3.Trim()} " +
                        $"\r\n.                                            {PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM4.Trim()}{espaciosClase}{prodList.Where(t => t.CG_PROD.Trim() == ordenFabricacion.CG_PROD.Trim()).OrderByDescending(t => t.CG_PROD.Trim()).FirstOrDefault().CAMPOCOM5.Trim()}     .  .  .  .  .", font, PdfBrushes.Black, new Syncfusion.Drawing.PointF(-359, 0));
                }
                else
                {
                    graphics.DrawString($"                                                                                                           \"\r\n\r\n                                     {ordenFabricacion.PEDIDO}{espaciosTag}{PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim()}{espaciosAnio}{DateTime.Now.Year}" +
                    $"\r\n               {ordenFabricacion.CG_PROD.Trim()}          {prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM2.Trim()}{espaciosOrif}{prodList.Where(t => t.CG_PROD.Trim() == ordenFabricacion.CG_PROD.Trim()).OrderByDescending(t => t.CG_PROD.Trim()).FirstOrDefault().CAMPOCOM3.Trim()} " +
                    $"\r\n                                             {PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM4.Trim()}{espaciosClase}{prodList.Where(t => t.CG_PROD.Trim() == ordenFabricacion.CG_PROD.Trim()).OrderByDescending(t => t.CG_PROD.Trim()).FirstOrDefault().CAMPOCOM5.Trim()}" +
                    $"\r\n\r\n._", font, PdfBrushes.Black, new Syncfusion.Drawing.PointF(-359, 0));
                }

                MemoryStream xx = new MemoryStream();
                document1.Save(xx);
                document1.Close(true);
                await JS.SaveAs("ETOF" + ordenFabricacion.CG_PROD.Trim() + ".pdf", xx.ToArray());
            }
            if (ordenFabricacion.CG_PROD.Substring(0, 4) == "0012" ||
                ordenFabricacion.CG_PROD.Substring(0, 5) == "00130" ||
                ordenFabricacion.CG_PROD.Substring(0, 5) == "00131")
            {
                string espaciosbar = "";
                for (int i = 0; i < (16 - PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim().Length); i++)
                {
                    espaciosbar = espaciosbar + " ";
                }
                //Chapa de 31 x 78
                PdfDocument document1 = new PdfDocument();
                document1.PageSettings.Size = new Syncfusion.Drawing.SizeF(117, 295);
                document1.PageSettings.Orientation = PdfPageOrientation.Landscape;
                document1.PageSettings.Margins.All = 0;
                PdfGrid pdfGrid1 = new PdfGrid();
                PdfPage page = document1.Pages.Add();
                PdfGraphics graphics = page.Graphics;
                PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 16);
                PdfLightTable pdfTable = new PdfLightTable();

                string presionMostrar = PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM1.Trim();
                int found = presionMostrar.ToUpper().IndexOf("B");
                if (found == -1)
                {
                    presionMostrar = PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM1.Trim();
                }
                else
                {
                    presionMostrar = presionMostrar.Substring(0, found);
                }

                graphics.DrawString($"\"\r\n\r\n\r\n        {ordenFabricacion.PEDIDO}           {DateTime.Now.Month}/{DateTime.Now.Year} " +
                $"\r\n        {PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim()}{espaciosbar}{presionMostrar}" +
                $"\r\n\r\n                              .", font, PdfBrushes.Black, new Syncfusion.Drawing.PointF(0, 0));

                MemoryStream xx = new MemoryStream();
                document1.Save(xx);
                document1.Close(true);
                await JS.SaveAs("ETOF" + ordenFabricacion.CG_PROD.Trim() + ".pdf", xx.ToArray());
            }
        }
        else
        {
            PdfDocument document1 = new PdfDocument();
            document1.PageSettings.Size = new Syncfusion.Drawing.SizeF(227, 70);//110
            document1.PageSettings.Margins.All = 0;
            PdfGrid pdfGrid1 = new PdfGrid();
            PdfPage page = document1.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 10);
            PdfLightTable pdfTable = new PdfLightTable();
            page.Graphics.RotateTransform(-90);

            OrdenDeFabAlta = dbCarga.Where(t => t.CG_ORDFASOC == ordenFabricacion.CG_ORDFASOC).OrderByDescending(t => t.CG_ORDF).FirstOrDefault().CG_ORDF;
            graphics.DrawString($"        OF ALTA: {OrdenDeFabAlta}\r\n            {ordenFabricacion.CG_PROD}\r\n{ordenFabricacion.DES_PROD}\r\nCANTIDAD {ordenFabricacion.CANTFAB}    {ordenFabricacion.FE_CIERRE}", font, PdfBrushes.Black, new Syncfusion.Drawing.PointF(-200, 10));

            document1.PageSettings.Margins.All = 0;
            MemoryStream xx = new MemoryStream();
            document1.Save(xx);
            document1.Close(true);
            await JS.SaveAs("ETOF" + ordenFabricacion.CG_PROD.Trim() + ".pdf", xx.ToArray());
        }
    }

}
<style>

    /*    table {
        display: block;
        height: 500px;
        overflow-y: scroll;
    }*/

    .titulo {
        font-weight: bold;
        color: dodgerblue;
        margin-top: 20px;
    }

    .CargaButtonClass {
        cursor: pointer;
        padding: 0px;
        padding-left: 0px;
        padding-right: 0px;
        width: 100%;
        height: 26px;
        border-width: 0px;
        border-right-width: thin;
        border-right-style: solid;
        border-right-color: whitesmoke;
        font-size: 18px;
        font-weight: bold;
    }

    .CargaButtonClassFirstFirme {
        border-width: 2px;
        border-color: lightseagreen;
        font-size: 18px;
        font-weight: bold;
    }

    .CargaButtonClassBuscarOrden {
        border-width: 5px;
        border-color: black;
        font-size: 18px;
        font-weight: bold;
    }

    .CargaRowClass {
        padding: 0px;
        padding-left: 0px;
        padding-right: 0px;
        height: 35px;
        border-width: 0px;
    }

    .CargaCellClass {
        width: 100%;
        width: 60px;
        padding: 0px;
        padding-left: 0px;
        padding-right: 0px;
    }

    .CargaCeldaBuscarOrden {
        color: deepskyblue !important;
        background: white !important;
    }

    .CargaHyperLink {
        cursor: pointer;
        margin-right: 20px;
        text-decoration: none;
        font-size: small;
        color: black;
    }

    .cssOrdenFabricacionDialog {
        position: fixed;
        top: 5%;
        left: 5%;
        min-width: 1200px;
        min-height: 580px;
        max-width: 90%;
        margin-top: auto;
        margin-right: auto;
        margin-left: auto;
        margin-bottom: auto;
        left: 50px !important;
        top: 0px !important;
    }

    .cssScrapDialog {
        position: fixed;
        top: 10%;
        left: 30%;
        width: 40%;
        height: 80%;
        max-width: 40%;
        margin-top: auto;
        margin-right: auto;
        margin-left: auto;
        margin-bottom: auto;
    }

    .form-group {
        margin-bottom: 0rem;
    }

    label {
        display: inline-block;
        margin-bottom: 0rem;
    }

    hr {
        margin-top: 0.5rem;
        margin-bottom: 0.5rem;
        border: 0;
        border-top: 1px solid rgba(0,0,0,.1);
    }

    .tooltiptext {
        visibility: hidden;
        background-color: black;
        color: #fff;
        text-align: center;
        padding: 5px 0;
        border-radius: 6px;
        position: fixed;
        z-index: 1;
    }

    #ButtonHover:hover .tooltiptext {
        visibility: visible;
    }

    .e-spinner-pane .e-spinner-inner .e-spin-bootstrap {
        fill: #000;
        stroke: #000;
    }

    @@font-face {
        font-family: 'Toast_icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj0gSRkAAAEoAAAAVmNtYXDnM+eRAAABsAAAAEpnbHlmzVnmlwAAAhgAAAZAaGVhZBEYIl8AAADQAAAANmhoZWEHlgN3AAAArAAAACRobXR4LvgAAAAAAYAAAAAwbG9jYQnUCGIAAAH8AAAAGm1heHABHQBcAAABCAAAACBuYW1lfUUTYwAACFgAAAKpcG9zdAxfTDgAAAsEAAAAggABAAADUv9qAFoEAAAAAAAD6AABAAAAAAAAAAAAAAAAAAAADAABAAAAAQAACcU5MF8PPPUACwPoAAAAANcI7skAAAAA1wjuyQAAAAAD6APoAAAACAACAAAAAAAAAAEAAAAMAFAABwAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQPqAZAABQAAAnoCvAAAAIwCegK8AAAB4AAxAQIAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnCgNS/2oAWgPoAJYAAAABAAAAAAAABAAAAAPoAAAD6AAAA+gAAAPoAAAD6AAAA+gAAAPoAAAD6AAAA+gAAAPoAAAD6AAAAAAAAgAAAAMAAAAUAAMAAQAAABQABAA2AAAABAAEAAEAAOcK//8AAOcA//8AAAABAAQAAAABAAIAAwAEAAUABgAHAAgACQAKAAsAAAAAAAAAQgB8AMIA4gEcAZQCBgJwAo4DAAMgAAAAAwAAAAADlAOUAAsAFwAjAAABFwcXNxc3JzcnBycFDgEHLgEnPgE3HgEFHgEXPgE3LgEnDgEBTXh4L3h4L3h4L3h4AbwDt4qKtwMDt4qKt/0eBeuxsesFBeuxsesCbHh4L3h4L3h4L3h4p4q3AwO3ioq3AwO3irHrBQXrsbHrBQXrAAAAAwAAAAADlAOUAAUAEQAdAAABJwcXAScXDgEHLgEnPgE3HgEFHgEXPgE3LgEnDgEBr2UylwEbMqADt4qKtwMDt4qKt/0eBeuxsesFBeuxsesBrGQylgEcMqKKtwMDt4qKtwMDt4qx6wUF67Gx6wUF6wAAAAAFAAAAAAOUA5cABQARAB0AIQAlAAABFzcnNSMFDgEHLgEnPgE3HgEFHgEXPgE3LgEnDgElFzcnBRc3JwHKxiCnPwFOA6V8fKUDA6V8fKX9aATToJ/UBATUn5/UAh7ANsD9fja/NQGedzNj29F8pAMDpHx8pQMDpXyf1AQE1J+g0wQE0/GhQKGhQKFAAAQAAAAAA74DfgADAAcACgANAAAlMzUjNTM1IwEhCQEhAQHLUlJSUgFj/YwBOv42A5T+NuZUUqf+igIc/ZADFgAEAAAAAAOUA5QAAwAHABMAHwAAATM1IzUzNSMFDgEHLgEnPgE3HgEFHgEXPgE3LgEnDgEBylRUVFQBbgO3ioq3AwO3ioq3/R4F67Gx6wUF67Gx6wEk+lNT0Iq3AwO3ioq3AwO3irHrBQXrsbHrBQXrAAAAAAcAAAAAA+gDMQALABUAJQAuADcAQQBLAAABFhcVITUmJz4BMxYFFhcVITU+ATcWJQYHFSE1LgEjIgYHLgEjIgEWFAYiJjQ2MgUWFAYiJjQ2MiUGFBYXPgE0JiIFBhQWFz4BNCYiA1xEBP6sAxUeRiRX/qxEBP45BIlXV/7xZQsD6AvKUypvMzNvKlMCKxozTTMzTP6CGTNMNDRMAQItWUREWlqI/jstWkREWVmIAWMbFjc3IBgKDwQcGxY3NxY3BAQjJUt7e0tKFxgYFwEMGU01NU0zGhlNNTVNMxYthloCAlqGWy4thloCAlqGWwAAAAQAAAAAA5wCxwAIABQANABFAAABFBYyNjQmIgYXDgEHLgEnPgE3HgEfAQcOAQ8BNz4BNS4BJw4BBxQWHwEnLgEvATc+ATc2FiUOAQ8BFx4BNz4BPwEnJiciAb8fLR4eLR+wAkU0NEUBAUU0NEX8BgEemG0FBB8kAlZBQFcBKyUCCkeVTAYBH76RVMP+3bDPBwcKZclcu/AGCwrM2AoBxxYfHy0eHhc0RQEBRTQ1RQEBRSgEARpWGAECFUIoQVcCAldBLEYUAQEIQkAGASJsBwFCoRbFFAoJW0sBCo8LCgztAQAAAAIAAAAAA4ADbAA4AEEAAAEEJCcmDgEWFx4BHwEVFAYHDgEnJg4BFhcWNjc2Fx4BBx4BFzc+ASc2JicmJzUzPgE3PgEnJicjIiUUFjI2NCYiBgNM/tz+pwwMGxEDDAaMfAcSETKEQw8WBg8Og80hNSg4JwICEw0FDhECAjFJEBICPYhKDQgGChQCB/5dMUgxMUgxAuB/ZRcIAxgbCQdHEQGTGi8TOVgKAw8dFwMNuDUFHTGDCA0QAQECFQ8Mnz8LCasJKiUHGg0SATMkMDBJMDAAAAAAAgAAAAAC/QMkAAMADQAAAQchJxMeATMhMjY3EyEC2x3+bB0kBCQZAQQZJARH/ewDBuDg/fcZICAZAicAAwAAAAACzwPoACwAQwBPAAABERQfARYfAzMVHgE7ATI2NRE0JisBNTEWOwEyNjQmJyMiJi8BLgErAQ4BAxUzNTQ2NzMeARcVMzUuAScjIgcjESM1HgEXPgE3LgEnDgEBVQEBAwQCCAjXARENOg0REQ2zDROVExoaE2UQGAQfAxAKYg0RPR8RDZcNEQEeASIalxANAR8CTTo6TQEBTTo6TQJ8/nYEBQIGBAIFArYNERENARENEUoNGicZARMPfQoNARH98Hl5DREBARENeXkaIgEIAe3FOk0CAk06Ok0BAU0AAAAAAgAAAAAC5gMyAAkAEQAAJRQWMyEyNjURITcjFSE1IycjASApHgEaHin+WFBuAeR+JLD8HigoHgGfeT09HgAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEgABAAEAAAAAAAIABwATAAEAAAAAAAMAEgAaAAEAAAAAAAQAEgAsAAEAAAAAAAUACwA+AAEAAAAAAAYAEgBJAAEAAAAAAAoALABbAAEAAAAAAAsAEgCHAAMAAQQJAAAAAgCZAAMAAQQJAAEAJACbAAMAAQQJAAIADgC/AAMAAQQJAAMAJADNAAMAAQQJAAQAJADxAAMAAQQJAAUAFgEVAAMAAQQJAAYAJAErAAMAAQQJAAoAWAFPAAMAAQQJAAsAJAGnIEZpbmFsIFRvYXN0IE1ldHJvcFJlZ3VsYXJGaW5hbCBUb2FzdCBNZXRyb3BGaW5hbCBUb2FzdCBNZXRyb3BWZXJzaW9uIDEuMEZpbmFsIFRvYXN0IE1ldHJvcEZvbnQgZ2VuZXJhdGVkIHVzaW5nIFN5bmNmdXNpb24gTWV0cm8gU3R1ZGlvd3d3LnN5bmNmdXNpb24uY29tACAARgBpAG4AYQBsACAAVABvAGEAcwB0ACAATQBlAHQAcgBvAHAAUgBlAGcAdQBsAGEAcgBGAGkAbgBhAGwAIABUAG8AYQBzAHQAIABNAGUAdAByAG8AcABGAGkAbgBhAGwAIABUAG8AYQBzAHQAIABNAGUAdAByAG8AcABWAGUAcgBzAGkAbwBuACAAMQAuADAARgBpAG4AYQBsACAAVABvAGEAcwB0ACAATQBlAHQAcgBvAHAARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAECAQMBBAEFAQYBBwEIAQkBCgELAQwBDQAFRXJyb3IHU3VjY2VzcwVBbGFybQdXYXJuaW5nBEluZm8HTWVldGluZwVCbGluawdTdHJldGNoA1NpcANTaXQFVHJhc2gAAAAA) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    #toast_types button {
        margin: 5px;
        min-width: 160px;
        max-width: 160px;
    }

    .toast-icons {
        font-family: 'Toast_icons' !important;
        speak: none;
        font-size: 55px;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    #toast_type .e-toast-icon.e-icons {
        height: auto;
        font-size: 30px;
    }

    .toast-icons.e-success::before {
        content: "\e701";
    }

    .toast-icons.e-error::before {
        content: "\e700";
    }

    .toast-icons.e-info::before {
        content: "\e704";
    }

    .toast-icons.e-warning::before {
        content: "\e703";
    }

    #toast_types {
        text-align: center;
    }
</style>

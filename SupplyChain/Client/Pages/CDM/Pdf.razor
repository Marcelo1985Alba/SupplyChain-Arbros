@page "/Pdf/{codigo}/{accion}"
@using Microsoft.AspNetCore.Components;
@using Microsoft.JSInterop;
@using SupplyChain;
@using Syncfusion.Blazor.Navigations;
@using Syncfusion.Blazor.Buttons;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Text.Json;
@using System.Threading.Tasks;
@using System.Web;
@using System.IO;
@using Syncfusion.Blazor.PdfViewer;
@using SupplyChain.Shared;
@*@using Syncfusion.Blazor.PdfViewerServer;*@

@if (accion == null)
{
    <p><em>Loading...</em></p>

}
else
{

    if (accion == "RUTAOF")
    {
        if (codigo.Length < 6)
        {
            VisibleSpinner = false;
            <label>No hay planos asociados a reparaciones.</label>
        }
        else
        {

            //paso nombre del doc y la accion para despues del lado del servidor saber cual es la ubicacion que debe tomar
            //codigo = codigo.Substring(0, 7) + ".pdf," + accion;

            @*<div class="col-lg-12 control-section">
                <div class="content-wrapper">
                    <div class="row">*@
            <SfPdfViewer ID="pdfViewerPlano" ServiceUrl="/api/Values" DocumentPath="@codigoLimpio.Trim()" 
                         EnableErrorDialog="true" 
                         Height="1250px" Width="100%"></SfPdfViewer>


            @*</div>
                    </div>
                </div>*@
        }

    }

    if (accion == "RUTACNC")
    {

        // Only get files that begin with the letter "c".
        //var ruta = rutas.Where(s => s.CAMPO == accion).FirstOrDefault();
        //string[] dirs = Directory.GetFiles(@$"{ruta.VALORC}", $"{codigo.Substring(0, 7)}*");

        if (archivos is null)
        {
            <pem>Cargando..</pem>
        }
        else
        {
            if (docsCargados)
            {

                foreach (Archivo item in archivos)
                {
                    <div class="accordion" id="accordionExample">
                        <div class="card">
                            <div class="card-header" id="@item.Id">
                                <h2 class="mb-0">
                                    <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapse@(item.Id)"
                                            aria-expanded="false" aria-controls="collapse@(item.Id)">@item.Nombre

                                    </button>
                                    <SfButton IsPrimary="true" IconCss="fa fa-download"
                                              OnClick="@(() => Descargar(item.Nombre, item.ContenidoByte))" 
                                              Content="Descargar"></SfButton>
                                </h2>
                            </div>
                            <div id="collapse@(item.Id)" class="collapse" aria-labelledby="" data-parent="#accordionExample">
                                <div class="card-body">
                                    @{

                                        @foreach (string dataLine in item.Contenido)
                                        {
                                            @foreach (string dataItem in dataLine.Split(delimiterChar))
                                            {
                                                <label>@dataItem</label>
                                                <br />
                                            }
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                                                        }

            }
        }




    }

    if (accion == "RUTAENSAYO")
    {
        if (archivos is null )
        {
            VisibleSpinner = true;
        }
        else if(archivos.Count == 0)
        {
            VisibleSpinner = false;
            <label>No existen registros de ensayos para el pedido numero @(codigo)</label>
        }
        else
        {
            if(docsCargados) { }
            VisibleSpinner = false;
            <SfAccordion ID="accordionPdfEnsayos">
                <AccordionItems>
                    @foreach (Archivo item in archivos)
                    {
                        var idPdf = $"pdfEns{item.Id}";
                        var doc_ubica = $"ENS_{codigo}_{item.Id}.pdf," + accion;
                        <AccordionItem>
                            <HeaderTemplate>
                                <div>@(item.Nombre)</div>
                            </HeaderTemplate>
                            <ContentTemplate>
                                <SfPdfViewer @ref="sfPdfViewerObj" ID="@idPdf"
                                             ServiceUrl="/api/Values" DocumentPath="@doc_ubica"
                                             Height="1250px" Width="100%"></SfPdfViewer>
                            </ContentTemplate>
                        </AccordionItem>
                    }
                </AccordionItems>
            </SfAccordion>
            
            
        }
    }
}


@code {
    private string DocumentPath { get; set; } = "PDF_Succinctly.pdf";
    bool VisibleSpinner = false;

    [Inject] protected HttpClient Http { get; set; }

    [Inject] protected Microsoft.JSInterop.IJSRuntime JS { get; set; }

    protected List<Solution> rutas;
    protected Solution Solution;
    Array userData1 = null;

    char[] delimiterChar = { ',' };

    string docPath;
    string[] dirs;
    List<Archivo> archivos;
    bool docsCargados = false;
    [Parameter] public string codigo { get; set; } = "";
    [Parameter] public string accion { get; set; } = "";
    [CascadingParameter] public MainLayout Layout { get; set; }
    SfPdfViewer sfPdfViewerObj;
    string codigoLimpio = "";
    protected override async Task OnInitializedAsync()
    {
        //MainLayout.Titulo = $"Codigo";
        VisibleSpinner = true;

        rutas = await Http.GetFromJsonAsync<List<Solution>>("api/Solution");

        if (accion == "RUTAOF")
        {
            Layout.Titulo = $"Plano {codigo}";
            codigoLimpio = codigo.Substring(0, 7) + ".pdf," + accion;
            //DocumentPath = await Http.GetFromJsonAsync<string>($"api/AdministracionArchivos/GetPdfNube/{codigoLimpio}/RUTAOF");
        }

        if (accion == "RUTACNC" || accion == "RUTAENSAYO")
        {

            if (accion == "RUTACNC")
            {
                Layout.Titulo = $"Listado Archivos {codigo}";
                codigoLimpio = codigo.Substring(0, 7);
            }

            if (accion == "RUTAENSAYO")
            {
                Layout.Titulo = $"Ensayos Pedido {codigo}";
                codigoLimpio = $"ENS_{codigo}_1.pdf";
            }

            archivos = await Http.GetFromJsonAsync<List<Archivo>>($"api/AdministracionArchivos/ByParamRuta/{accion}/{codigoLimpio}");


            docsCargados = true;
        }


        VisibleSpinner = false;
    }


    private void DownloadText(string Nombre)
    {
        File.OpenRead(Nombre);
        //JS.InvokeVoidAsync("BlazorDownloadFile", $"{Nombre}.txt", "text/plain", Nombre);
    }

    private void Descargar(string fileName, byte[] fileBytes)
    {
        //byte[] fileBytes = System.IO.File.ReadAllBytes(filePath);
        //File(filePath, "application/force-download", "file1.xlsx");

        JS.SaveAs(fileName + ".txt", fileBytes);
    }
}

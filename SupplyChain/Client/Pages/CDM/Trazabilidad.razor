@page "/Trazabilidad"
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Pdf;
@using Syncfusion.Pdf.Graphics;
@using Syncfusion.Pdf.Grid;
@using Syncfusion.Blazor.Navigations
@using System.Drawing;
@using System.IO;
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.BarcodeGenerator
@using System.Text.Json
@using Syncfusion.Blazor.Grids
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@using Syncfusion.Blazor.PdfViewer
@using Syncfusion.Pdf.Tables
@{

    <SfToast ID="toast_default" @ref="ToastObj">
        <ToastPosition X="Right"></ToastPosition>
    </SfToast>

    <SfSpinner @ref="refSpinner" Label="Cargando..." Type="SpinnerType.Bootstrap" Size="100"></SfSpinner>

    <div id="principal" class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                <div class="col-md-4  col-sm-6 my-1">
                    <SfTextBox ID="txtTrazPedido" Placeholder="Número de Pedido"
                               Input="OnInputPedido" @bind-Value="BoxPedido" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                </div>
                <div class="col-md-4 col-sm-6 my-1">
                    <SfTextBox ID="txtTrazCliente" Placeholder="Nombre de Cliente"
                               Input="OnInputCliente" @bind-Value="BoxCliente" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                </div>
                <div class=" col-md-4 col-sm-12 my-1">
                    <SfTextBox ID="txtTrazCg_Prod" Placeholder="Codigo de Producto"
                               Input="OnInputCodigo" @bind-Value="BoxCodigo" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 col-sm-6 my-1">
                    <button type="button" class="btn btn-success btn-sm" @onclick="@BuscarTrazabilidad">Buscar Pedido</button>
                </div>
                <div class="col-md-4 col-sm-6 my-1">
                    <button type="button" class="btn btn-info btn-sm" @onclick="@MostrarTrazabilidad">Mostrar Trazabilidad</button>
                </div>
                @{
                    if (Showgrid)
                    {
                        <div class="col-md-4 col-sm-6 my-1">
                            <button type="submit" class="btn btn-danger btn-sm" @onclick="@Catalogo">Imprimir catálogo</button>
                        </div>
                        <div class="col-md-4 col-sm-6 my-1">
                            <button type="submit" class="btn btn-warning btn-sm" @onclick="@Etiqueta">Identificación</button>
                        </div>
                        <div class="col-md-4 col-sm-6 my-1">
                            <button type="submit" class="btn btn-primary btn-sm" @onclick="@Ensayos">Ver ensayos</button>
                        </div>
                    }
                }
            </div>
        </div>
    </div>


    <SfDialog ID="dialogTrazPed" Width="1000px" MinHeight="650px" IsModal="true" ShowCloseIcon="true" @bind-Visible="@IsVisible">
            <DialogTemplates>
                <Header>Listado de Pedidos del Cliente @BoxCliente.ToUpper().Trim() </Header>
                <Content>
                    <SfGrid ID="dlgPedidoGrid" @ref="Grid2" GridLines="GridLine.Both" DataSource="@Busquedalist" Height="450px">
                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                        <GridEvents RowSelected="@(async ()=> await OnSelected())" TValue="Pedidos"></GridEvents>
                        <GridColumns>
                            <GridColumn Field=@nameof(Pedidos.PEDIDO) HeaderText="Pedido" Width="110px"></GridColumn>
                            <GridColumn Field=@nameof(Pedidos.DES_CLI) HeaderText="Cliente" Width="150px"></GridColumn>
                            <GridColumn Field=@nameof(Pedidos.CG_ART) HeaderText="Codigo" Width="150px"></GridColumn>
                            <GridColumn Field=@nameof(Pedidos.DES_ART) HeaderText="Descripcion" Width="150px"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                    @{
                        if (Busquedalist.Count == CantidadMostrar)
                        {
                            <div class="col-sm-3 my-1">
                                <button type="submit" class="btn btn-primary" @onclick="@AgregarValores">Buscar más</button>
                            </div>
                        }
                    }
                </Content>
            </DialogTemplates>
        </SfDialog>


    if (Showgrid == true)
    {
        <form>
            @{
                var lote = PedCliList.Where(t => t.PEDIDO.ToString() == TrzNro).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim();
                if (lote == null)
                {
                    lote = "";
                }
                var fecha = vpedidos.Where(t => t.PEDIDO.ToString() == TrzNro && t.TIPOO == 28).OrderByDescending(t => t.PEDIDO).FirstOrDefault().FE_MOV.ToString();
                if (fecha == null)
                {
                    fecha = "";
                }
                var prod = prodList.CG_PROD.ToString();
                if (prod == null)
                {
                    prod = "";
                }
                var orco = PedCliList.Where(t => t.PEDIDO.ToString() == TrzNro).OrderByDescending(t => t.PEDIDO).FirstOrDefault().ORCO.Trim();
                if (orco == null)
                {
                    orco = "";
                }
                if (vpedidos.Where(t => t.PEDIDO.ToString() == TrzNro).OrderByDescending(t => t.PEDIDO).FirstOrDefault().TIPOO == 1)
                {
                    var rem = vpedidos.Where(t => t.PEDIDO.ToString() == TrzNro && t.TIPOO == 1).OrderByDescending(t => t.PEDIDO).FirstOrDefault().REMITO;
                    if (rem != "" && rem != null)
                    {
                        remito = rem;
                    }
                }
                var modelo = prodList.CAMPOCOM1.Trim();
                if (modelo == null)
                {
                    modelo = "";
                }
                var medida = prodList.CAMPOCOM2.Trim();
                if (medida == null)
                {
                    medida = "";
                }
                var orificio = prodList.CAMPOCOM3.Trim();
                if (orificio == null)
                {
                    orificio = "";
                }
                var area = prodList.CAMPOCOM4.Trim();
                if (area == null)
                {
                    area = "";
                }
                var serie = prodList.CAMPOCOM5.Trim();
                if (serie == null)
                {
                    serie = "";
                }
                var tipo = prodList.CAMPOCOM6.Trim();
                if (tipo == null)
                {
                    tipo = "";
                }
                var presion = PedCliList.Where(t => t.PEDIDO.ToString() == TrzNro).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM1.Trim();
                if (presion == null)
                {
                    presion = "";
                }
                var resorte = PedCliList.Where(t => t.PEDIDO.ToString() == TrzNro).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM2.Trim();
                if (resorte == null)
                {
                    resorte = "";
                }
                var fluido = PedCliList.Where(t => t.PEDIDO.ToString() == TrzNro).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM3.Trim();
                if (fluido == null)
                {
                    fluido = "";
                }
                var presAj = PedCliList.Where(t => t.PEDIDO.ToString() == TrzNro).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM4.Trim();
                if (presAj == null)
                {
                    presAj = "";
                }
                var ctpre = PedCliList.Where(t => t.PEDIDO.ToString() == TrzNro).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM5.Trim();
                if (ctpre == null)
                {
                    ctpre = "";
                }
                var temp = PedCliList.Where(t => t.PEDIDO.ToString() == TrzNro).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM6.Trim();
                if (temp == null)
                {
                    temp = "";
                }
            }
            <div class="row">
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Pedido: @TrzNro"
                           readonly />
                </div>
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Producto: @prod"
                           readonly />
                </div>
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="O.C.: @orco"
                           readonly />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="PSV: @lote"
                           readonly />
                </div>
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Fecha: @fecha"
                           readonly />
                </div>
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Remito: @remito"
                           readonly />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Modelo: @modelo"
                           readonly />
                </div>
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Medida: @medida"
                           readonly />
                </div>
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Orificio: @orificio"
                           readonly />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Area: @area"
                           readonly />
                </div>
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Serie: @serie"
                           readonly />
                </div>
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Tipo: @tipo"
                           readonly />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Presion: @presion"
                           readonly />
                </div>
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Resorte: @resorte"
                           readonly />
                </div>
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Fluido: @fluido"
                           readonly />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="P. Aj Banco: @presAj"
                           readonly />
                </div>
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Contrapresión: @ctpre"
                           readonly />
                </div>
                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Temperatura: @temp"
                           readonly />
                </div>
            </div>
        </form>
        <div class="col-lg-12 control-section">
            <div class="content-wrapper">
                <div class="row">
                    <SfGrid ShowColumnChooser="true" AllowResizing="true" Width="auto" @ref="Grid4" ID="gridTrazPedidos"
                            GridLines="GridLine.Both" AllowReordering="true" AllowSorting="true"
                            DataSource="@vpedidos" AllowExcelExport="true" AllowGrouping="true" Toolbar="@Toolbaritems">
                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                        <GridEvents RowSelected="@(async()=> await OnSelectedCertificado())" OnToolbarClick="@ClickHandler"
                                    TValue="vTrazabilidad"></GridEvents>
                        <GridFilterSettings Type="@Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(vTrazabilidad.CG_ART) HeaderText="Producto" Width="100px"></GridColumn>
                            <GridColumn Field=@nameof(vTrazabilidad.DES_ART) HeaderText="Descripcion" Width="200px"></GridColumn>
                            <GridColumn Field=@nameof(vTrazabilidad.DESPACHO) HeaderText="Despacho" Width="70px"></GridColumn>
                            <GridColumn Field=@nameof(vTrazabilidad.LOTE) HeaderText="Lote" Width="70px"></GridColumn>
                            <GridColumn Field=@nameof(vTrazabilidad.NORMA) HeaderText="Norma" Width="70px"></GridColumn>
                            <GridColumn Field=@nameof(vTrazabilidad.CG_LINEA) HeaderText="Linea" Width="70px"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </div>
        </div>
        <SfDialog ID="dialogCertifTraz" @ref="DialogRef" Height="550px" Target="#gridTrazPedidos"
                  Width="950px" CssClass="dialog" ShowCloseIcon="true" Visible="false">
            <DialogTemplates>
                <Header>Detalle</Header>
                <Content>
                    <SfTab>
                        <TabItems>
                            <TabItem>
                                <HeaderTemplate>Certificado</HeaderTemplate>
                                <ContentTemplate>
                                    @{

                                        if (ShowCertificado)
                                        {
                                            var pdf_ruta = NroCertificado.Trim() + ".pdf,RUTATRAZABILIDAD";
                                            <div class="mt-5">
                                                @*<SfPdfViewer DocumentPath="@ruta"></SfPdfViewer>*@
                                                <SfPdfViewer ID="CertifiPdf"
                                                             ServiceUrl="/api/Values" DocumentPath="@pdf_ruta"
                                                             Height="85%" Width="90%"></SfPdfViewer>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="mt-5">
                                                <span class="text-danger text">No existe Certificado asociado</span>
                                            </div>
                                        }
                                    }
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <HeaderTemplate>Despiece</HeaderTemplate>
                                <ContentTemplate>
                                    @{
                                        if (OF is null || OF.Count() < 0)
                                        {
                                            <span>Cargando...</span>
                                        }
                                        else
                                        {
                                            <div class="col-lg-12 mt-4">
                                                <div class="content-wrapper">
                                                    <div class="row">
                                                        <SfGrid ID="despieceSE" GridLines="GridLine.Both"
                                                                ShowColumnChooser="true" DataSource="@ordenFabricacionMP">
                                                            <GridEvents TValue="ModeloOrdenFabricacionMP"></GridEvents>
                                                            <GridColumns>
                                                                <GridColumn Field=@nameof(ModeloOrdenFabricacionMP.CG_ART) HeaderText="Producto" Width="55px"></GridColumn>
                                                                <GridColumn Field=@nameof(ModeloOrdenFabricacionMP.DES_ART) HeaderText="Descripcion" Width="130px"></GridColumn>
                                                                <GridColumn Field=@nameof(ModeloOrdenFabricacionMP.DESPACHO) HeaderText="Despacho" Width="60px"></GridColumn>
                                                                <GridColumn Field=@nameof(ModeloOrdenFabricacionMP.LOTE) HeaderText="Lote" Width="110px"></GridColumn>
                                                                <GridColumn Field=@nameof(ModeloOrdenFabricacionMP.STOCK) HeaderText="Cant. Ent." Width="110px"></GridColumn>
                                                            </GridColumns>
                                                        </SfGrid>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                </ContentTemplate>
                            </TabItem>
                        </TabItems>
                    </SfTab>
                </Content>
            </DialogTemplates>
        </SfDialog>
    }
    else
    {
        <label class="centrado">Debe buscar arriba una orden de armado para ver su trazabilidad.</label>
    }
}

@*<BuscadorEmergente DataSource="Busquedalist" Columnas="@(new string[]{"PEDIDO", "DES_CLI", "CG_ART", "DES_ART" })"
                   TItem="Pedidos" Width="80%" Height="600px" Titulo="Listado de Pedidos del Cliente"
                   MostrarVerMas="@(Busquedalist.Count == CantidadMostrar)" Visible="@IsVisible" IsModal="false"
                   OnBuscarMas="@(async() => await AgregarValores())" OnCerrarDialog="@(()=> IsVisible = !IsVisible )"
                   OnObjetoSeleccionado="@(async (o)=> await OnSelectedPedido(o))" />*@



<style>
    .e-input-group.e-corner {
        border-radius: 4px;
    }

    label.centrado {
        margin: 0 auto;
        text-align: center;
    }

    .e-dialog.e-control.e-popup, .e-dialog.e-control.e-popup .e-dlg-header-content {
        background-color: #d9edf7;
    }

    e-dialog {
        max-height: 650px;
    }
</style>

@code {
    protected SfGrid<Pedidos> Grid;
    protected SfGrid<Pedidos> Grid2;
    protected SfGrid<Pedidos> Grid3;
    protected SfGrid<vTrazabilidad> Grid4;
    protected SfSpinner refSpinner;
    protected SfDialog DialogRef;
    public bool Enabled = true;
    public bool Disabled = false;
    public bool Showgrid = false;
    public bool ShowCertificado = false;

    protected List<Pedidos> pedidos = new List<Pedidos>();
    protected List<vTrazabilidad> vpedidos = new List<vTrazabilidad>();
    protected List<Pedidos> Pedidoslist = new List<Pedidos>();
    //protected List<Pedidos> Pedidoslist = new List<Pedidos>();
    protected List<Pedidos> Busquedalist = new List<Pedidos>();
    //protected List<Pedidos> Busquedalist = new List<Pedidos>();
    protected List<Pedidos> OF = new List<Pedidos>();
    protected List<PedCli> PedCliList = new List<PedCli>();
    protected Prod prodList = new Prod();
    protected List<Solution> rutas;
    protected List<Prod> ProdCertificado = new List<Prod>();
    protected List<PedCli> PedcliCertificado = new List<PedCli>();
    protected List<Pedidos> PedidosCertificado = new List<Pedidos>();
    protected string ruta;
    protected string BoxPedido = "";
    protected string BoxCliente = "";
    protected string BoxCodigo = "";
    protected string TrzNro = "";
    protected string CodNro = "";
    protected string NroCertificado = "";
    protected int CantidadMostrar = 100;
    protected bool IsVisible { get; set; } = false;
    protected bool IsVisibleCertificado { get; set; } = false;
    public int GridRowHeight = 20;
    string remito = "";

    protected DialogSettings DialogParams = new DialogSettings { MinHeight = "400px", Width = "1100px" };

    SfToast ToastObj;
    List<ModeloOrdenFabricacionMP> ordenFabricacionMP;

    protected List<Object> Toolbaritems = new List<Object>(){
            "Search",
            new ItemModel { Type = ItemType.Separator},
            "Print",
            "ExcelExport",
            new ItemModel { Type = ItemType.Separator},
            "ColumnChooser",
            new ItemModel { Type = ItemType.Separator},
            //new Syncfusion.Blazor.Navigations.ItemModel { Text = "small", TooltipText = "20px", PrefixIcon = "e-big-icon", Id = "small", Align = Syncfusion.Blazor.Navigations.ItemAlign.Right},
            //new Syncfusion.Blazor.Navigations.ItemModel { Text = "medium", TooltipText = "40px", PrefixIcon = "e-medium-icon", Id = "medium", Align = Syncfusion.Blazor.Navigations.ItemAlign.Right},
            //new Syncfusion.Blazor.Navigations.ItemModel { Text = "big", TooltipText = "60px", PrefixIcon = "e-small-icon", Id = "big", Align = Syncfusion.Blazor.Navigations.ItemAlign.Right}
        };
    [CascadingParameter]
    public MainLayout Layout { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Layout.Titulo = "Trazabilidad";
        //rutas = await Http.GetFromJsonAsync<List<Solution>>("api/Solution");
        await base.OnInitializedAsync();
    }

    public async Task ClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
        {
            await this.Grid.ExcelExport();
        }
        if (args.Item.Text == "Print")
        {
            await this.Grid.Print();
        }
    }

    public async Task OnSelectedPedido(object pedido)
    {
        var ped = (Pedidos)pedido;
        await refSpinner.ShowAsync();
        BoxPedido = ped.PEDIDO.ToString(); // return the details of selected record
        TrzNro = BoxPedido;
        BoxCliente = ped.DES_CLI; // return the details of selected record
        BoxCodigo = ped.CG_ART; // return the details of selected record
        CodNro = BoxCodigo;
        CantidadMostrar = 0;
        await MostrarTrazabilidad();
        IsVisible = false;
        await refSpinner.HideAsync();
    }


    public async Task OnSelected()
    {
        await refSpinner.ShowAsync();
        BoxPedido = this.Grid2.GetSelectedRecords().Result.FirstOrDefault().PEDIDO.ToString(); // return the details of selected record
        TrzNro = BoxPedido;
        BoxCliente = this.Grid2.GetSelectedRecords().Result.FirstOrDefault().DES_CLI; // return the details of selected record
        BoxCodigo = this.Grid2.GetSelectedRecords().Result.FirstOrDefault().CG_ART; // return the details of selected record
        CodNro = BoxCodigo;
        CantidadMostrar = 0;
        await MostrarTrazabilidad();
        IsVisible = false;
        await refSpinner.HideAsync();
    }

    public async Task OnSelectedCertificado()
    {
        await refSpinner.ShowAsync();
        var row = await this.Grid4.GetSelectedRecords();
        if (!string.IsNullOrEmpty(row[0].DESPACHO))
        {
            if (!string.IsNullOrEmpty(row[0].LOTE))
            {
                string ordFab = row[0].LOTE.Substring(3).Trim();

                // Materias Primas entregadas
                var programa = await Http.GetFromJsonAsync<List<Programa>>($"api/Programa/GetProgramaByOF/{Convert.ToDecimal(ordFab)}");
                if (programa != null && programa.Count != 0)
                {
                    ordenFabricacionMP = await Http.GetFromJsonAsync<List<ModeloOrdenFabricacionMP>>($"api/OrdenesFabricacionMP/{programa[0].CG_ORDFASOC.ToString()}");
                }
                else
                {
                    ordenFabricacionMP = new List<ModeloOrdenFabricacionMP>();
                }
            }
            if (!string.IsNullOrEmpty(row[0].DESPACHO))
            {
                NroCertificado = row[0].DESPACHO;
                var archivo = NroCertificado.Trim() + ".pdf";
                ShowCertificado = await Http.GetFromJsonAsync<bool>($"api/AdministracionArchivos/ExisteCertificado/{archivo}");
            }
            await DialogRef.Show(false);
        }
        await refSpinner.HideAsync();
    }

    protected async Task OnInputPedido(InputEventArgs args)
    {
        Pedidoslist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarPorPedido/{args.Value}");
        if (Pedidoslist.Count > 0)
        {
            BoxCliente = Pedidoslist.FirstOrDefault().DES_CLI;
            BoxCodigo = Pedidoslist.FirstOrDefault().CG_ART;
        }
        else
        {
            BoxCliente = "";
            BoxCodigo = "";
        }
    }

    protected async Task OnInputCodigo(InputEventArgs args)
    {
        Pedidoslist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarPorCodigo/{args.Value}");
        if (Pedidoslist.Count > 0)
        {
            BoxCliente = Pedidoslist.FirstOrDefault().DES_CLI;
            BoxPedido = Pedidoslist.FirstOrDefault().PEDIDO.ToString();
        }
        else
        {
            BoxCliente = "";
            BoxPedido = "";
        }
    }

    protected async Task OnInputCliente(InputEventArgs args)
    {
        Pedidoslist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarPorCliente/{args.Value}");
        if (Pedidoslist.Count > 0)
        {
            BoxPedido = Pedidoslist.FirstOrDefault().PEDIDO.ToString();
            TrzNro = BoxPedido;
            BoxCodigo = Pedidoslist.FirstOrDefault().CG_ART;
        }
        else
        {
            BoxPedido = "";
            BoxCodigo = "";
        }
    }

    protected async Task BuscarTrazabilidad()
    {
        await refSpinner.ShowAsync();
        CantidadMostrar = 100;
        if (BoxPedido != "")
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/{BoxPedido}/Vacio/Vacio/{CantidadMostrar}");
        }
        else if (BoxCliente != "")
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/Vacio/{BoxCliente}/Vacio/{CantidadMostrar}");
        }
        else if (BoxCodigo != "")
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/Vacio/Vacio/{BoxCodigo}/{CantidadMostrar}");
        }
        else
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/{BoxPedido}/{BoxCliente}/{BoxCodigo}/{CantidadMostrar}");
        }

        await refSpinner.HideAsync();
        IsVisible = true;
    }
    protected async Task MostrarTrazabilidad()
    {
        if (string.IsNullOrEmpty(BoxCodigo))
        {
            await this.ToastObj.Show(new ToastModel
            {
                Title = "Error!",
                Content = "Debe seleccionar un Pedido",
                CssClass = "e-toast-warning",
                Icon = "e-error toast-icons"
            });
        }
        else
        {
            await refSpinner.ShowAsync();
            PedCliList = await Http.GetFromJsonAsync<List<PedCli>>($"api/PedCli/{BoxPedido}");
            prodList = await Http.GetFromJsonAsync<Prod>($"api/Prod/{CodNro}");
            pedidos = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/MostrarTrazabilidad/{BoxPedido}");
            vpedidos = await Http.GetFromJsonAsync<List<vTrazabilidad>>($"api/Trazabilidads/MostrarTrazabilidad/{BoxPedido}");
            Showgrid = true;
            BoxPedido = "";
            BoxCliente = "";
            BoxCodigo = "";

            await refSpinner.ShowAsync();
        }


    }
    protected async Task Catalogo()
    {
        await refSpinner.ShowAsync();
        ProdCertificado = await Http.GetFromJsonAsync<List<Prod>>($"api/Prod/BuscarPorCG_PROD/{CodNro}");
        PedcliCertificado = await Http.GetFromJsonAsync<List<PedCli>>($"api/PedCli/BuscarPorPedido/{TrzNro}");
        PedidosCertificado = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BusquedaParaFE_MOV/{TrzNro}");
        string roscas = "";
        string Ansi_Api = "";

        string tobera = string.Empty;
        string cuerpo = string.Empty;
        string disco = string.Empty;
        string bonete = string.Empty;
        string toberaDespacho = string.Empty;
        string cuerpoDespacho = string.Empty;
        string discoDespacho = string.Empty;
        string boneteDespacho = string.Empty;
        string cuerpoPresionPrueba = string.Empty;
        string bonetePresionPrueba = string.Empty;

        if (vpedidos.Any(p => p.DES_ART.ToLower().StartsWith("tobera")))
        {
            tobera = vpedidos.Where(p => p.DES_ART.ToLower().StartsWith("tobera")).FirstOrDefault().NORMA;
            toberaDespacho = vpedidos.Where(p => p.DES_ART.ToLower().StartsWith("tobera")).FirstOrDefault().DESPACHO;
        }


        if (vpedidos.Any(p => p.DES_ART.ToLower().StartsWith("cuerpo") || p.DES_ART.ToLower().StartsWith("cpo")))
        {
            cuerpo = vpedidos.Where(p => p.DES_ART.ToLower().StartsWith("cuerpo") || p.DES_ART.ToLower().StartsWith("cpo")).FirstOrDefault().NORMA;
            cuerpoDespacho = vpedidos.Where(p => p.DES_ART.ToLower().StartsWith("cuerpo") || p.DES_ART.ToLower().StartsWith("cpo")).FirstOrDefault().DESPACHO;
            cuerpoPresionPrueba = vpedidos.Where(p => p.DES_ART.ToLower().StartsWith("cuerpo") || p.DES_ART.ToLower().StartsWith("cpo")).FirstOrDefault().CAMPOCOM4;
        }


        if (vpedidos.Any(p => p.DES_ART.ToLower().StartsWith("disco")))
        {
            disco = vpedidos.Where(p => p.DES_ART.ToLower().StartsWith("disco")).FirstOrDefault().NORMA;
            discoDespacho = vpedidos.Where(p => p.DES_ART.ToLower().StartsWith("disco")).FirstOrDefault().DESPACHO;
        }


        if (vpedidos.Any(p => p.DES_ART.ToLower().StartsWith("bonete")))
        {
            bonete = vpedidos.Where(p => p.DES_ART.ToLower().StartsWith("bonete")).FirstOrDefault().NORMA;
            boneteDespacho = vpedidos.Where(p => p.DES_ART.ToLower().StartsWith("bonete")).FirstOrDefault().DESPACHO;
            bonetePresionPrueba = vpedidos.Where(p => p.DES_ART.ToLower().StartsWith("bonete")).FirstOrDefault().CAMPOCOM4;
        }


        if (CodNro.Substring(0, 1) == "1")
        {
            roscas = "Aprobado";
            Ansi_Api = "-";
        }
        else
        {
            roscas = "-";
            Ansi_Api = "Aprobado";
        }
        //Create a new PDF document
        PdfDocument document = new PdfDocument();
        //Create the page
        PdfPage page = document.Pages.Add();
        //Create PDF graphics for the page
        var fuente = await Http.GetStreamAsync("./Calibri 400.ttf");
        //FileStream fontStream = new FileStream(fuente);
        //Create a PdfGrid
        PdfGrid pdfGrid = new PdfGrid();

        PdfGraphics graphics = page.Graphics;
        //PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 10, PdfFontStyle.Bold);
        //PdfFont font = new PdfTrueTypeFont("wwwroot\\Calibri 400.ttf", 24);
        PdfFont font = new PdfTrueTypeFont(fuente, 10, PdfFontStyle.Bold);

        //Create and customize the string formats
        PdfStringFormat Centrado = new PdfStringFormat();
        Centrado.Alignment = PdfTextAlignment.Center;
        Centrado.LineAlignment = PdfVerticalAlignment.Middle;
        //Create and customize the string formats
        PdfStringFormat Izquierda = new PdfStringFormat();
        Izquierda.Alignment = PdfTextAlignment.Left;
        Izquierda.LineAlignment = PdfVerticalAlignment.Middle;
        //Add columns to PdfGrid
        for (int i = 0; i < 6; i++)
        {
            PdfGridColumn column = pdfGrid.Columns.Add();
            if (i == 0 || i == 1 || i == 4 || i == 5)
            {
                column.Width = 64;
            }
            if (i == 2 || i == 3)
            {

                column.Width = 128;
            }
        }
        //Add rows to PdfGrid
        for (int i = 0; i < 32; i++)
        {
            PdfGridRow row = pdfGrid.Rows.Add();
            if (i == 0 || i == 1 || i == 2 || i == 3 || i == 7 || i == 17 || i == 21)
            {
                row.Height = 26;
            }
            else if (i == 31)
            {
                row.Height = 47;
            }
            else
            {
                row.Height = 22;
            }
        }
        //Load the image from the stream
        //FileStream fs = new FileStream("wwwroot\\logo_aerre.jpg", FileMode.Open);
        //FileStream IMR = new FileStream("wwwroot\\IMR.jpg", FileMode.Open);
        var fs = await Http.GetStreamAsync("./logo_aerre.jpg");
        var IMR = await Http.GetStreamAsync("./IMR.jpg");
        //LINEA 0
        //Add RowSpan
        PdfGridCell gridCell1 = pdfGrid.Rows[0].Cells[0];
        gridCell1.ColumnSpan = 2;
        gridCell1.RowSpan = 2;
        gridCell1.StringFormat = Centrado;
        gridCell1.Value = new PdfTextElement("ARBROS S.A.", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);
        //Add RowSpan
        PdfGridCell gridCell2 = pdfGrid.Rows[0].Cells[2];
        gridCell2.ColumnSpan = 2;
        gridCell2.RowSpan = 2;
        gridCell2.StringFormat = Centrado;
        gridCell2.Value = new PdfTextElement("ACTA DE INSPECCIÓN", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);
        //Add RowSpan
        PdfGridCell gridCell3 = pdfGrid.Rows[0].Cells[4];
        gridCell3.ColumnSpan = 2;
        gridCell3.RowSpan = 2;
        gridCell3.StringFormat = Centrado;
        gridCell3.Value = new PdfTextElement($"Cliente: \n {PedcliCertificado.FirstOrDefault().DES_CLI.Trim()}", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);

        //LINEA 2
        //Add RowSpan
        PdfGridCell gridCell4 = pdfGrid.Rows[2].Cells[0];
        gridCell4.ColumnSpan = 2;
        gridCell4.RowSpan = 2;
        gridCell4.StringFormat = Centrado;
        gridCell4.Value = new PdfBitmap(fs);
        //Add RowSpan
        PdfGridCell gridCell5 = pdfGrid.Rows[2].Cells[2];
        gridCell5.ColumnSpan = 2;
        gridCell5.RowSpan = 2;
        gridCell5.StringFormat = Centrado;
        gridCell5.Value = new PdfTextElement("VÁLVULAS DE SEGURIDAD Y ALIVIO", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);
        //Add RowSpan
        PdfGridCell gridCell6 = pdfGrid.Rows[2].Cells[4];
        gridCell6.ColumnSpan = 2;
        gridCell6.RowSpan = 2;
        gridCell6.StringFormat = Centrado;
        gridCell6.Value = new PdfTextElement($"O.C.I.: {PedcliCertificado.FirstOrDefault().NUMOCI}\n" +
                                             $"{PedidosCertificado.FirstOrDefault().FE_MOV.ToShortDateString()}", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);

        //LINEA 4 GENERALIDADES
        //Add RowSpan
        PdfGridCell gridCell7 = pdfGrid.Rows[4].Cells[0];
        gridCell7.ColumnSpan = 2;
        gridCell7.StringFormat = Izquierda;
        gridCell7.Value = new PdfTextElement($"GENERALIDADES", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);
        //Add RowSpan
        PdfGridCell gridCell8 = pdfGrid.Rows[4].Cells[2];
        gridCell8.ColumnSpan = 1;
        gridCell8.StringFormat = Izquierda;
        gridCell8.Value = $"   Orden de compra:\n" +
                          $"   Remito de entrega:";
        //Add RowSpan
        PdfGridCell gridCell9 = pdfGrid.Rows[4].Cells[3];
        gridCell9.ColumnSpan = 3;
        gridCell9.StringFormat = Izquierda;
        gridCell9.Value = $"   {PedcliCertificado.FirstOrDefault().ORCO.Trim()}\n" +
                          $"   {vpedidos.Where(p => p.TIPOO == 1).FirstOrDefault().REMITO.Trim()}";

        //LINEA 5 DATOS DE PLACA
        //Add RowSpan
        PdfGridCell gridCell10 = pdfGrid.Rows[5].Cells[0];
        gridCell10.ColumnSpan = 2;
        gridCell10.RowSpan = 6;
        gridCell10.StringFormat = Izquierda;
        gridCell10.Value = new PdfTextElement("DATOS DE PLACA", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);
        //Add RowSpan
        PdfGridCell gridCell11 = pdfGrid.Rows[5].Cells[2];
        gridCell11.ColumnSpan = 1;
        gridCell11.RowSpan = 6;
        gridCell11.StringFormat = Izquierda;
        gridCell11.Value = $"   Linea de Producto:\n" +
                           $"   Nro de Serie:\n" +
                           $"   TAG:\n" +
                           $"   Medida (Ent x Sal):\n" +
                           $"   Clase (Ent x Sal):\n" +
                           $"   Orif. API 526 / Area:\n" +
                           $"   Presión de Apertura:\n" +
                           $"   Contrapresión:\n" +
                           $"   Presión de ajuste en Banco:\n" +
                           $"   Fluido:\n" +
                           $"   Temperatura:\n" +
                           $"   Código de Resorte:\n" +
                           $"   Código de la válvula:";
        //Add RowSpan
        PdfGridCell gridCell12 = pdfGrid.Rows[5].Cells[3];
        gridCell12.ColumnSpan = 3;
        gridCell12.RowSpan = 6;
        gridCell12.StringFormat = Izquierda;
        gridCell12.Value = $"   {ProdCertificado.FirstOrDefault().CAMPOCOM1.Trim()}\n" +
                           $"   {TrzNro}\n" +
                           $"   {PedcliCertificado.FirstOrDefault().LOTE.Trim()}\n" +
                           $"   {ProdCertificado.FirstOrDefault().CAMPOCOM2.Trim()}\n" +
                           $"   {ProdCertificado.FirstOrDefault().CAMPOCOM5.Trim()}\n" +
                           $"   {ProdCertificado.FirstOrDefault().CAMPOCOM3.Trim()}\n" +
                           $"   {PedcliCertificado.FirstOrDefault().CAMPOCOM1.Trim()}\n" +
                           $"   {PedcliCertificado.FirstOrDefault().CAMPOCOM5.Trim()}\n" +
                           $"   {PedcliCertificado.FirstOrDefault().CAMPOCOM4.Trim()}\n" +
                           $"   {PedcliCertificado.FirstOrDefault().CAMPOCOM3.Trim()}\n" +
                           $"   {PedcliCertificado.FirstOrDefault().CAMPOCOM6.Trim()}\n" +
                           $"   {PedcliCertificado.FirstOrDefault().CAMPOCOM2.Trim()}\n" +
                           $"   {CodNro}";

        //CONTROL DIMENSIONAL
        //Add RowSpan
        PdfGridCell gridCell13 = pdfGrid.Rows[11].Cells[0];
        gridCell13.ColumnSpan = 2;
        gridCell13.RowSpan = 2;
        gridCell13.StringFormat = Izquierda;
        gridCell13.Value = new PdfTextElement("CONTROL DIMENSIONAL", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);
        //Add RowSpan
        PdfGridCell gridCell14 = pdfGrid.Rows[11].Cells[2];
        gridCell14.ColumnSpan = 1;
        gridCell14.StringFormat = Izquierda;
        gridCell14.RowSpan = 2;
        gridCell14.Value = $"   ANSI B-16.5 (Ent-Sal)\n" +
                           $"   Roscas (Ent-Sal)\n" +
                           $"   API 526";
        //Add RowSpan
        PdfGridCell gridCell15 = pdfGrid.Rows[11].Cells[3];
        gridCell15.ColumnSpan = 3;
        gridCell15.StringFormat = Izquierda;
        gridCell15.RowSpan = 2;
        gridCell15.Value = $"   {Ansi_Api}\n" +
                           $"   {roscas}\n" +
                           $"   {Ansi_Api}";

        //PRUEBA HIDRAULICA Y MATERIALES
        //Add RowSpan
        PdfGridCell gridCell16 = pdfGrid.Rows[13].Cells[0];
        gridCell16.ColumnSpan = 2;
        gridCell16.RowSpan = 8;
        gridCell16.StringFormat = Izquierda;
        gridCell16.Value = new PdfTextElement("PRUEBA HIDRAULICA Y MATERIALES", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);
        //Add RowSpan
        PdfGridCell gridCell17 = pdfGrid.Rows[13].Cells[2];
        gridCell17.ColumnSpan = 1;
        gridCell17.RowSpan = 2;
        gridCell17.StringFormat = Izquierda;
        gridCell17.Value = $"   Material Disco\n" +
                           $"   Identificación Disco";
        //Add RowSpan
        PdfGridCell gridCell18 = pdfGrid.Rows[13].Cells[3];
        gridCell18.ColumnSpan = 3;
        gridCell18.RowSpan = 2;
        gridCell18.StringFormat = Izquierda;
        gridCell18.Value = $"   {disco}\n" +
                           $"   {discoDespacho}";
        //Add RowSpan
        PdfGridCell gridCell19 = pdfGrid.Rows[15].Cells[2];
        gridCell19.ColumnSpan = 1;
        gridCell19.RowSpan = 2;
        gridCell19.StringFormat = Izquierda;
        gridCell19.Value = $"   Material Tobera\n" +
                           $"   Identificación Tobera";
        //Add RowSpan
        PdfGridCell gridCell20 = pdfGrid.Rows[15].Cells[3];
        gridCell20.ColumnSpan = 3;
        gridCell20.RowSpan = 2;
        gridCell20.StringFormat = Izquierda;
        gridCell20.Value = $"   {tobera}\n" +
                           $"   {toberaDespacho}";
        //Add RowSpan
        PdfGridCell gridCell21 = pdfGrid.Rows[17].Cells[2];
        gridCell21.ColumnSpan = 1;
        gridCell21.RowSpan = 2;
        gridCell21.StringFormat = Izquierda;
        gridCell21.Value = $"   Material Cuerpo\n" +
                           $"   Identificación Cuerpo\n" +
                           $"   Presión de Prueba Hidráulica";
        //Add RowSpan
        PdfGridCell gridCell22 = pdfGrid.Rows[17].Cells[3];
        gridCell22.ColumnSpan = 3;
        gridCell22.RowSpan = 2;
        gridCell22.StringFormat = Izquierda;
        gridCell22.Value = $"   {cuerpo}\n" +
                           $"   {cuerpoDespacho}\n" +
                           $"   {cuerpoPresionPrueba}";
        //Add RowSpan
        PdfGridCell gridCell23 = pdfGrid.Rows[19].Cells[2];
        gridCell23.ColumnSpan = 1;
        gridCell23.RowSpan = 2;
        gridCell23.StringFormat = Izquierda;
        gridCell23.Value = $"   Material Bonete\n" +
                           $"   Identificación Bonete\n" +
                           $"   Presión de Prueba Hidráulica";
        //Add RowSpan
        PdfGridCell gridCell24 = pdfGrid.Rows[19].Cells[3];
        gridCell24.ColumnSpan = 3;
        gridCell24.RowSpan = 2;
        gridCell24.StringFormat = Izquierda;
        gridCell24.Value = $"   {bonete}\n" +
                           $"   {boneteDespacho}\n" +
                           $"   {bonetePresionPrueba}";

        //ENSAYOS OPERACIONALES EN BANCO HIDRONEUMÁTICO
        //Add RowSpan
        PdfGridCell gridCell25 = pdfGrid.Rows[21].Cells[0];
        gridCell25.ColumnSpan = 2;
        gridCell25.RowSpan = 4;
        gridCell25.StringFormat = Izquierda;
        gridCell25.Value = new PdfTextElement("ENSAYOS OPERACIONALES EN BANCO HIDRONEUMÁTICO - FLUIDO AIRE A TEMP. AMBIENTE ", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);
        //Add RowSpan
        PdfGridCell gridCell26 = pdfGrid.Rows[21].Cells[2];
        gridCell26.ColumnSpan = 3;
        gridCell26.RowSpan = 3;
        gridCell26.StringFormat = Izquierda;
        gridCell26.Value = $"   Calibracion a la presión segun ASME PTC-25.3:\n" +
                           $"   Ensayos de repetitividad (3):\n" +
                           $"   Control estanqueidad de asientos segun API 527:";
        //Add RowSpan
        PdfGridCell gridCell27 = pdfGrid.Rows[21].Cells[5];
        gridCell27.ColumnSpan = 1;
        gridCell27.RowSpan = 3;
        gridCell27.StringFormat = Izquierda;
        gridCell27.Value = $"   Satisfactorio\n"+
            $"   Satisfactorio\n" +
            $"   Satisfactorio";
        //Add RowSpan
        PdfGridCell gridCell28 = pdfGrid.Rows[24].Cells[2];
        gridCell28.ColumnSpan = 3;
        gridCell28.StringFormat = Izquierda;
        gridCell28.Value = $" Patrón Utilizado:";
        //Add RowSpan
        PdfGridCell gridCell29 = pdfGrid.Rows[24].Cells[5];
        gridCell29.ColumnSpan = 1;
        gridCell29.StringFormat = Izquierda;
        gridCell29.Value = $"   ..........";

        //RESULTADO
        //Add RowSpan
        PdfGridCell gridCell30 = pdfGrid.Rows[25].Cells[0];
        gridCell30.ColumnSpan = 2;
        gridCell30.StringFormat = Izquierda;
        gridCell30.Value = new PdfTextElement("RESULTADO ", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);
        //Add RowSpan
        PdfGridCell gridCell31 = pdfGrid.Rows[25].Cells[2];
        gridCell31.ColumnSpan = 4;
        gridCell31.StringFormat = Izquierda;
        gridCell31.Value = new PdfTextElement("Satisfactorio", font, new PdfPen(PdfColor.Empty), PdfBrushes.AliceBlue, Centrado);

        //FIRMA
        //Add RowSpan
        PdfGridCell gridCellx35 = pdfGrid.Rows[26].Cells[0];
        gridCellx35.ColumnSpan = 2;
        gridCellx35.RowSpan = 4;
        gridCellx35.StringFormat = Izquierda;
        gridCellx35.Value = new PdfTextElement("FIRMA INSPECTOR AERRE ", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);
        //Add RowSpan
        PdfGridCell gridCellx36 = pdfGrid.Rows[26].Cells[2];
        gridCellx36.ColumnSpan = 1;
        gridCellx36.RowSpan = 3;
        gridCellx36.StringFormat = Izquierda;
        gridCellx36.Value = new PdfBitmap(IMR);
        //Add RowSpan
        PdfGridCell gridCellAclara = pdfGrid.Rows[26].Cells[3];
        gridCellAclara.ColumnSpan = 3;
        gridCellAclara.RowSpan = 3;
        gridCellAclara.StringFormat = Centrado;
        gridCellAclara.Value = $"   Ing. Iris Mónica Rabboni\n"+
            $"   Nº en OPDS s/res 1126: 188\n" +
            $"   Matrícula: 47642";

        //Add RowSpan
        //PdfGridCell gridCellDirecc = pdfGrid.Rows[26].Cells[4];
        //gridCellAclara.ColumnSpan = 2;
        //gridCellAclara.RowSpan = 3;
        //gridCellAclara.StringFormat = Izquierda;
        //gridCellAclara.Value = $"   ARBROS SA.\n" +
        //    $"   Parque Industrial Desarrollo Productivo\n" +
        //    $"   Ruta 24 5801, Moreno, Provincia de Buenos Aires";

        //PRECINTO
        //Add RowSpan
        PdfGridCell gridCellx37 = pdfGrid.Rows[29].Cells[2];
        gridCellx37.ColumnSpan = 4;
        gridCellx37.StringFormat = Izquierda;
        gridCellx37.Value = new PdfTextElement("Parque Industrial Desarrollo Productivo Ruta 24 5801, Moreno, Provincia de Buenos Aires",
            font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);




        //Add RowSpan
        PdfGridCell gridCellPrecinto = pdfGrid.Rows[30].Cells[0];
        gridCellPrecinto.ColumnSpan = 2;
        gridCellPrecinto.StringFormat = Izquierda;
        gridCellPrecinto.Value = $"";

        PdfGridCell gridCellx38 = pdfGrid.Rows[30].Cells[2];
        gridCellx38.ColumnSpan = 4;
        gridCellx38.StringFormat = Izquierda;
        gridCellx38.Value = $"   PRECINTO AERRE 00024 ";



        //GARANTIA
        //Add RowSpan
        PdfGridCell gridCell58 = pdfGrid.Rows[31].Cells[0];
        gridCell58.ColumnSpan = 6;
        gridCell58.StringFormat = Centrado;
        gridCell58.Value = "GARANTIA: \n Los productos están garantizados por el término de 12 meses a partir de la salida de fábrica," +
                " contra todo defecto de materiales y / o fabricación, limitada a la reposición sin cargo en nuestra fábrica de un " +
                "elemento similar. Esta garantía no ampara el desgaste anormal por la utilización en condiciones distintas a las " +
                "especificadas";

        //Draw the PdfGrid
        pdfGrid.Draw(page, new Syncfusion.Drawing.PointF(0, 0));
        //Saving the PDF to the MemoryStream
        MemoryStream stream = new MemoryStream();
        document.Save(stream);
        //Set the position as '0'
        stream.Position = 0;
        //Close the document
        document.Close(true);
        await JsRuntime.SaveAs($" Certificado" + ".pdf", stream.ToArray());
        await refSpinner.HideAsync();
    }
    protected async Task AgregarValores()
    {
        CantidadMostrar = CantidadMostrar + 100;
        if (BoxPedido != "")
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/{BoxPedido}/Vacio/Vacio/{CantidadMostrar}");
        }
        else if (BoxCliente != "")
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/Vacio/{BoxCliente}/Vacio/{CantidadMostrar}");
        }
        else if (BoxCodigo != "")
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/Vacio/Vacio/{BoxCodigo}/{CantidadMostrar}");
        }
        else
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/{BoxPedido}/{BoxCliente}/{BoxCodigo}/{CantidadMostrar}");
        }
    }

    protected async Task Etiqueta()
    {
        if (true)
        {
            if (CodNro.Substring(0, 1) == "2")
            {
                string espaciosPedido = "";
                string CLIENTE = PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().DES_CLI.Trim();
                if (CLIENTE.Contains("YPF") || CLIENTE.Contains("Y.P.F"))
                {
                    //Chapa de 101 mm x 78 mm
                    PdfDocument document1 = new PdfDocument();
                    document1.PageSettings.Size = new Syncfusion.Drawing.SizeF(382, 295);
                    document1.PageSettings.Margins.All = 0;
                    PdfGrid pdfGrid1 = new PdfGrid();
                    PdfPage page = document1.Pages.Add();
                    PdfGraphics graphics = page.Graphics;
                    PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 16);
                    PdfLightTable pdfTable = new PdfLightTable();
                    page.Graphics.RotateTransform(-360);
                    for (int i = 0; i < (20 - PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim().Length); i++)
                    {
                        espaciosPedido = espaciosPedido + " ";
                    }
                    var tipo2 = prodList.CAMPOCOM6;
                    string tipo = "";
                    if (string.IsNullOrEmpty(tipo2))
                    {
                        tipo = "";
                    }
                    else
                    {
                        tipo = tipo2.ToString();
                    }
                    FileStream fs = new FileStream("wwwroot\\logo_aerre.jpg", FileMode.Open);

                    graphics.DrawString($" \r\n" +
                        $"\r\n" +
                        $"\r\n" +
                        $"    Año:{DateTime.Now.Year}  N°:{TrzNro} \r\n" +
                        $"    TAG:{PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim()}\r\n" +
                        $"    Tipo:\r\n" +
                        $"    Codigo:{CodNro.Trim()}\r\n" +
                        $"    Medida:{prodList.CAMPOCOM2.Trim()}  {prodList.CAMPOCOM3.Trim()}\r\n" +
                        $"    Clase:{prodList.CAMPOCOM5.Trim()}\r\n" +
                        $"    Temp:{PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM6.Trim()}\r\n" +
                        $"    Presion SET:{PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM1.Trim()}\r\n" +
                        $"    P. Aj Banco:{PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM4.Trim()}\r\n" +
                        $"    Ctra.P:{PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM5.Trim()}\r\n" +
                        $"    Fluido:{PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM3.Trim()}\r\n" +
                        $"    Cuerpo:\r\n" +
                        $"    Tobera:\r\n" +
                        $"    Resorte:\r\n" +
                        $"    T.OPDS N°:8/11\r\n" +
                        $"    M.OPDS N°:47642\r\n" +
                        $"          Arbros S.A.\r\n" +
                        $"       www.aerre.com.ar\r\n" +
                        $"     Industria  Argentina\r\n" +
                        $"                               ", font, PdfBrushes.Black, new Syncfusion.Drawing.PointF(0, 0));


                    MemoryStream xx = new MemoryStream();
                    document1.Save(xx);
                    document1.Close(true);
                    await JsRuntime.SaveAs("EtiquetaProd" + CodNro.Trim() + ".pdf", xx.ToArray());
                }
                //else
                //{

                //    string espaciosPedidox = "";
                //    string espaciosAnio = "";
                //    string espaciosSegundoCampo3bis = "";
                //    string espaciosSegundoCampo4bis = "";
                //    string espaciosSegundoCampo5bis = "";

                //    //Chapa de 101 mm x 78 mm
                //    PdfDocument document1 = new PdfDocument();
                //    document1.PageSettings.Size = new Syncfusion.Drawing.SizeF(382, 295);
                //    document1.PageSettings.Margins.All = 0;
                //    PdfGrid pdfGrid1 = new PdfGrid();
                //    PdfPage page = document1.Pages.Add();
                //    PdfGraphics graphics = page.Graphics;
                //    PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 16);
                //    PdfLightTable pdfTable = new PdfLightTable();
                //    page.Graphics.RotateTransform(-360);

                //    for (int i = 0; i < (25 - PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Length); i++)
                //    {
                //        espaciosPedidox = espaciosPedidox + " ";
                //    }
                //    for (int i = 0; i < (16 - ordenFabricacion.CG_PROD.Length); i++)
                //    {
                //        espaciosAnio = espaciosAnio + " ";
                //    }
                //    for (int i = 0; i < (25 - prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM5.Trim().Length); i++)
                //    {
                //        espaciosSegundoCampo3bis = espaciosSegundoCampo3bis + " ";
                //    }
                //    for (int i = 0; i < (25 - PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM3.Trim().Length); i++)
                //    {
                //        espaciosSegundoCampo4bis = espaciosSegundoCampo4bis + " ";
                //    }
                //    for (int i = 0; i < (25 - prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM5.Trim().Length); i++)
                //    {
                //        espaciosSegundoCampo5bis = espaciosSegundoCampo5bis + " ";
                //    }

                //    string xd1 = prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM2.Trim();
                //    string xd2 = prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM5.Trim();
                //    int UbicacionXMedida = xd1.ToLower().IndexOf('x');
                //    int UbicacionXMedida2 = xd2.ToLower().IndexOf('x');

                //    string primeramedida1 = xd1.Substring(0, UbicacionXMedida);
                //    string segundamedida1 = xd1.Substring(UbicacionXMedida + 1);
                //    string primeramedida2 = xd2.Substring(0, UbicacionXMedida2);
                //    string segundamedida2 = xd2.Substring(UbicacionXMedida2 + 1);

                //    graphics.DrawString($"\r\n\r\n\r\n\r\n\r\n\r\n    {PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE}{espaciosPedidox}{ordenFabricacion.PEDIDO} " +
                //        $"\r\n\r\n         {ordenFabricacion.CG_PROD} {espaciosAnio}     {DateTime.Now.Year} " +
                //        $"\r\n             {primeramedida1}                {segundamedida1}" +
                //        $"\r\n\r\n    {primeramedida2}   {segundamedida2}        {prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM3.Trim()}" +
                //        $"\r\n                     { PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM1.Trim()}    " +
                //        $"\r\n\r\n       {PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM3.Trim()}{espaciosSegundoCampo4bis} " +
                //        $"\r\n         {PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM5.Trim()}                        " +
                //        $"\r\n\r\n" +
                //        $"\r\n" +
                //        $"\r\n\r\n                         {PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM4.Trim()}   " +
                //        $"\r\n                     {PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM2.Trim()}" +
                //        $"\r\n\r\n" +
                //        $"\r\n    " +
                //        $"\r\n    ", font, PdfBrushes.Black, new Syncfusion.Drawing.PointF(0, 0));

                //    MemoryStream xx = new MemoryStream();
                //    document1.Save(xx);
                //    document1.Close(true);
                //    await JS.SaveAs("ETOF" + ordenFabricacion.CG_PROD.Trim() + ".pdf", xx.ToArray());
                //}
            }
            if (CodNro.Substring(0, 1) == "1")
            {
                //Chapa de 25 x 95
                PdfDocument document1 = new PdfDocument();
                document1.PageSettings.Size = new Syncfusion.Drawing.SizeF(359, 94);
                document1.PageSettings.Margins.All = 0;
                document1.PageSettings.Rotate = PdfPageRotateAngle.RotateAngle180;
                PdfGrid pdfGrid1 = new PdfGrid();
                PdfPage page = document1.Pages.Add();
                PdfGraphics graphics = page.Graphics;
                PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
                PdfLightTable pdfTable = new PdfLightTable();
                page.Graphics.RotateTransform(-90);
                string espaciosTag = "";
                for (int i = 0; i < (20 - TrzNro.ToString().Length); i++)
                {
                    espaciosTag = espaciosTag + " ";
                }
                string espaciosAnio = "";
                for (int i = 0; i < (32 - PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim().Length); i++)
                {
                    espaciosAnio = espaciosAnio + " ";
                }
                string espaciosOrif = "";
                for (int i = 0; i < (32 - prodList.CAMPOCOM2.Trim().Length); i++)
                {
                    espaciosOrif = espaciosOrif + " ";
                }
                string espaciosClase = "";
                for (int i = 0; i < (20 - PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM4.Trim().Length); i++)
                {
                    espaciosClase = espaciosClase + " ";
                }
                string espaciosSinLote = "";
                for (int i = 0; i < 43; i++)
                {
                    espaciosSinLote = espaciosSinLote + " ";
                }

                //graphics.DrawString($"\r\n\r\n\r\n                  {ordenFabricacion.PEDIDO}{espaciosTag}{PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim()}{espaciosAnio}{DateTime.Now.Year} " +
                //    $"\r\n\r\n                        {ordenFabricacion.CG_PROD.Trim()}{espaciosMed}{prodList.Where(t => t.CG_PROD == ordenFabricacion.CG_PROD).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM2.Trim()}{espaciosOrif}{prodList.Where(t => t.CG_PROD.Trim() == ordenFabricacion.CG_PROD.Trim()).OrderByDescending(t => t.CG_PROD.Trim()).FirstOrDefault().CAMPOCOM3.Trim()} " +
                //    $"\r\n\r\n                                                                        {PedCliList.Where(t => t.PEDIDO == ordenFabricacion.PEDIDO).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM4.Trim()}{espaciosClase}{prodList.Where(t => t.CG_PROD.Trim() == ordenFabricacion.CG_PROD.Trim()).OrderByDescending(t => t.CG_PROD.Trim()).FirstOrDefault().CAMPOCOM5.Trim()} ", font, PdfBrushes.Black, new Syncfusion.Drawing.PointF(-359, 0));
                if (!String.IsNullOrEmpty(PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim()))
                {
                    graphics.DrawString($"\r\n\r\n                                     {Convert.ToInt32(TrzNro)}{espaciosSinLote}{DateTime.Now.Year}     .  .  .  .  ." +
                        $"\r\n               {CodNro.Trim()}          {prodList.CAMPOCOM2.Trim()}{espaciosOrif}{prodList.CAMPOCOM3.Trim()} " +
                        $"\r\n.                                            {PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM1.Trim()}{espaciosClase}{prodList.CAMPOCOM5.Trim()}     .  .  .  .  .", font, PdfBrushes.Black, new Syncfusion.Drawing.PointF(-359, 0));
                }
                else
                {
                    graphics.DrawString($"                                                                                                           \"\r\n\r\n                                     {Convert.ToInt32(TrzNro)}{espaciosTag}{PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim()}{espaciosAnio}{DateTime.Now.Year}" +
                    $"\r\n               {CodNro.Trim()}          {prodList.CAMPOCOM2.Trim()}{espaciosOrif}{prodList.CAMPOCOM3.Trim()} " +
                    $"\r\n                                             {PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM1.Trim()}{espaciosClase}{prodList.CAMPOCOM5.Trim()}" +
                    $"\r\n\r\n._", font, PdfBrushes.Black, new Syncfusion.Drawing.PointF(-359, 0));
                }

                MemoryStream xx = new MemoryStream();
                document1.Save(xx);
                document1.Close(true);
                await JsRuntime.SaveAs("ETOF" + CodNro.Trim() + ".pdf", xx.ToArray());
            }
            if (CodNro.Substring(0, 4) == "0012" ||
                CodNro.Substring(0, 5) == "00130" ||
                CodNro.Substring(0, 5) == "00131")
            {
                string espaciosbar = "";
                for (int i = 0; i < (16 - PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim().Length); i++)
                {
                    espaciosbar = espaciosbar + " ";
                }
                //Chapa de 31 x 78
                PdfDocument document1 = new PdfDocument();
                document1.PageSettings.Size = new Syncfusion.Drawing.SizeF(117, 295);
                document1.PageSettings.Orientation = PdfPageOrientation.Landscape;
                document1.PageSettings.Margins.All = 0;
                PdfGrid pdfGrid1 = new PdfGrid();
                PdfPage page = document1.Pages.Add();
                PdfGraphics graphics = page.Graphics;
                PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 16);
                PdfLightTable pdfTable = new PdfLightTable();

                string presionMostrar = PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM1.Trim();
                int found = presionMostrar.ToUpper().IndexOf("B");
                if (found == -1)
                {
                    presionMostrar = PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM1.Trim();
                }
                else
                {
                    presionMostrar = presionMostrar.Substring(0, found);
                }

                graphics.DrawString($"\"\r\n\r\n\r\n        {Convert.ToInt32(TrzNro)}           {DateTime.Now.Month}/{DateTime.Now.Year} " +
                $"\r\n        {PedCliList.Where(t => t.PEDIDO == Convert.ToInt32(TrzNro)).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim()}{espaciosbar}{presionMostrar}" +
                $"\r\n\r\n                              .", font, PdfBrushes.Black, new Syncfusion.Drawing.PointF(0, 0));

                MemoryStream xx = new MemoryStream();
                document1.Save(xx);
                document1.Close(true);
                await JsRuntime.SaveAs("ETOF" + CodNro.Trim() + ".pdf", xx.ToArray());
            }
        }
        //else
        //{
        //    PdfDocument document1 = new PdfDocument();
        //    document1.PageSettings.Size = new Syncfusion.Drawing.SizeF(227, 70);//110
        //    document1.PageSettings.Margins.All = 0;
        //    PdfGrid pdfGrid1 = new PdfGrid();
        //    PdfPage page = document1.Pages.Add();
        //    PdfGraphics graphics = page.Graphics;
        //    PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 10);
        //    PdfLightTable pdfTable = new PdfLightTable();
        //    page.Graphics.RotateTransform(-90);

        //    OrdenDeFabAlta = dbCarga.Where(t => t.CG_ORDFASOC == ordenFabricacion.CG_ORDFASOC).OrderByDescending(t => t.CG_ORDF).FirstOrDefault().CG_ORDF;
        //    graphics.DrawString($"        OF ALTA: {OrdenDeFabAlta}\r\n            {ordenFabricacion.CG_PROD}\r\n{ordenFabricacion.DES_PROD}\r\nCANTIDAD {ordenFabricacion.CANTFAB}    {ordenFabricacion.FE_CIERRE}", font, PdfBrushes.Black, new Syncfusion.Drawing.PointF(-200, 10));

        //    document1.PageSettings.Margins.All = 0;
        //    MemoryStream xx = new MemoryStream();
        //    document1.Save(xx);
        //    document1.Close(true);
        //    await JS.SaveAs("ETOF" + ordenFabricacion.CG_PROD.Trim() + ".pdf", xx.ToArray());
        //}


    }

    protected async Task Ensayos()
    {
        //NavigationManager.NavigateTo($"Pdf/{pedido}/ENSAYOS");
        //await JsRuntime.InvokeVoidAsync("open", new object[2] { $"Pdf/{TrzNro}/ENSAYOS", $"Pdf/{TrzNro}/ENSAYOS" });
        await JsRuntime.InvokeVoidAsync("open", new object[2] { $"pdf-ensayos/{TrzNro}/RUTAENSAYO", $"pdf-ensayos/{TrzNro}/RUTAENSAYO" });
    }
}
<style>
    @@font-face {
        font-family: 'Toast_icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    #toast_types button {
        margin: 5px;
        min-width: 160px;
        max-width: 160px;
    }

    .toast-icons {
        font-family: 'Toast_icons' !important;
        speak: none;
        font-size: 55px;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    #toast_type .e-toast-icon.e-icons {
        height: auto;
        font-size: 30px;
    }

    .toast-icons.e-success::before {
        content: "\e701";
    }

    .toast-icons.e-error::before {
        content: "\e700";
    }

    .toast-icons.e-info::before {
        content: "\e704";
    }

    .toast-icons.e-warning::before {
        content: "\e703";
    }

    #toast_types {
        text-align: center;
    }
</style>
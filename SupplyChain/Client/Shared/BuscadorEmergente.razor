@using Syncfusion.Blazor.Navigations 
@using Syncfusion.Blazor.Buttons
@typeparam TItem

<SfSpinner @bind-Visible="@visibliSpinner" Size="80" Target=".dialogContent" Label="Cargando..." Type="SpinnerType.Bootstrap"/>

<SfDialog Height="@Height" Width="95%" Target="#target" ShowCloseIcon="true" @bind-Visible="@Visible"
          IsModal="false" EnableResize="false">
    <DialogEvents Closed="OnAfterDialogClosed"></DialogEvents>
    <DialogTemplates>
        
        <Header>
            @Titulo
            <hr />
        </Header>
        <Content>
            
            <div class="dialogContent">
                @if (DataSource == null)
                {
                    visibliSpinner = true;
                }
                else
                {
                    visibliSpinner = false;

                    if (DataSource.Count() == 0)
                    {
                        <span class="text-muted">Sin Datos</span>
                    }
                    else
                    {

                        <div>
                            <SfButton Content="Ver +" CssClass="btn btn-info btn-sm" IconCss="fa fa-search" 
                                      IsPrimary="false" OnClick="@(async()=> await Buscar())" />
                        </div>
                        <div class="col-lg-12 control-section">
                            <div class="content-wrapper">
                                <div class="row">
                                    <SfGrid @ref="@Grid" DataSource="@DataSource" AllowPaging="false" AllowFiltering="true" TValue="TItem"
                                            AllowResizing="true" GridLines="GridLine.Both" RowHeight="20" Height="720px" AllowReordering="true"
                                            AllowSelection="true" AllowSorting="true" AllowTextWrap="true" EnableHover="true"
                                            ShowColumnMenu="true" EnableVirtualization="true" Toolbar="@Toolbaritems">
                                        @*<GridFilterSettings ShowFilterBarStatus="true" Type="Syncfusion.Blazor.Grids.FilterType.FilterBar"
                    Operators="@(new Operator[] { Operator.Contains })"
                    Mode="FilterBarMode.Immediate"></GridFilterSettings>*@
                                        @*<GridPageSettings PageCount="20" PageSize="20" PageSizes="false"></GridPageSettings>*@
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                        <GridEvents RowSelected="GetSelectedRecords" OnRecordDoubleClick="EnviarObjetoSeleccionado" TValue="TItem"></GridEvents>
                                        <GridColumns>
                                            @{
                                                object itemfinal = DataSource.FirstOrDefault();
                                                System.Reflection.PropertyInfo[] propiedades = itemfinal.GetType().GetProperties();

                                                foreach (string col in Columnas)
                                                {
                                                    if (propiedades.Any(p => p.Name.ToUpper() == col.ToUpper()))
                                                    {
                                                        var propiedad = propiedades.Where(p => p.Name == col.ToUpper()).FirstOrDefault();

                                                        //obtener el atributo para mostrar el nombre de columna
                                                        string nameColumn = propiedad.Name;
                                                        var tipoDate = propiedad.PropertyType == typeof(DateTime) ? propiedad.GetValue(itemfinal, null) : null;
                                                        var attr = propiedad.GetCustomAttributesData().FirstOrDefault(a => a.AttributeType.Name.Equals("ColumnaGridViewAtributo"));
                                                        nameColumn = attr?.NamedArguments.FirstOrDefault(a => a.MemberName.Equals("Name")).TypedValue.Value.ToString();
                                                        if (tipoDate != null)
                                                        {
                                                            <GridColumn Field="@propiedad.Name" HeaderText="@nameColumn" Type="ColumnType.Date"
                                                                        Format="dd/MM/yyyy" Width="120px"
                                                                        FilterSettings="@(new FilterSettings { Operator = Syncfusion.Blazor.Operator.Contains })">
                                                            </GridColumn>
                                                        }
                                                        else
                                                        {

                                                            if (col.ToUpper() == "DES_ART")
                                                            {
                                                                <GridColumn Field="@propiedad.Name" Width="220px"
                                                                            FilterSettings="@(new FilterSettings { Operator = Syncfusion.Blazor.Operator.Contains })"></GridColumn>
                                                            }
                                                            else
                                                            {

                                                                <GridColumn Field="@propiedad.Name" Width="150px"
                                                                            FilterSettings="@(new FilterSettings { Operator = Syncfusion.Blazor.Operator.Contains })"></GridColumn>
                                                            }
                                                        }

                                                    }
                                                }
                                            }

                                        </GridColumns>
                                    </SfGrid>
                                </div>
                            </div>
                            <div>
                                
                            </div>
                        </div>

                                    



                    }
                }
            </div>
</Content>
        <FooterTemplate>
            <button id="verButton" @onclick="@(async()=> await Buscar())" class="e-control e-btn e-info" data-ripple="true">Ver +</button>
            <button id="sendButton" @onclick="@EnviarObjetoSeleccionado" class="e-control e-btn e-info" data-ripple="true">Aceptar</button>
        </FooterTemplate>
    </DialogTemplates>
    @*<DialogEvents OnOpen="@BeforeDialogOpen" Closed="@DialogClosed"></DialogEvents>*@
</SfDialog>

@code {
    SfGrid<TItem> Grid;
    protected bool visibliSpinner = false;
    protected List<Object> Toolbaritems = new List<Object>(){
            "Search",
            new ItemModel(){ Type = ItemType.Separator},
            new ItemModel(){ Type = ItemType.Separator},
            "ExcelExport"
        };
    [Parameter] public string Titulo { get; set; } = null!;
    [Parameter] public string Height { get; set; } = null!;
    [Parameter] public bool Visible { get; set; } = false;
    [Parameter] public IEnumerable<TItem> DataSource { get; set; } = null!;
    [Parameter] public string[] Columnas { get; set; } = null!;
    [Parameter] public EventCallback<TItem> OnObjetoSeleccionado { get; set; }
    [Parameter] public EventCallback OnBuscarMas { get; set; }

    public TItem Selected { get; set; }

    //protected async override Task OnInitializedAsync()
    //{
    //    Visible = true;
    //    await InvokeAsync(StateHasChanged);
    //}

    public void EnviarObjetoSeleccionado()
    {
        Visible = false;
        OnObjetoSeleccionado.InvokeAsync(Selected);
    }


    public void GetSelectedRecords(RowSelectEventArgs<TItem> args)
    {
        args.PreventRender = true; //without this, you may see noticable delay in selection with 75 rows in grid.
                                   //var items = await this.Grid.GetSelectedRecords();
        Selected = args.Data;
        //TotalValue = SelectedRowIndexes.ToArray();
        //SelectedValue = "";
        //foreach (var data in TotalValue)
        //{
        //    SelectedValue = SelectedValue + " " + data;
        //}
    }


    private void OnAfterDialogClosed(object arg)
    {
        Visible = false;
    }

    public async Task ShowAsync()
    {
        Visible = true;
        await InvokeAsync(StateHasChanged);
    }

    public async Task HideAsync()
    {
        Visible = false;
        await InvokeAsync(StateHasChanged);
    }

    public async Task Buscar()
    {
        visibliSpinner = true;
        await OnBuscarMas.InvokeAsync();
        visibliSpinner = false;
    }
}

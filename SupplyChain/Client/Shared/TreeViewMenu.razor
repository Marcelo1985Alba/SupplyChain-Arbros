@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor
@using SupplyChain.Shared
@inject HttpClient Http

@if (!IsAdmin)
{
    <div id="treeview">
        <SfTreeView TValue="Modulo" ID="treeviewMenuManual" CssClass="custom" >
            <TreeViewFieldsSettings DataSource="dbMenu" Id="Id" Text="Descripcion" ParentID="ParentId" HasChildren="TieneChild"
                                    NavigateUrl="Url" IconCss="IconCss">
            </TreeViewFieldsSettings>
            <TreeViewEvents TValue="Modulo" NodeSelected="@(async(a)=> await NodeClicked(a))"></TreeViewEvents>
        </SfTreeView>
    </div>
}
else if(IsAdmin)
{
    <div class="control-wrapper">
        <div id="treeview">
            <SfTreeView TValue="Modulo" ID="treeviewMenuDB" CssClass="custom">
                <TreeViewFieldsSettings TValue="Modulo" Id="Id" Text="Descripcion" ParentID="ParentId" HasChildren="TieneChild"
                                        NavigateUrl="Url" IconCss="IconCss">
                    <SfDataManager Url="api/Modulo" Adaptor="Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                </TreeViewFieldsSettings>
                <TreeViewEvents TValue="Modulo" NodeSelected="@(async(a)=> await NodeClicked(a))"></TreeViewEvents>
            </SfTreeView>
        </div>

    </div>
}
else
{

}


@code{
    [CascadingParameter] public MainLayout Layout { get; set; }
    [CascadingParameter] public Task<AuthenticationState> authenticationState { get; set; }
    protected ExpandAction Expand = ExpandAction.Click;
    private AuthenticationState authState;
    protected bool IsAdmin = false;
    protected bool IsProd = false;
    protected List<Modulo> dbMenu = new List<Modulo>();
    protected async override Task OnInitializedAsync()
    {
        // To get the last item index from the db
        //var count = await Http.GetFromJsonAsync<int>("api/Modulo/index");
        //var index = count + 1;

        //Console.WriteLine("Count: " + count);

        authState = await authenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            IsAdmin = authState.User.Identities.Any(i => i.Claims.Any(c => c.Value == "Admin"));
            IsProd = authState.User.Identities.Any(i => i.Claims.Any(c => c.Value == "Produccion"));
        }

        if (!IsAdmin && IsProd)
        {
            dbMenu.Add(new Modulo { Id = 4, Descripcion = "PCP", IconCss = "icon-th icon", TieneChild = true });
            dbMenu.Add(new Modulo
            {
                Id = 7,
                Descripcion = "Carga de Máquina",
                IconCss = "",
                TieneChild = false,
                ParentId = 4,
                Url = "/cargamaquina"
            });
            dbMenu.Add(new Modulo { Id = 2, Descripcion = "VENTAS", IconCss = "icon-th icon", TieneChild = true });
            dbMenu.Add(new Modulo
            {
                Id = 8,
                Descripcion = "Logistica",
                IconCss = "",
                TieneChild = false,
                ParentId = 2,
                Url = "/logistica-listado"
            });
            dbMenu.Add(new Modulo
            {
                Id = 13,
                Descripcion = "Servicios",
                IconCss = "",
                TieneChild = false,
                ParentId = 2,
                Url = "/servicio/listado"
            });
            dbMenu.Add(new Modulo { Id = 5, Descripcion = "CONTROL DE CALIDAD", IconCss = "icon-th icon", TieneChild = true });
            dbMenu.Add(new Modulo
            {
                Id = 14,
                Descripcion = "Trazabilidad",
                IconCss = "",
                TieneChild = false,
                ParentId = 5,
                Url = "/trazabilidad"
            });
            dbMenu.Add(new Modulo { Id = 3, Descripcion = "INVENTARIOS", IconCss = "icon-th icon", TieneChild = true });
            dbMenu.Add(new Modulo
            {
                Id = 14,
                Descripcion = "Recepcion de Insumos",
                IconCss = "",
                TieneChild = false,
                ParentId = 3,
                Url = "/inventario/5"
            });
        }
    }
    protected async Task TestApi()
    {
        var modulos = await Http.GetFromJsonAsync<IEnumerable<Modulo>>("api/Modulo");
    }

    protected async Task NodeClicked(NodeSelectEventArgs args)
    {
        if (!string.IsNullOrEmpty(args.NodeData.ParentID))
        {
            var parentId = args.NodeData.ParentID;
            var modulo = await Http.GetFromJsonAsync<Modulo>($"api/Modulo/{parentId}");
            Layout.BreadCumParent = modulo.Descripcion;
            await InvokeAsync(StateHasChanged);
        }

    }

    //protected override void OnInitialized()
    //{
    //base.OnInitialized();
    //TODO: CARGAR MENU DESDE BASE DE DATOS
    //dbMenu.Add(new TreeData { nodeId = 1, nodeText = "Home", iconCss = "icon-microchip icon", url = "/index" });
    //dbMenu.Add(new TreeData { nodeId = 2, nodeText = "ADMINISTRACION", iconCss = "icon-thumbs-up-alt icon", hasChild = true });
    //dbMenu.Add(new TreeData { nodeId = 3, nodeText = "Quick Start", iconCss = "icon-docs icon" });
    //dbMenu.Add(new TreeData { nodeId = 4, nodeText = "PCP", iconCss = "icon-th icon", hasChild = true });
    //dbMenu.Add(new TreeData { nodeId = 5, nodeText = "Pronóstico de ventas", iconCss = "icon-thumbs-up-alt icon", pid = "04" });
    //dbMenu.Add(new TreeData { nodeId = 6, nodeText = "Carga de Máquina", iconCss = "icon-circle-thin icon", pid = "04", url = "/CargaMaquina" });
    //dbMenu.Add(new TreeData { nodeId = 7, nodeText = "Pedidos de clientes", iconCss = "icon-circle-thin icon", pid = "04" });
    //dbMenu.Add(new TreeData { nodeId = 8, nodeText = "PCP", iconCss = "icon-circle-thin icon", pid = "04", url = "/pcp" });
    //dbMenu.Add(new TreeData { nodeId = 9, nodeText = "Recepcion de Insumos", iconCss = "icon-circle-thin icon", pid = "04", url="/" });
    //dbMenu.Add(new TreeData { nodeId = 10, nodeText = "SideBar", iconCss = "icon-circle-thin icon", pid = "04" });
    //dbMenu.Add(new TreeData { nodeId = 11, nodeText = "API Reference", iconCss = "icon-code icon", hasChild = true });
    //dbMenu.Add(new TreeData { nodeId = "05-01", nodeText = "Calendar", iconCss = "icon-circle-thin icon", pid = "05" });
    //dbMenu.Add(new TreeData { nodeId = "05-02", nodeText = "DatePicker", iconCss = "icon-circle-thin icon", pid = "05" });
    //dbMenu.Add(new TreeData { nodeId = "05-03", nodeText = "DateTimePicker", iconCss = "icon-circle-thin icon", pid = "05" });
    //dbMenu.Add(new TreeData { nodeId = "05-04", nodeText = "DateRangePicker", iconCss = "icon-circle-thin icon", pid = "05" });
    //dbMenu.Add(new TreeData { nodeId = "05-05", nodeText = "TimePicker", iconCss = "icon-circle-thin icon", pid = "05" });
    //dbMenu.Add(new TreeData { nodeId = "05-06", nodeText = "SideBar", iconCss = "icon-circle-thin icon", pid = "05" });
    //dbMenu.Add(new TreeData { nodeId = "06", nodeText = "Browser Compatibility", iconCss = "icon-chrome icon" });
    //dbMenu.Add(new TreeData { nodeId = "07", nodeText = "Upgrade Packages", iconCss = "icon-up-hand icon" });
    //dbMenu.Add(new TreeData { nodeId = "08", nodeText = "Release Notes", iconCss = "icon-bookmark-empty icon" });
    //dbMenu.Add(new TreeData { nodeId = "09", nodeText = "FAQ", iconCss = "icon-help-circled icon" });
    //dbMenu.Add(new TreeData { nodeId = "10", nodeText = "License", iconCss = "icon-doc-text icon" });

    @*}*@
}

<style>
    /*To apply border and background color for treeview*/
    /*#treeview {
        max-width: 400px;
        margin: auto;
        border: 1px solid #dddddd;
        border-radius: 3px;*/
        /*background: #1c86c8;*/
        /*background: #000000;
    }*/


    /* customize icon styles */
    .e-treeview.custom-tree .e-list-icon {
        font-family: 'fontello';
        font-size: 20px;
        margin-top: -4px;
        color: white;
    }
    /* icon styles */
    .custom .e-list-item .e-icons {
        font-family: "Customize-icon";
    }

    @@font-face {
        font-family: 'Customize-icon';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj0gSRcAAAEoAAAAVmNtYXDnEOdaAAABjAAAADhnbHlmcYqIngAAAcwAAAD8aGVhZBWT124AAADQAAAANmhoZWEHmANtAAAArAAAACRobXR4C9AAAAAAAYAAAAAMbG9jYQBAAH4AAAHEAAAACG1heHABEAAxAAABCAAAACBuYW1l/qscPAAAAsgAAAJ5cG9zdIPGFvoAAAVEAAAAVgABAAADUv9qAFoEAAAA//8D6QABAAAAAAAAAAAAAAAAAAAAAwABAAAAAQAAIKcGUl8PPPUACwPoAAAAANlGSVAAAAAA2UZJUAAAAAAD6QPpAAAACAACAAAAAAAAAAEAAAADACUAAwAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQPwAZAABQAAAnoCvAAAAIwCegK8AAAB4AAxAQIAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAQNS/2oAWgPpAJYAAAABAAAAAAAABAAAAAPoAAAD6AAAAAAAAgAAAAMAAAAUAAMAAQAAABQABAAkAAAABAAEAAEAAOcB//8AAOcA//8AAAABAAQAAAABAAIAAAAAAEAAfgADAAAAAAPpA+kACAAWACQAAAEhFSEHMzcnIyUWEAcGICcmEDc+ATIWBQYQFxYgNzYQJy4BIgYCMf6kAWqUqMK8rgF+goKK/qCEfn5Coquf/amRkZoBkpqRkUq3xLcCKmSTybt4if6ghYKChQFgiUJBQRma/m6akZGaAZKaSElJAAMAAAAAA+gD6QAGABQAIgAAASMXNyMRIyUWEAcGICcmEDc+ATIWBQYQFxYgNzYQJy4BIgYBvrLp6JmGAW6BgYf+oYiBgUGhqqH9qZOTmgGOmpOTSrbCtgGy6ekBbwuI/qGHgYGIAV6IQEFBFpr+cZmTk5oBj5lKSUkAAAAAABIA3gABAAAAAAAAAAEAAAABAAAAAAABAA4AAQABAAAAAAACAAcADwABAAAAAAADAA4AFgABAAAAAAAEAA4AJAABAAAAAAAFAAsAMgABAAAAAAAGAA4APQABAAAAAAAKACwASwABAAAAAAALABIAdwADAAEECQAAAAIAiQADAAEECQABABwAiwADAAEECQACAA4ApwADAAEECQADABwAtQADAAEECQAEABwA0QADAAEECQAFABYA7QADAAEECQAGABwBAwADAAEECQAKAFgBHwADAAEECQALACQBdyBDdXN0b21pemUtaWNvblJlZ3VsYXJDdXN0b21pemUtaWNvbkN1c3RvbWl6ZS1pY29uVmVyc2lvbiAxLjBDdXN0b21pemUtaWNvbkZvbnQgZ2VuZXJhdGVkIHVzaW5nIFN5bmNmdXNpb24gTWV0cm8gU3R1ZGlvd3d3LnN5bmNmdXNpb24uY29tACAAQwB1AHMAdABvAG0AaQB6AGUALQBpAGMAbwBuAFIAZQBnAHUAbABhAHIAQwB1AHMAdABvAG0AaQB6AGUALQBpAGMAbwBuAEMAdQBzAHQAbwBtAGkAegBlAC0AaQBjAG8AbgBWAGUAcgBzAGkAbwBuACAAMQAuADAAQwB1AHMAdABvAG0AaQB6AGUALQBpAGMAbwBuAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAHUAcwBpAG4AZwAgAFMAeQBuAGMAZgB1AHMAaQBvAG4AIABNAGUAdAByAG8AIABTAHQAdQBkAGkAbwB3AHcAdwAuAHMAeQBuAGMAZgB1AHMAaQBvAG4ALgBjAG8AbQAAAAACAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBAgEDAQQAFy1hcnJvdy1jaXJjbGUtcmlnaHQtXzAxEi1hcnJvdy1jaXJjbGUtZG93bgAAAAA=) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .e-treeview .e-list-item {
       border-bottom: 1px #e5e5e58a solid;
    }

    .custom.e-treeview .e-list-item .e-icon-expandable::before, .custom.e-treeview .e-list-item .e-icon-collapsible:before {
        content: '\e700';
        font-size: 16px;
        color: #687384 !important;
    }
    e-treeview .e-text-content {
        padding: 0 0 0 8px;
    }
    e-treeview .e-text-content, .e-treeview .e-fullrow {
        border-color: transparent;
        color: white;
        padding: 0 0 0 8px;
    }

    .e-treeview .e-list-item.e-hover > .e-fullrow {
        font-size: 14px;
        background-color: transparent !important;
        border-color: transparent !important;
    }


    .e-treeview .e-list-item.e-active > .e-fullrow {
        color: #ffffff !important;
        background-color: transparent !important;
        border-color: transparent !important;
        font-weight: 500 !important;
    }

    .custom.e-treeview .e-list-text {
        font-size:14px;
        color: #687384 !important;
    }

    .custom.e-treeview .e-list-item.e-active > .e-text-content > .e-list-text {
        color: #ffffff !important;
    }

    .custom.e-treeview .e-list-item.e-hover > .e-text-content > .e-list-text {
        color: #ffffff !important;
    }

        /*To float the expand/collapse icon right*/
        /*    .e-treeview.custom-tree .e-icon-collapsible, .e-treeview .e-icon-expandable {
        float: right;
    }*/
        /*To customize the expand collapse icon color*/
        .e-treeview.custom-tree .e-icon-collapsible::before, .e-treeview.custom-tree .e-icon-expandable::before {
            color: white;
        }

    /*To change the text color for treeview*/
/*    .e-treeview .e-text-content > .e-list-text {
        color: white;
    }*/

    .e-treeview .e-list-icon, .e-treeview .e-list-img {
        display: inline-block;
        height: 18px;
        margin: 0 0 0 -40px !important;
        vertical-align: middle;
        width: 18px;
    }

    
</style>
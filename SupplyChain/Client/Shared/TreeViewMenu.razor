@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor
@using SupplyChain.Shared
@inject HttpClient Http

@if (!IsAdmin)
{
<div id="treeview">
    <SfTreeView TValue="Modulo" ID="treeviewMenuManual" CssClass="custom-tree" AllowTextWrap="true">
        <TreeViewFieldsSettings DataSource="dbMenu" Id="Id" Text="Descripcion" ParentID="ParentId" HasChildren="TieneChild"
                                NavigateUrl="Url" IconCss="IconCss">
        </TreeViewFieldsSettings>
        <TreeViewEvents TValue="Modulo" NodeSelected="@(async(a)=> await NodeClicked(a))"></TreeViewEvents>
    </SfTreeView>
</div>
}
else
{
    <div class="control-wrapper">
        <div id="treeview">
            <SfTreeView TValue="Modulo" ID="treeviewMenuDB" CssClass="custom-tree">
                <TreeViewFieldsSettings DataSource="dbMenu" TValue="Modulo" Id="Id" Text="Descripcion" 
                                        ParentID="ParentId" HasChildren="TieneChild"
                                        NavigateUrl="Url" IconCss="IconCss">
                </TreeViewFieldsSettings>
                <TreeViewEvents TValue="Modulo" NodeSelected="@(async(a)=> await NodeClicked(a))"></TreeViewEvents>
            </SfTreeView>
        </div>

    </div>
}


@code{
    [CascadingParameter] public MainLayout Layout { get; set; }
    [CascadingParameter] public Task<AuthenticationState> authenticationState { get; set; }
    private AuthenticationState authState;
    protected ExpandAction Expand = ExpandAction.Click;
    protected bool IsAdmin = false;
    protected bool IsVentas = false;
    protected bool IsProd = false;
    protected bool IsIngenieria = false;
    protected bool IsCompras = false;
    protected List<Modulo> dbMenu = new List<Modulo>();
    protected List<Modulo> dbMenuMaster = new List<Modulo>();
    [Parameter] public EventCallback<bool> OnChangeToggle { get; set; }

    protected async override Task OnInitializedAsync()
    {
        // To get the last item index from the db

        await GetMenu();

    }
    protected async Task GetMenu()
    {

        authState = await authenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            IsAdmin = authState.User.Identities.Any(i => i.Claims.Any(c => c.Value == "Administrador"));
            IsProd = authState.User.Identities.Any(i => i.Claims.Any(c => c.Value == "Produccion"));
            IsVentas = authState.User.Identities.Any(i => i.Claims.Any(c => c.Value == "Ventas"));
            IsIngenieria = authState.User.Identities.Any(i => i.Claims.Any(c => c.Value == "Ingenieria"));
            IsCompras = authState.User.Identities.Any(i => i.Claims.Any(c => c.Value == "Compras"));
            dbMenuMaster = await Http.GetFromJsonAsync<List<Modulo>>("api/Modulo");

            if (IsVentas)
            {
                dbMenu.Add(new Modulo
                {
                    Id = 2000,
                    ParentId = 2,
                    Descripcion = "Usuarios",
                    IconCss = "",
                    TieneChild = false,
                    Url = "/ventas/usuarios"
                });
            }



            if (authState.User.Claims.Any(c=> c.Value == "Cliente"))
            {
                dbMenu.Clear();
                dbMenu.Add(new Modulo { Id = 2, Descripcion = "VENTAS", IconCss = "icon-th icon", TieneChild = true });
                dbMenu.Add(new Modulo { Id = 3, ParentId = 2, Descripcion = "Estado de Pedidos", Url = "/ventas/estado-pedidos",
                    IconCss = "icon-th icon", TieneChild = false });
            }
            if (IsProd)
            {
                dbMenu.AddRange( dbMenuMaster.Where(m => (m.Id == 2 || m.Id == 8 || m.Id == 13) //Ventas: Logistica y servicios
                        ||
                        (m.Id == 3 || m.ParentId == 3 || m.ParentId == 19) //Inventarios
                        ||
                        (m.Id == 4 || m.ParentId == 4 || m.Id == 18 || m.ParentId == 18) //PCP: carga de 
                        ||
                        (m.Id == 5 || m.Id == 14 || m.Id == 16) //Control Calidad: trazabilidad
                        ||
                        (m.Id == 25 || m.ParentId == 25) //Ingenieria
                        ||
                        (m.Id == 40  ) //Mnat celdas
                    ).ToList());

                if (authState.User.Identity.Name.ToLower() == "planta")
                {
                    int[] exclusiones = new int[] { 2, 18, 25, 40 }; //quito los menus
                    dbMenu = dbMenu.Where(m => !exclusiones.Contains(m.Id)).ToList();
                }

            }
            if (IsVentas)
            {
                dbMenu.AddRange( dbMenuMaster.Where(m => (m.Id == 2 || m.ParentId == 2) //Ventas: Logistica y servicios
                                                                          //||
                                                                          //(m.Id == 3 || m.ParentId == 3 || m.ParentId == 19) //Inventarios
                                                                          //||
                                                                          //(m.Id == 4 || m.ParentId == 4 || m.Id == 18 || m.ParentId == 18) //PCP: carga de 
                                                                          //||
                                                                          //(m.Id == 5 || m.Id == 14 || m.Id == 16) //Control Calidad: trazabilidad
                                                                          //||
                                                                          //(m.Id == 25 || m.ParentId == 25) //Ingenieria
                                                                          //||
                                                                          //(m.Id == 40) //Mnat celdas
                    ).ToList());

                if (authState.User.Identity.Name.ToLower() == "planta")
                {
                    int[] exclusiones = new int[] { 2, 18, 25, 40 }; //quito los menus
                    dbMenu = dbMenu.Where(m => !exclusiones.Contains(m.Id)).ToList();
                }

            }
            if (IsIngenieria)
            {
                dbMenu.AddRange( dbMenuMaster.Where(m => (m.Id == 25 || m.ParentId == 25) //Ventas: Logistica y servicios
                                                                            //||
                                                                            //(m.Id == 3 || m.ParentId == 3 || m.ParentId == 19) //Inventarios
                                                                            //||
                                                                            //(m.Id == 4 || m.ParentId == 4 || m.Id == 18 || m.ParentId == 18) //PCP: carga de 
                                                                            //||
                                                                            //(m.Id == 5 || m.Id == 14 || m.Id == 16) //Control Calidad: trazabilidad
                                                                            //||
                                                                            //(m.Id == 25 || m.ParentId == 25) //Ingenieria
                                                                            //||
                                                                            //(m.Id == 40) //Mnat celdas
                    ).ToList());
            }
            if (IsCompras)
            {
                dbMenu.AddRange( dbMenuMaster.Where(m => (m.Id == 45 || m.ParentId == 45) //Ventas: Logistica y servicios
                                                                            //||
                                                                            //(m.Id == 3 || m.ParentId == 3 || m.ParentId == 19) //Inventarios
                                                                            //||
                                                                            //(m.Id == 4 || m.ParentId == 4 || m.Id == 18 || m.ParentId == 18) //PCP: carga de 
                                                                            //||
                                                                            //(m.Id == 5 || m.Id == 14 || m.Id == 16) //Control Calidad: trazabilidad
                                                                            //||
                                                                            //(m.Id == 25 || m.ParentId == 25) //Ingenieria
                                                                            //||
                                                                            //(m.Id == 40) //Mnat celdas
                    ).ToList());
            }
            else
            {
                if (authState.User.Identity.Name.ToUpper() == "MONICA")
                {
                    dbMenu = dbMenuMaster.ToList();
                    var maxId = dbMenu.Max(m => m.Id) + 1;
                    dbMenu.Add(new Modulo { Id = maxId, Descripcion = "Panel de Control", IconCss = "fa fa-tachometer",
                        TieneChild = false, Url= "/panel-control/index" }
                    );

                }
            }
        }


    }

    protected async Task NodeClicked(NodeSelectEventArgs args)
    {
        if (!string.IsNullOrEmpty(args.NodeData.ParentID))
        {
            var parentId = args.NodeData.ParentID;
            var modulo = await Http.GetFromJsonAsync<Modulo>($"api/Modulo/{parentId}");
            //var moduloParent = await Http.GetFromJsonAsync<Modulo>($"api/Modulo/{parentId}");
            Layout.BreadCumParent = modulo.Descripcion;
            await OnChangeToggle.InvokeAsync(false);

            //await InvokeAsync(StateHasChanged);
        }

    }

    //protected override void OnInitialized()
    //{
    //base.OnInitialized();
    //TODO: CARGAR MENU DESDE BASE DE DATOS
    //dbMenu.Add(new TreeData { nodeId = 1, nodeText = "Home", iconCss = "icon-microchip icon", url = "/index" });
    //dbMenu.Add(new TreeData { nodeId = 2, nodeText = "ADMINISTRACION", iconCss = "icon-thumbs-up-alt icon", hasChild = true });
    //dbMenu.Add(new TreeData { nodeId = 3, nodeText = "Quick Start", iconCss = "icon-docs icon" });
    //dbMenu.Add(new TreeData { nodeId = 4, nodeText = "PCP", iconCss = "icon-th icon", hasChild = true });
    //dbMenu.Add(new TreeData { nodeId = 5, nodeText = "Pronóstico de ventas", iconCss = "icon-thumbs-up-alt icon", pid = "04" });
    //dbMenu.Add(new TreeData { nodeId = 6, nodeText = "Carga de Máquina", iconCss = "icon-circle-thin icon", pid = "04", url = "/CargaMaquina" });
    //dbMenu.Add(new TreeData { nodeId = 7, nodeText = "Pedidos de clientes", iconCss = "icon-circle-thin icon", pid = "04" });
    //dbMenu.Add(new TreeData { nodeId = 8, nodeText = "PCP", iconCss = "icon-circle-thin icon", pid = "04", url = "/pcp" });
    //dbMenu.Add(new TreeData { nodeId = 9, nodeText = "Recepcion de Insumos", iconCss = "icon-circle-thin icon", pid = "04", url="/" });
    //dbMenu.Add(new TreeData { nodeId = 10, nodeText = "SideBar", iconCss = "icon-circle-thin icon", pid = "04" });
    //dbMenu.Add(new TreeData { nodeId = 11, nodeText = "API Reference", iconCss = "icon-code icon", hasChild = true });
    //dbMenu.Add(new TreeData { nodeId = "05-01", nodeText = "Calendar", iconCss = "icon-circle-thin icon", pid = "05" });
    //dbMenu.Add(new TreeData { nodeId = "05-02", nodeText = "DatePicker", iconCss = "icon-circle-thin icon", pid = "05" });
    //dbMenu.Add(new TreeData { nodeId = "05-03", nodeText = "DateTimePicker", iconCss = "icon-circle-thin icon", pid = "05" });
    //dbMenu.Add(new TreeData { nodeId = "05-04", nodeText = "DateRangePicker", iconCss = "icon-circle-thin icon", pid = "05" });
    //dbMenu.Add(new TreeData { nodeId = "05-05", nodeText = "TimePicker", iconCss = "icon-circle-thin icon", pid = "05" });
    //dbMenu.Add(new TreeData { nodeId = "05-06", nodeText = "SideBar", iconCss = "icon-circle-thin icon", pid = "05" });
    //dbMenu.Add(new TreeData { nodeId = "06", nodeText = "Browser Compatibility", iconCss = "icon-chrome icon" });
    //dbMenu.Add(new TreeData { nodeId = "07", nodeText = "Upgrade Packages", iconCss = "icon-up-hand icon" });
    //dbMenu.Add(new TreeData { nodeId = "08", nodeText = "Release Notes", iconCss = "icon-bookmark-empty icon" });
    //dbMenu.Add(new TreeData { nodeId = "09", nodeText = "FAQ", iconCss = "icon-help-circled icon" });
    //dbMenu.Add(new TreeData { nodeId = "10", nodeText = "License", iconCss = "icon-doc-text icon" });

    @*}*@
}

<style>
    /*To apply border and background color for treeview*/
    /*#treeview {
        max-width: 400px;
        margin: auto;
        border: 1px solid #dddddd;
        border-radius: 3px;*/
        /*background: #1c86c8;*/
        /*background: #000000;
    }*/


    /* customize icon style: son los de FontAwesome v4.7 */
    .e-treeview.custom-tree .e-list-icon {
        font-family: 'FontAwesome';
        font-size: 20px;
        margin-top: -4px;
        color: white;
    }

    /* icon styles */

/*   @@font-face {
      font-family: 'FontAwesome';
      src: url('../fonts/fontawesome-webfont.eot?v=4.7.0');
      src: url('../fonts/fontawesome-webfont.eot?#iefix&v=4.7.0') format('embedded-opentype'), url('../fonts/fontawesome-webfont.woff2?v=4.7.0') format('woff2'), url('../fonts/fontawesome-webfont.woff?v=4.7.0') format('woff'), url('../fonts/fontawesome-webfont.ttf?v=4.7.0') format('truetype'), url('../fonts/fontawesome-webfont.svg?v=4.7.0#fontawesomeregular') format('svg');
      font-weight: normal;
      font-style: normal;
    }*/

    

    /*To float the expand/collapse icon right*/
    .e-treeview.custom-tree .e-icon-collapsible, .e-treeview .e-icon-expandable {
        float: right;
    }
        /*To customize the expand collapse icon color*/
        .e-treeview.custom-tree .e-icon-collapsible::before, .e-treeview.custom-tree .e-icon-expandable::before {
            color: white;
        }

    /*To change the text color for treeview*/
    .e-treeview .e-text-content > .e-list-text {
        color: white;
    }



    .e-treeview .e-list-item {
       /*border-bottom: 1px #e5e5e58a solid;*/
    }

    /*To float the expand/collapse icon right*/
    .e-treeview.custom-tree .e-icon-collapsible, .e-treeview .e-icon-expandable {
        float: right;
    }
    .e-treeview .e-list-item .e-icon-expandable::before, e-treeview .e-list-item .e-icon-collapsible:before {
        content: '\e700';
        font-size: 12px;
        color: white !important;
    }
    .e-treeview .e-text-content {
        padding: 0 45px 0 0 !important;
    }


    .e-treeview .e-text-content, .e-treeview .e-fullrow {
        border-color: transparent;
        color: white;
        padding: 0 0 0 8px;
    }

    .e-treeview .e-list-item.e-hover > .e-fullrow {
        font-size: 14px;
        background-color: transparent !important;
        border-color: transparent !important;
    }


    /*.e-treeview .e-list-item.e-active {
        background: white;
        border-top-left-radius: 7px;
        border-top-right-radius: 5px;
        border-bottom-right-radius: 5px;
        border-bottom-left-radius: 7px;
    }*/

    .e-treeview .e-list-item.e-active > .e-fullrow {
        color: #ffffff !important;
        background-color: transparent !important;
        border-color: transparent !important;
        font-weight: 500 !important;
    }

    .e-treeview .e-list-text {
        font-size: 14px;
        color: #fafafa !important;
    }

    .e-treeview .e-list-item.e-active > .e-text-content > .e-list-text {
        color: #fafafa !important;
        
    }

/*    .e-treeview .e-list-item.e-hover > .e-text-content > .e-list-text {
        color: #ffffff !important;
    }
*/
    /*To customize the expand collapse icon color*/
    .e-treeview .e-icon-collapsible::before, .e-treeview .e-icon-expandable::before {
        color: white;
        float:right;
    }

    /*To customize for level*/
    .custom-tree .e-level-2 > .e-text-content .e-list-text {
        /*font-style: italic;*/
        font-size: 12px;
        padding-left: 0px !important;
    }

/*    .custom-tree .e-level-2 > .e-list-item.e-active > .e-text-content > .e-list-text {
        color: #333 !important;
    }
*/
    .custom-tree .e-level-2 >.e-list-item.e-active {
        background: white;
        border-top-left-radius: 7px;
        border-top-right-radius: 5px;
        border-bottom-right-radius: 5px;
        border-bottom-left-radius: 7px;
    }


    .e-treeview .e-list-icon, .e-treeview .e-list-img {
        display: inline-block;
        height: 20px;
        margin: 0 0 0 4px !important;
        vertical-align: middle;
        width: 18px;
    }


</style>
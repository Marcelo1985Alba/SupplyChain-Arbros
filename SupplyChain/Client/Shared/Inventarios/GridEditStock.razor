@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.DataAnnotations.Schema;
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Text.Json
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations

@if (DataSource == null)
{

}
else
{
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                <SfGrid @ref="@Grid" DataSource="@DataSource" AllowExcelExport="true" AllowPaging="true" ID="gridEditStock"
                        GridLines="GridLine.Both" Locale="es-Ar" Height="100%" Width="100%"
                        AllowResizing="true" AllowSelection="true" AllowSorting="true" AllowTextWrap="false"
                        AllowReordering="true" RowHeight="20">
                    @*<GridPageSettings PageCount="4" PageSize="4"></GridPageSettings>*@
                    <GridEvents OnActionBegin="@(async(p)=> await OnActionBeginHandler(p))" 
                                CommandClicked="@(async (p)=> await CommandClickHandler(p))"
                                OnBeginEdit="@(async (ped)=> await BeginEditHandler(ped))" 
                                QueryCellInfo="@(async(e)=> await QueryCellInfoHandler(e))"
                                OnActionComplete="OnActionComplete" OnToolbarClick="ClickHandler"
                                TValue="Pedidos"></GridEvents>
                    <GridEditSettings AllowAdding="PermiteAgregar" AllowEditing="PermiteEditar" AllowDeleting="PermiteEliminar"
                                      Mode="EditMode.Dialog">

                        <HeaderTemplate>
                            <span class="text-active">Detalle de Producto</span>
                            <hr />
                        </HeaderTemplate>
                        <Template>
                            @{

                                stock = (context as Pedidos);
                                <div id="dialogo">

                                    <div class="form-row">
                                        <div class="form-group col-md-2">
                                            <label class="col-form-label">Codigo Producto</label>
                                            <SfTextBox @bind-Value="@stock.CG_ART" Readonly="true"></SfTextBox>
                                            <ValidationMessage For="@(() => stock.CG_ART)"></ValidationMessage>
                                        </div>
                                        <div class="form-group col-md-4">
                                            <label class="col-form-label">Descripcion Producto</label>
                                            <SfTextBox @bind-Value="@stock.DES_ART" Readonly="true"></SfTextBox>
                                            <ValidationMessage For="@(() => stock.DES_ART)"></ValidationMessage>
                                        </div>

                                        <div class="form-group col-md-1 mt-4">
                                            <SfButton HtmlAttributes="@HtmlAttribute" OnClick="@(async ()=> await BuscarItem())"
                                                        Disabled="@(stock.CG_ART != "")"
                                                        Content="" IconCss="fa fa-search" />
                                        </div>
                                        <div class="form-group col-md-5">
                                            <label class="col-form-label">Déposito Ingreso</label>
                                            <SfDropDownList TItem="Deposito" @bind-Value="@stock.CG_DEP"
                                                            TValue="int" ID="CG_DEP" DataSource="@depositos">
                                                <DropDownListFieldSettings Text="DES_DEP" Value="CG_DEP">

                                                </DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-2">
                                            <label class="col-form-label">Cantidad</label>
                                            <SfNumericTextBox @bind-Value="@stock.STOCK" Decimals="2"></SfNumericTextBox>
                                            <ValidationMessage For="@(() => stock.STOCK)"></ValidationMessage>
                                        </div>
                                        <div class="form-group col-md-1">
                                            <label class="col-form-label">Unidad</label>
                                            <SfTextBox @bind-Value="@stock.UNID" Readonly="true"></SfTextBox>
                                            <ValidationMessage For="@(() => stock.UNID)"></ValidationMessage>
                                        </div>
                                        @if (RegistroGenerado.TIPOO != 5)
                                        {
                                            <div class="form-group col-md-2">
                                                <label class="col-form-label">Serie</label>
                                                <SfTextBox @bind-Value="@stock.SERIE"></SfTextBox>
                                                <ValidationMessage For="@(() => stock.SERIE)"></ValidationMessage>
                                            </div>
                                        }
                                        @if (RegistroGenerado.TIPOO == 5)
                                        {
                                            <div class="form-group col-md-2">
                                                <label class="col-form-label">Depacho</label>
                                                <SfTextBox @bind-Value="@stock.DESPACHO"></SfTextBox>
                                                <ValidationMessage For="@(() => stock.DESPACHO)"></ValidationMessage>
                                            </div>
                                        }

                                        @if (RegistroGenerado.TIPOO == 5)
                                        {
                                            <div class="form-group col-md-2">
                                                <label class="col-form-label">Lote</label>
                                                <SfTextBox @bind-Value="@stock.LOTE"></SfTextBox>
                                                <ValidationMessage For="@(() => stock.LOTE)"></ValidationMessage>
                                            </div>
                                        }

                                        @if (RegistroGenerado.TIPOO == 5)
                                        {
                                            <div class="form-group col-md-2 mt-5">
                                                <Syncfusion.Blazor.Buttons.SfCheckBox Label="Cierra Item en OC"
                                                                                        @bind-Checked="@stock.CERRAROC" />
                                            </div>
                                        }

                                    </div>

                                    @if (RegistroGenerado.TIPOO == 5)
                                    {
                                        <div class="form-row">
                                            <div class="form-group col-md-2 mt-5">
                                                <Syncfusion.Blazor.Buttons.SfCheckBox Label="Dimension"
                                                                                        @bind-Checked="@stock.Control1" />
                                            </div>
                                            <div class="form-group col-md-2 mt-5">
                                                <Syncfusion.Blazor.Buttons.SfCheckBox Label="Identificacion"
                                                                                        @bind-Checked="@stock.Control2" />
                                            </div>
                                            <div class="form-group col-md-2 mt-5">
                                                <Syncfusion.Blazor.Buttons.SfCheckBox Label="Ensayo Fisico"
                                                                                        @bind-Checked="@stock.Control3" />
                                            </div>
                                            <div class="form-group col-md-2 mt-5">
                                                <Syncfusion.Blazor.Buttons.SfCheckBox Label="Ensayo Quimico"
                                                                                        @bind-Checked="@stock.Control4" />
                                            </div>
                                            <div class="form-group col-md-2 mt-5">
                                                <Syncfusion.Blazor.Buttons.SfCheckBox Label="T. T."
                                                                                        @bind-Checked="@stock.Control5" />
                                            </div>
                                            <div class="form-group col-md-2 mt-5">
                                                <Syncfusion.Blazor.Buttons.SfCheckBox Label="Control Visual"
                                                                                        @bind-Checked="@stock.Control6" />
                                            </div>
                                        </div>
                                    }

                                </div>


                            }
                        </Template>
                    </GridEditSettings>

                    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                    <GridColumns>
                        <GridColumn HeaderText="" Width="190">
                            <GridCommandColumns><GridCommandColumn Type="CommandButtonType.None" Title="Especificacion"
                                                       ButtonOption="@(new CommandButtonOptions() {
                                                                       IconCss = "fa fa-file-pdf-o",
                                                                       CssClass = "e-flat" })"></GridCommandColumn>

                                    <GridCommandColumn Type="CommandButtonType.None" Title="Copiar"
                                                       ButtonOption="@(new CommandButtonOptions() {
                                                                       IconCss = "e-icons e-copy",
                                                                       CssClass = "e-flat" })"></GridCommandColumn>

                                <GridCommandColumn Type="CommandButtonType.Edit"
                                                   ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Delete"
                                                   ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Save"
                                                   ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-flat" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Cancel"
                                                   ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon", CssClass = "e-flat" })"></GridCommandColumn>
                            </GridCommandColumns>
                        </GridColumn>
                        <GridColumn Field="@nameof(Pedidos.CG_ART)" HeaderText="Cod. Producto" AutoFit="true" Width="130"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.DES_ART)" HeaderText="Desc. Producto" Width="180"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.STOCK)" HeaderText="Cantidad" EditType="EditType.NumericEdit" Format="N2" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.UNID)" HeaderText="Unidad" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.CERRAROC)" HeaderText="Cierra OC" DisplayAsCheckBox="true"
                                    AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.DESPACHO)" HeaderText="Despacho" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.SERIE)" HeaderText="Serie" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.LOTE)" HeaderText="Lote" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.CG_DEP)" HeaderText="Deposito" AutoFit="true">
                            <Template>
                                @{
                                    var ped = (context as Pedidos);
                                    if (depositos.Any(c => c.CG_DEP == ped.CG_DEP))
                                    {
                                        <span>@depositos.Where(c => c.CG_DEP == ped.CG_DEP).FirstOrDefault().DES_DEP.Trim()</span>

                                    }
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field="@nameof(Pedidos.PENDIENTEOC)" HeaderText="Pendiente"AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.STOCKA)" HeaderText="Cant Comer" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.UNIDA)" HeaderText="Unid Comer" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.IMPORTE1)" HeaderText="Precio Unit." AutoFit="true"></GridColumn>



                        <GridColumn Field="@nameof(Pedidos.REGISTRO)" IsPrimaryKey="true" Visible="false"></GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>





    <BuscadorEmergente TItem="Pedidos" @ref="BuscadorProducto" Titulo=@tituloBuscador
        DataSource="@DataSource" Columnas="@(new string[] { "CG_ART", "DES_ART"})" Height="85%"
                       OnObjetoSeleccionado="@(async(p)=> await OnSelectedItem(p))"  />

 
        <ConfirmacionDialog @ref="@ConfirmacionDialog" OnConfirm="@(async()=> await ConfirmacionCopy())">
            <HeaderTempalte>
                <p class="text-primary">Copiar Insumo @stockCopiado?.CG_ART</p>
            </HeaderTempalte>
            <ContentTemplate>
                <p>Desea Copiar el insumo @stockCopiado?.DES_ART.Trim()</p>
            </ContentTemplate>
        </ConfirmacionDialog>

}

@code {
    [Inject] public IJSRuntime JsRuntime { get; set; }
    protected ConfirmacionDialog ConfirmacionDialog;
    protected BuscadorEmergente<Pedidos> BuscadorProducto;
    protected Pedidos stock;
    protected Pedidos stockCopiado;
    protected bool confirmaCopy = false;
    Producto[] DataSourceProductos;
    [Parameter] public string Titulo { get; set; } = null!;
    [Parameter] public List<Pedidos> DataSource { get; set; } = null!;
    [Parameter] public bool PermiteAgregar { get; set; } = false;
    [Parameter] public bool PermiteEditar { get; set; } = false;
    [Parameter] public bool PermiteEliminar { get; set; } = false;
    [Parameter] public EventCallback<Pedidos> onEnviarDepos { get; set; }

    [Parameter] public EventCallback<Pedidos> onGuardar { get; set; }
    [CascadingParameter] public PedidoEncabezado RegistroGenerado { get; set; }

    private Dictionary<string, object> HtmlAttribute = new Dictionary<string, object>()
    {
         {"type", "button" }
    };

    //protected List<ItemModel> Toolbaritems = new List<ItemModel>(){
    //    new ItemModel { Text = "Copiar", TooltipText = "Copiar Item", PrefixIcon = "e-copy", Id = "copy" }
    //};


    protected SfGrid<Pedidos> Grid;

    private bool deshabilitaBotonBuscar = false;
    bool DeshabilitaBotonBuscar
    {
        get { return deshabilitaBotonBuscar; }
        set
        {
            deshabilitaBotonBuscar = DataSource.Any(s => s.TIPOO == 9);

        }
    }

    class TipoInsumo
    {
        public int Codigo { get; set; }
        public string Descrip { get; set; }
    }

    int TipoInsumoCodigo = 1;
    TipoInsumo[] TiposInsumo = new[] {
      new TipoInsumo { Codigo = 1, Descrip = "Productos" },
      new TipoInsumo { Codigo = 2, Descrip = "Semi Elaborados" },
      new TipoInsumo { Codigo = 4, Descrip = "Materias Primas" },
      new TipoInsumo { Codigo = 10, Descrip = "Articulo de Reventa" },
      new TipoInsumo { Codigo = 11, Descrip = "Herramental/Inventariables" },
      new TipoInsumo { Codigo = 12, Descrip = "Repuestos" },
      new TipoInsumo { Codigo = 13, Descrip = "Servicios" }
    };


    public class ControlCantAttribute : ValidationAttribute
    {

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var stock = (Pedidos)validationContext.ObjectInstance;

            if (stock.TIPOO == 21)
                return ValidationResult.Success;


            decimal? cant = (decimal?)value;
            return ((stock.TIPOO == 6 || stock.TIPOO == 9) && stock.STOCK > stock.ResumenStock?.STOCK)
                ? new ValidationResult($"La cantidad ingresada no puede ser mayor a la del stock ({stock.ResumenStock?.STOCK})")
                : ValidationResult.Success;

            //return cant == default || cant == 0
            //? new ValidationResult("Ingresar cantidad")
            //: ValidationResult.Success;
        }
    }


    protected List<Deposito> depositos = new List<Deposito>();

    protected override async Task OnInitializedAsync()
    {
        depositos = await Http.GetFromJsonAsync<List<Deposito>>("api/Deposito");

        //await InvokeAsync(StateHasChanged);
    }


    public async Task CommandClickHandler(CommandClickEventArgs<Pedidos> args)
    {
        if (args.CommandColumn.Title == "Copiar")
        {

            await ConfirmacionDialog.ShowAsync();

            stockCopiado = new();
            stockCopiado.REGISTRO = DataSource.Min(p => p.REGISTRO) - 1;
            stockCopiado.REGISTRO = stockCopiado.REGISTRO > 0 ? -1 : stockCopiado.REGISTRO;
            stockCopiado.IMPORTE1 = args.RowData.IMPORTE1;
            stockCopiado.CG_ART = args.RowData.CG_ART;
            stockCopiado.DES_ART = args.RowData.DES_ART;
            stockCopiado.UNID = args.RowData.UNID;
            stockCopiado.CG_DEN = args.RowData.CG_DEN;
            stockCopiado.UNIDA = args.RowData.UNIDA;
            stockCopiado.STOCK = args.RowData.STOCK;
            stockCopiado.STOCKA = args.RowData.STOCKA;
            stockCopiado.CG_DEP = args.RowData.CG_DEP;
            stockCopiado.DESPACHO = "";
            stockCopiado.SERIE = "";
            stockCopiado.LOTE = "";
            stockCopiado.Proveedor = args.RowData.Proveedor;

        }

        if (args.CommandColumn.Title == "Especificacion")
        {
            //TODO: redireccionar
            await JS.InvokeAsync<object>("open", $"pdf-especificacion/{args.RowData.CG_ART.Trim()}/RUTAESP", "_blank");

        }
    }

    public async Task ClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "copy")
        {
            if (this.Grid.SelectedRecords.Count > 0)
            {
                //bool isConfirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Seguro de que desea copiar el area?");

                //if (isConfirmed)
                //{
                //Pedidos nuevo = new();
                //nuevo.REGISTRO = DataSource.Min(p => p.REGISTRO) - 1;
                //nuevo.IMPORTE1 = item.IMPORTE1;
                //nuevo.CG_ART = item.CG_ART;
                //nuevo.DES_ART = item.DES_ART;
                //nuevo.STOCK = item.STOCK;
                //nuevo.CG_DEP = item.CG_DEP;
                //nuevo.DESPACHO = "";

                //DataSource.Add(nuevo);
                //Grid.Refresh();
                //}

                foreach (Pedidos item in Grid.SelectedRecords)
                {
                    stockCopiado = new();
                    stockCopiado.REGISTRO = DataSource.Min(p => p.REGISTRO) - 1;
                    stockCopiado.REGISTRO = stockCopiado.REGISTRO > 0 ? -1 : stockCopiado.REGISTRO;
                    stockCopiado.IMPORTE1 = item.IMPORTE1;
                    stockCopiado.CG_ART = item.CG_ART;
                    stockCopiado.DES_ART = item.DES_ART;
                    stockCopiado.UNID = item.UNID;
                    stockCopiado.UNIDA = item.UNIDA;
                    stockCopiado.STOCK = item.STOCK;
                    stockCopiado.STOCKA = item.STOCKA;
                    stockCopiado.CG_DEP = item.CG_DEP;
                    stockCopiado.DESPACHO = "";
                    stockCopiado.Proveedor = item.Proveedor;
                    await ConfirmacionDialog.ShowAsync();

                }


            }
        }


    }

    protected async Task OnActionBeginHandler(ActionEventArgs<Pedidos> args)
    {
        if (args.RequestType.ToString() == "copy")
        {
            args.Cancel = true;
            stock = args.Data;



        }
    }

    protected async Task ConfirmacionCopy()
    {

        confirmaCopy = true;
        DataSource.Add(stockCopiado);

        //await Grid.RefreshColumns();
        Grid.Refresh();
        //await Grid.RefreshHeader();

        await ConfirmacionDialog.HideAsync();
    }

    public void RowBound(RowDataBoundEventArgs<Pedidos> args)
    {
        if (args.Data.REGISTRO < 0)
        {
            args.Row.AddClass(new string[] { "row-red" });
        }
        //else if (args.Data.Freight < 35)
        //{
        //    args.Row.AddClass(new string[] { "below-35" });
        //}
        //else
        //{
        //    args.Row.AddClass(new string[] { "above-35" });
        //}
    }

    public async Task BeginEditHandler(BeginEditArgs<Pedidos> args)
    {
        var pedido = args.RowData;



        //ir al servidor y cargar el stock del item
        if (pedido.TIPOO == 6 || pedido.TIPOO == 9) //DEVolucion y Momvim entre deposito
        {
            if (pedido == null) return;

            if (!string.IsNullOrEmpty(pedido.CG_ART))
            {
                var cg_art = pedido.CG_ART;
                var cg_dep = pedido.CG_DEP;
                var despacho = pedido.DESPACHO == null ? "" : pedido.DESPACHO;
                var lote = pedido.LOTE == null ? "" : pedido.LOTE;
                var serie = pedido.SERIE == null ? "" : pedido.SERIE;

                var resumen = await Http
                    .GetFromJsonAsync<vResumenStock>($"api/ResumenStock/GetByStock?CG_ART={cg_art}&CG_DEP={cg_dep}&DESPACHO={despacho}&LOTE={lote}&SERIE={serie}");


                pedido.ResumenStock = resumen;
            }

        }
        stock = pedido;
    }


    public async Task OnActionComplete(ActionEventArgs<Pedidos> Args)
    {

        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            var pedido = DataSource.Where(p => p.REGISTRO == Args.Data.REGISTRO).FirstOrDefault();
            pedido.STOCKA = Args.Data.STOCK / Args.Data.CG_DEN > 0 ? Args.Data.CG_DEN : 1;
            await Grid.RefreshColumns();
            Grid.Refresh();
            await Grid.RefreshHeader();


        }

    }


    void OnRowRemoving(Pedidos pedido)
    {
        DataSource = DataSource.Where(v => v != pedido).ToList();
        InvokeAsync(StateHasChanged);
    }

    string tituloBuscador { get; set; } = "";
    private bool popupBuscadorVisible = false;
    bool PopupBuscadorStockVisible { get => popupBuscadorVisible; set { popupBuscadorVisible = value; InvokeAsync(StateHasChanged); } }
    bool PopupBuscadorProdVisible { get => popupBuscadorVisible; set { popupBuscadorVisible = value; InvokeAsync(StateHasChanged); } }
    string[] ColumnasBuscador = new string[] { "CG_MAT"};
    ResumenStock[] Items;

    protected async Task Buscar()
    {
        if (RegistroGenerado.TIPOO == 5) //Recep
        {
            await BuscarProductos();

        }

        if (RegistroGenerado.TIPOO == 21) //Ajuste
        {
            await BuscarProductosStock();
        }

        if (RegistroGenerado.TIPOO == 9 || RegistroGenerado.TIPOO == 6) //Devol y Movim
        {

            await BuscarProductosStockEnPositivo();
        }


    }

    protected async Task BuscarProductos()
    {
        PopupBuscadorStockVisible = false;

        Items = null;
        tituloBuscador = "Listado de Productos";
        PopupBuscadorProdVisible = true;
        ColumnasBuscador = new string[] { "CG_PROD", "DES_PROD", "UNID" };
        int cg_orden = TipoInsumoCodigo;
        DataSourceProductos = await Http.GetFromJsonAsync<Producto[]>($"api/Productos/GetProductos/{cg_orden}");


        await InvokeAsync(StateHasChanged);
    }

    protected async Task BuscarProductosStock()
    {
        PopupBuscadorProdVisible = false;

        Items = null;
        tituloBuscador = "Listado de Productos en Stock";
        PopupBuscadorStockVisible = true;
        ColumnasBuscador = new string[] { "CG_ART", "CG_DEP", "DESPACHO", "SERIE", "LOTE", "STOCK" };
        int cg_orden = TipoInsumoCodigo;
        Items = await Http.GetFromJsonAsync<ResumenStock[]>("api/ResumenStocks");

        await InvokeAsync(StateHasChanged);
    }

    protected async Task BuscarProductosStockEnPositivo()
    {
        PopupBuscadorProdVisible = false;

        Items = null;
        tituloBuscador = "Listado de Productos en Stock";
        PopupBuscadorStockVisible = true;
        ColumnasBuscador = new string[] { "CG_ART", "CG_DEP", "DESPACHO", "SERIE", "LOTE", "STOCK" };
        int cg_orden = TipoInsumoCodigo;
        Items = await Http.GetFromJsonAsync<ResumenStock[]>("api/ResumenStocks/GetResumenStockPositivo");

        await InvokeAsync(StateHasChanged);
    }


    private async Task onStockSelected(Pedidos obj)
    {
        PopupBuscadorStockVisible = false;
        var tipoEntidad = obj.GetType().Name;
        if (tipoEntidad == "Stock")
        {
            var pedido = (Pedidos)obj;
            //Get items del vale
            var vale = pedido.VALE;
            DataSource = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Stock/AbriVale/{pedido.VALE}");

            //NumeroVale = ItemsVale[0].VALE;
            //Fecha = ItemsVale[0].FE_MOV;
        }

    }



    private async Task BuscarItem()
    {
        await BuscadorProducto.ShowAsync();
    }

    private async Task OnSelectedItem(Pedidos item)
    {
        stock.CG_ART = item.CG_ART;
        stock.DES_ART = item.DES_ART;
        stock.UNID = item.UNID;
        stock.CG_DEP = 4;
        stock.STOCK = item.STOCK;
        stock.STOCKA = item.STOCKA;
        stock.IMPORTE1 = item.IMPORTE1;


        DataSource.Add(stock);


        await Grid.RefreshColumns();
        Grid.Refresh();
        await Grid.RefreshHeader();
        await BuscadorProducto.HideAsync();
    }


    private async Task onResumenStockSelected(vResumenStock obj)
    {

        PopupBuscadorStockVisible = false;

        var resumenStock = (vResumenStock)obj;

        //buscar registro mas reciente con las caracteristicas de resumen stock
        var cg_art = resumenStock.CG_ART;
        var cg_dep = resumenStock.CG_DEP;
        var despacho = resumenStock.DESPACHO == null ? "" : resumenStock.DESPACHO;
        var lote = resumenStock.LOTE == null ? "" : resumenStock.LOTE;
        var serie = resumenStock.SERIE == null ? "" : resumenStock.SERIE;

        var registroCompleto = await Http
            .GetFromJsonAsync<Pedidos>($"api/Stock/GetByResumenStock?CG_ART={cg_art}&CG_DEP={cg_dep}&DESPACHO={despacho}&LOTE={lote}&SERIE={serie}");

        registroCompleto.REGISTRO = DataSource.Count > 0 ? -1 : DataSource.Count * -1;//indica que es un nuevo registro
        registroCompleto.TIPOO = RegistroGenerado.TIPOO;
        registroCompleto.STOCK = 0;
        registroCompleto.ResumenStock = resumenStock;

        //var nuevoItem = (new Stock[] { EditContext.DataItem });
        //lStock = (new Stock[] { EditContext.DataItem }).Concat(lStock);
        //DataSource = nuevoItem.Concat(DataSource).ToArray();

        //var lStock = new List<Stock>();
        //lStock.Add(registroCompleto);
        //DataSource = lStock.ToArray();
        stock = registroCompleto;
    }


    public async Task QueryCellInfoHandler(QueryCellInfoEventArgs<Pedidos> args)
    {
        args.Data.STOCKA = Math.Round( (decimal)(args.Data.STOCK / args.Data.CG_DEN), 4);
        //InvokeAsync(StateHasChanged);
        if (args.Data.STOCK > args.Data.PENDIENTEOC && RegistroGenerado.TIPOO == 5)
        {
            args.Cell.AddClass(new string[] { "rojo" });
        }
    }
}
<style>
    /*    #dialogo {
        min-height: 400px;
    }*/

    .row-red {
        background-color: red;
    }

    #gridEditStock_dialogEdit_wrapper {
        top: 131px !important;
    }

    .e-grid .e-gridcontent .e-rowcell.rojo {
        background-color: #fc9494;
    }
</style>
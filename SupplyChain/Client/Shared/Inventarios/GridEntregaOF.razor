@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.DataAnnotations.Schema;
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Navigations
@inject HttpClient Http
@using System.Text.Json

@if (DataSource == null)
{
    return;
}
else
{
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">

                <SfGrid @ref="@Grid" DataSource="@DataSource" Width="100%" AllowExcelExport="true" AllowPaging="true"
                        GridLines="GridLine.Both" Locale="es-Ar" ID="grdEntregaOF" Toolbar="@Toolbaritems">
                    <GridPageSettings PageCount="4" PageSize="20"></GridPageSettings>
                    <GridEvents OnBeginEdit="@(async (ped)=> await BeginEditHandler(ped))"
                                OnActionComplete="@(async (a)=> await OnActionComplete(a))"
                                TValue="Pedidos"></GridEvents>
                    <GridEditSettings AllowAdding="@PermiteAgregar" AllowEditing="@PermiteEditar" AllowDeleting="@PermiteEliminar"
                                      Mode="EditMode.Dialog" Dialog="new DialogSettings() { ShowCloseIcon = true,
                                                                             CloseOnEscape =true }">

                        <HeaderTemplate>
                            <span>Detalle</span>
                        </HeaderTemplate>
                        <Template>
                            @{

                                stock = (context as Pedidos);
                                <hr />
                                <br />
                                <div class="form-row">
                                    <div class="form-group col-md-3">
                                        <label class="col-form-label">Codigo Producto :</label>
                                        <SfTextBox @bind-Value="@stock.CG_ART" Readonly="true"></SfTextBox>
                                        <ValidationMessage For="@(() => stock.CG_ART)"></ValidationMessage>
                                    </div>
                                    <div class="form-group col-md-9">
                                        <label class="col-form-label">Descripcion Producto :</label>
                                        <SfTextBox @bind-Value="@stock.DES_ART" Readonly="true"></SfTextBox>
                                        <ValidationMessage For="@(() => stock.DES_ART)"></ValidationMessage>
                                    </div>
                                    <div class="form-group col-md-2">
                                            <SfButton CssClass="e-round" IconCss="fas fa-search" IsPrimary="true"
                                                      Disabled="@DeshabilitaBotonBuscar"
                                                      @onclick="@(async ()=> await Buscar())">

                                            </SfButton>
                                        </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group col-md-2">
                                        <label class="col-form-label">Cantidad :</label>
                                        <SfNumericTextBox @bind-Value="@stock.STOCK" Decimals="2"></SfNumericTextBox>
                                        <ValidationMessage For="@(() => stock.STOCK)"></ValidationMessage>
                                    </div>
                                    <div class="form-group col-md-1">
                                        <label class="col-form-label">Unidad :</label>
                                        <SfTextBox @bind-Value="@stock.UNID" Readonly="true"></SfTextBox>
                                        <ValidationMessage For="@(() => stock.UNID)"></ValidationMessage>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <label class="col-form-label">Serie :</label>
                                        <SfTextBox @bind-Value="@stock.SERIE"></SfTextBox>
                                        <ValidationMessage For="@(() => stock.SERIE)"></ValidationMessage>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <label class="col-form-label">Depacho :</label>
                                        <SfTextBox @bind-Value="@stock.DESPACHO"></SfTextBox>
                                        <ValidationMessage For="@(() => stock.DESPACHO)"></ValidationMessage>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <label class="col-form-label">Lote :</label>
                                        <SfTextBox @bind-Value="@stock.LOTE"></SfTextBox>
                                        <ValidationMessage For="@(() => stock.LOTE)"></ValidationMessage>
                                    </div>

                                </div>

                            }
                        </Template>
                    </GridEditSettings>

                    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                    <GridColumns>
                        <GridColumn HeaderText="" Width="120">
                            <GridCommandColumns>
                                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-flat" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon", CssClass = "e-flat" })"></GridCommandColumn>
                            </GridCommandColumns>
                        </GridColumn>
                        <GridColumn Field="@nameof(Pedidos.CG_ART)" HeaderText="Cod. Producto" AutoFit="true" Width="130"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.DES_ART)" HeaderText="Desc. Producto" Width="180"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.STOCK)" HeaderText="Cant Entrega" EditType="EditType.NumericEdit" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.UNID)" HeaderText="Unidad" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.DESPACHO)" HeaderText="Despacho" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.SERIE)" HeaderText="Serie" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.LOTE)" HeaderText="Lote" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.CG_DEP)" HeaderText="Deposito" AutoFit="true">
                            <Template>
                                @{
                                    var ped = (context as Pedidos);
                                    if (depositos.Any(c => c.CG_DEP == ped.CG_DEP))
                                    {
                                        <span>@depositos.Where(c => c.CG_DEP == ped.CG_DEP).FirstOrDefault().DES_DEP.Trim()</span>

                                    }
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field="@nameof(Pedidos.PENDIENTEOC)" HeaderText="Stock" EditType="EditType.NumericEdit" AutoFit="true"></GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>
    @*<BuscadorResumenStock MostraBotonBusqueda="puedeBuscarStock" HabilitaBotonBusqueda="!puedeBuscarStock"
                          MostrarSpin="false" HtmlAtrr="HtmlAttribute"
                          OnRSSeleccionada="onResumenStockSelected" TextoButon="Buscar Stock" />*@

    @*<BuscadorEmergente @ref="BuscadorProducto" Titulo=@tituloBuscador Visible="@PopupBuscadorProdVisible"
        DataSource="@DataSourceProductos" Columnas="@ColumnasBuscador" onObjetoSeleccionado="onpro"  />*@


}

@code {
    //BuscadorEmergente<ResumenStock> BuscadorResumenStock;
    //BuscadorEmergente<Producto> BuscadorProducto;
    Pedidos stock;

    Producto[] DataSourceProductos;
    [Parameter] public string Titulo { get; set; } = null!;
    [Parameter] public List<Pedidos> DataSource { get; set; } = null!;
    [Parameter] public bool PermiteAgregar { get; set; } = false;
    [Parameter] public bool PermiteEditar { get; set; } = false;
    [Parameter] public bool PermiteEliminar { get; set; } = false;
    [Parameter] public EventCallback<Pedidos> onEnviarDepos { get; set; }

    [Parameter] public EventCallback<Pedidos> onGuardar { get; set; }
    [CascadingParameter] public Pedidos RegistroGenerado { get; set; }


    SfGrid<Pedidos> Grid;
    Unidades[] Unidades = new List<Unidades>().ToArray();
    protected List<Object> Toolbaritems = new List<Object>(){
        new ItemModel(){ Text="Buscar Stock", Type = ItemType.Input, ShowAlwaysInPopup=true, Id="BuscarStock",CssClass="btn btn-sm btn-succsess"},
        new ItemModel(){ Type = ItemType.Separator},
        };

    private bool deshabilitaBotonBuscar = false;
    bool DeshabilitaBotonBuscar
    {
        get { return deshabilitaBotonBuscar; }
        set
        {
            deshabilitaBotonBuscar = DataSource.Any(s => s.TIPOO == 9);

        }
    }

    class TipoInsumo
    {
        public int Codigo { get; set; }
        public string Descrip { get; set; }
    }

    int TipoInsumoCodigo = 1;
    TipoInsumo[] TiposInsumo = new[] {
      new TipoInsumo { Codigo = 1, Descrip = "Productos" },
      new TipoInsumo { Codigo = 2, Descrip = "Semi Elaborados" },
      new TipoInsumo { Codigo = 4, Descrip = "Materias Primas" },
      new TipoInsumo { Codigo = 10, Descrip = "Articulo de Reventa" },
      new TipoInsumo { Codigo = 11, Descrip = "Herramental/Inventariables" },
      new TipoInsumo { Codigo = 12, Descrip = "Repuestos" },
      new TipoInsumo { Codigo = 13, Descrip = "Servicios" }
    };


    protected List<Deposito> depositos = new List<Deposito>();

    protected override async Task OnInitializedAsync()
    {
        depositos = await Http.GetFromJsonAsync<List<Deposito>>("api/Deposito");

        //await InvokeAsync(StateHasChanged);
    }

    public async Task BeginEditHandler(BeginEditArgs<Pedidos> args)
    {
        var pedido = args.RowData;

        //pedido.TIPOO = RegistroGenerado.TIPOO;

        //ir al servidor y cargar el stock del item
        if (pedido.TIPOO == 6 || pedido.TIPOO == 9) //DEVolucion y Momvim entre deposito
        {
            if (pedido == null) return;

            if (!string.IsNullOrEmpty(pedido.CG_ART))
            {
                var cg_art = pedido.CG_ART;
                var cg_dep = pedido.CG_DEP;
                var despacho = pedido.DESPACHO == null ? "" : pedido.DESPACHO;
                var lote = pedido.LOTE == null ? "" : pedido.LOTE;
                var serie = pedido.SERIE == null ? "" : pedido.SERIE;

                var resumen = await Http
                    .GetFromJsonAsync<vResumenStock>($"api/ResumenStocks/GetByStock?CG_ART={cg_art}&CG_DEP={cg_dep}&DESPACHO={despacho}&LOTE={lote}&SERIE={serie}");

                pedido.ResumenStock = resumen;
            }

        }


        stock = pedido;
    }

    void OnCancelButtonClick()
    {
        //EditContext = null;
    }

    public async Task OnActionComplete(ActionEventArgs<Pedidos> Args)
    {

        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            //await onGuardar.InvokeAsync(Args.Data);
            //Args.Data.REGISTRO = RegistroGenerado.REGISTRO;
            //if (RegistroGenerado.TIPOO == 5)
            //{
            //    Args.Data.IMPORTE1 = RegistroGenerado.IMPORTE1;
            //    Args.Data.IMPORTE2 = RegistroGenerado.IMPORTE2;
            //    Args.Data.IMPORTE3 = RegistroGenerado.IMPORTE3;
            //    Args.Data.IMPORTE4 = RegistroGenerado.IMPORTE4;
            //    Args.Data.IMPORTE6 = RegistroGenerado.IMPORTE6;
            //}


            await Grid.RefreshColumns();
            Grid.Refresh();
            await Grid.RefreshHeader();
        }
    }


    async Task HandleValidSubmit(ActionEventArgs<Pedidos> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            //DataSource.Concat(new Stock[] { Args.Data });
        }

        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {

            try
            {
                //envio item stock para guardar en la pantall operarcion
                //para poder agregarle los datos de la cabecera: vale, ocompra etc
                //await onGuardar.InvokeAsync(EditContext.DataItem);
                await onGuardar.InvokeAsync(Args.Data);


                //agregar nuero de registro una vez guardado y obtner los importes
                Args.Data.Id = RegistroGenerado.Id;
                Args.Data.IMPORTE1 = RegistroGenerado.IMPORTE1;
                Args.Data.IMPORTE2 = RegistroGenerado.IMPORTE2;
                Args.Data.IMPORTE3 = RegistroGenerado.IMPORTE3;
                Args.Data.IMPORTE4 = RegistroGenerado.IMPORTE4;
                Args.Data.IMPORTE6 = RegistroGenerado.IMPORTE6;
                //EditContext.DataItem.REGISTRO = RegistroGenerado.REGISTRO;
                //EditContext.DataItem.IMPORTE1 = RegistroGenerado.IMPORTE1;
                //EditContext.DataItem.IMPORTE2 = RegistroGenerado.IMPORTE2;
                //EditContext.DataItem.IMPORTE3 = RegistroGenerado.IMPORTE3;
                //EditContext.DataItem.IMPORTE4 = RegistroGenerado.IMPORTE4;
                //EditContext.DataItem.IMPORTE6 = RegistroGenerado.IMPORTE6;

                //if (EditContext.IsNewRow)
                //{
                //    EditContext.IsNewRow = false;
                //    var nuevoItem = (new Stock[] { EditContext.DataItem });
                //    //lStock = (new Stock[] { EditContext.DataItem }).Concat(lStock);
                //    DataSource = nuevoItem.Concat(DataSource).ToArray();
                //}

                await Grid.RefreshHeader();
                await Grid.RefreshColumns();
                Grid.Refresh();
                await Grid.CloseEdit();

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }



    }

    void OnRowRemoving(Pedidos pedido)
    {
        DataSource = DataSource.Where(v => v != pedido).ToList();
        InvokeAsync(StateHasChanged);
    }

    string tituloBuscador { get; set; } = "";
    private bool popupBuscadorVisible = false;
    bool PopupBuscadorStockVisible { get => popupBuscadorVisible; set { popupBuscadorVisible = value; InvokeAsync(StateHasChanged); } }
    bool PopupBuscadorProdVisible { get => popupBuscadorVisible; set { popupBuscadorVisible = value; InvokeAsync(StateHasChanged); } }
    string[] ColumnasBuscador = new string[] { "CG_PROD", "DES_PROD" }; /*,"DES_ART","DESPACHO", "LOTE","SERIE"*/
    ResumenStock[] Items;

    protected async Task Buscar()
    {

        if (RegistroGenerado.TIPOO == 21) //Ajuste
        {
            await BuscarProductosStock();
        }

        if (RegistroGenerado.TIPOO == 9 || RegistroGenerado.TIPOO == 6) //Devol y Movim
        {

            await BuscarProductosStockEnPositivo();
        }


    }


    protected async Task BuscarProductos()
    {
        PopupBuscadorStockVisible = false;

        Items = null;
        tituloBuscador = "Listado de Productos";
        PopupBuscadorProdVisible = true;
        ColumnasBuscador = new string[] { "CG_PROD", "DES_PROD", "UNID" };
        int cg_orden = TipoInsumoCodigo;
        DataSourceProductos = await Http.GetFromJsonAsync<Producto[]>($"api/Productos/GetProductos/{cg_orden}");


        await InvokeAsync(StateHasChanged);
    }

    protected async Task BuscarProductosStock()
    {
        PopupBuscadorProdVisible = false;

        Items = null;
        tituloBuscador = "Listado de Productos en Stock";
        PopupBuscadorStockVisible = true;
        ColumnasBuscador = new string[] { "CG_ART", "CG_DEP", "DESPACHO", "SERIE", "LOTE", "STOCK" };
        int cg_orden = TipoInsumoCodigo;
        Items = await Http.GetFromJsonAsync<ResumenStock[]>("api/ResumenStocks");

        await InvokeAsync(StateHasChanged);
    }

    protected async Task BuscarProductosStockEnPositivo()
    {
        PopupBuscadorProdVisible = false;

        Items = null;
        tituloBuscador = "Listado de Productos en Stock";
        PopupBuscadorStockVisible = true;
        ColumnasBuscador = new string[] { "CG_ART", "CG_DEP", "DESPACHO", "SERIE", "LOTE", "STOCK" };
        int cg_orden = TipoInsumoCodigo;
        Items = await Http.GetFromJsonAsync<ResumenStock[]>("api/ResumenStocks/GetResumenStockPositivo");

        await InvokeAsync(StateHasChanged);
    }


    private async Task onStockSelected(Pedidos obj)
    {
        PopupBuscadorStockVisible = false;
        var tipoEntidad = obj.GetType().Name;
        if (tipoEntidad == "Stock")
        {
            var pedido = (Pedidos)obj;
            //Get items del vale
            var vale = pedido.VALE;
            DataSource = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Stock/AbriVale/{pedido.VALE}");

        }

    }

    private async Task onInsumoSelected(Producto obj)
    {
        await Task.Run(() =>
        {
            PopupBuscadorStockVisible = false;
            var tipoEntidad = obj.GetType().Name;

            if (tipoEntidad == "Producto")
            {
                var producto = (Producto)obj;
            }
        });


    }


    private async Task onResumenStockSelected(vResumenStock obj)
    {

        PopupBuscadorStockVisible = false;

        var resumenStock = (vResumenStock)obj;

        //buscar registro mas reciente con las caracteristicas de resumen stock
        var cg_art = resumenStock.CG_ART;
        var cg_dep = resumenStock.CG_DEP;
        var despacho = resumenStock.DESPACHO == null ? "" : resumenStock.DESPACHO;
        var lote = resumenStock.LOTE == null ? "" : resumenStock.LOTE;
        var serie = resumenStock.SERIE == null ? "" : resumenStock.SERIE;

        var registroCompleto = await Http
            .GetFromJsonAsync<Pedidos>($"api/Stock/GetByResumenStock?CG_ART={cg_art}&CG_DEP={cg_dep}&DESPACHO={despacho}&LOTE={lote}&SERIE={serie}");

        registroCompleto.Id = DataSource.Count > 0 ? -1 : DataSource.Count * -1;//indica que es un nuevo registro
        registroCompleto.TIPOO = RegistroGenerado.TIPOO;
        registroCompleto.STOCK = 0;
        registroCompleto.ResumenStock = resumenStock;

        //var nuevoItem = (new Stock[] { EditContext.DataItem });
        //lStock = (new Stock[] { EditContext.DataItem }).Concat(lStock);
        //DataSource = nuevoItem.Concat(DataSource).ToArray();

        //var lStock = new List<Stock>();
        //lStock.Add(registroCompleto);
        //DataSource = lStock.ToArray();
        stock = registroCompleto;

    }
}

@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.DataAnnotations.Schema;
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Text.Json
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations

@if (DataSource == null)
{

}
else
{
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                <SfGrid @ref="@Grid" DataSource="@DataSource" AllowExcelExport="true" AllowPaging="true" ID="gridEditEntregaNewOF"
                        GridLines="GridLine.Both" Locale="es-Ar" Height="100%" Width="100%" EnablePersistence="false"
                        Toolbar="@Toolbaritems"
                        AllowResizing="true" AllowSelection="true" AllowSorting="true" AllowTextWrap="false"
                        AllowReordering="true" RowHeight="20">
                    <GridPageSettings PageCount="4" PageSize="50"></GridPageSettings>
                    <GridEvents OnActionBegin="@(async(p)=> await OnActionBeginHandler(p))"
                                CommandClicked="@(async (p)=> await CommandClickHandler(p))"
                                OnBeginEdit="@(async (ped)=> await BeginEditHandler(ped))"
                                QueryCellInfo="@(async(e)=> await QueryCellInfoHandler(e))"
                                OnActionComplete="@(async(e)=> await OnActionComplete(e))" 
                                OnToolbarClick="@(async(e)=> await ClickHandler(e))"
                                TValue="Pedidos"></GridEvents>
                    <GridEditSettings AllowAdding="PermiteAgregar" AllowEditing="PermiteEditar" AllowDeleting="PermiteEliminar"
                                      Mode="EditMode.Dialog" Dialog="@DialogParams">
                        <HeaderTemplate>
                            <span>Detalle</span>
                        </HeaderTemplate>
                        <Template>
                            @{

                                stock = (context as Pedidos);
                                <hr />
                                <br />
                                <div class="form-row">
                                    <div class="form-group col-md-2">
                                        <label class="col-form-label">Codigo Producto :</label>
                                        <SfTextBox @bind-Value="@stock.CG_ART" Readonly="true"></SfTextBox>
                                        <ValidationMessage For="@(() => stock.CG_ART)"></ValidationMessage>
                                    </div>
                                    <div class="form-group col-md-4">
                                        <label class="col-form-label">Descripcion Producto :</label>
                                        <SfTextBox @bind-Value="@stock.DES_ART" Readonly="true"></SfTextBox>
                                        <ValidationMessage For="@(() => stock.DES_ART)"></ValidationMessage>
                                    </div>
                                    <div class="form-group col-md-1 mt-4">
                                        <SfButton HtmlAttributes="@HtmlAttribute" OnClick="@(async ()=> await Buscar())"
                                                  CssClass="e-round"
                                                  Content="" IconCss="fa fa-search" />
                                    </div>
                                    <div class="form-group col-md-2">
                                        <label class="col-form-label">Déposito Salida</label>
                                        <SfDropDownList TItem="Deposito" @bind-Value="@stock.CG_DEP" Readonly="true"
                                                        TValue="int" ID="CG_DEP" DataSource="@depositos">
                                            <DropDownListFieldSettings Text="DES_DEP" Value="CG_DEP">

                                            </DropDownListFieldSettings>
                                        </SfDropDownList>
                                    </div>
                                    <div class="form-group col-md-2">
                                        <label class="col-form-label">Stock - Entrega:</label>
                                        <SfNumericTextBox ShowSpinButton="false" @bind-Value="@stock.PENDIENTEOC" TValue="decimal?"
                                                          Readonly="true">
                                        </SfNumericTextBox>
                                    </div>
                                    <div class="form-group col-md-1">
                                        <label class="col-form-label">Stock:</label>
                                        <SfNumericTextBox ShowSpinButton="false" @bind-Value="@stock.ResumenStock.STOCK" 
                                                          Readonly="true"/>
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group col-md-2">
                                        <label class="col-form-label">Cantidad :</label>
                                        <SfNumericTextBox @bind-Value="@stock.STOCK" Decimals="2" @onchange="@CantChange"></SfNumericTextBox>
                                        <ValidationMessage For="@(() => stock.STOCK)"></ValidationMessage>
                                    </div>
                                    <div class="form-group col-md-1">
                                        <label class="col-form-label">Unidad :</label>
                                        <SfTextBox @bind-Value="@stock.UNID" Readonly="true"></SfTextBox>
                                        <ValidationMessage For="@(() => stock.UNID)"></ValidationMessage>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <label class="col-form-label">Serie :</label>
                                        <SfTextBox @bind-Value="@stock.SERIE"></SfTextBox>
                                        <ValidationMessage For="@(() => stock.SERIE)"></ValidationMessage>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <label class="col-form-label">Depacho :</label>
                                        <SfTextBox @bind-Value="@stock.DESPACHO" Readonly="true"></SfTextBox>
                                        <ValidationMessage For="@(() => stock.DESPACHO)"></ValidationMessage>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <label class="col-form-label">Lote :</label>
                                        <SfTextBox @bind-Value="@stock.LOTE" Readonly="true"></SfTextBox>
                                        <ValidationMessage For="@(() => stock.LOTE)"></ValidationMessage>
                                    </div>

                                </div>


                            }
                        </Template>
                    </GridEditSettings>

                    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                    <GridColumns>
                        <GridColumn HeaderText="" Width="120">
                            <GridCommandColumns>
                                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                            </GridCommandColumns>
                        </GridColumn>
                        <GridColumn Field="@nameof(Pedidos.CG_ART)" HeaderText="Cod. Producto" AutoFit="true" Width="130"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.DES_ART)" HeaderText="Desc. Producto" Width="180"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.STOCK)" HeaderText="Cant Entrega" EditType="EditType.NumericEdit" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.UNID)" HeaderText="Unidad" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.DESPACHO)" HeaderText="Despacho" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.SERIE)" HeaderText="Serie" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.LOTE)" HeaderText="Lote" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.CG_DEP)" HeaderText="Deposito" AutoFit="true">
                            <Template>
                                @{
                                    var ped = (context as Pedidos);
                                    if (depositos.Any(c => c.CG_DEP == ped.CG_DEP))
                                    {
                                        <span>@depositos.Where(c => c.CG_DEP == ped.CG_DEP).FirstOrDefault().DES_DEP.Trim()</span>

                                    }
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field="@nameof(Pedidos.PENDIENTEOC)" HeaderText="Stock" EditType="EditType.NumericEdit" AutoFit="true"></GridColumn>
                        <GridColumn Field="@nameof(Pedidos.REGISTRO)" IsPrimaryKey="true" HeaderText="ID" Visible="false"></GridColumn>
                    </GridColumns>

                </SfGrid>
            </div>
        </div>
    </div>

    @if (PopupBuscadorStockVisible)
    {
        <BuscadorEmergenteResumenStock @ref="BuscadorEmergenteRS" Titulo="@tituloBuscador" DataSource="@Items"
                                       Columnas="@(new string[] { "CG_ART", "STOCK", "CG_DEP", "SERIE", "LOTE", "DESPACHO"})"
                                       OnObjetoSeleccionado="@(async(r)=> await OnResumenStockSelected(r))"/>
    }


    <BuscadorEmergente TItem="Pedidos" @ref="BuscadorProducto" Titulo=@tituloBuscador
                       DataSource="@DataSource" Columnas="@(new string[] { "CG_ART", "DES_ART"})"
                       OnObjetoSeleccionado="OnSelectedItem" />



}

@code {
    [Inject] public IJSRuntime JsRuntime { get; set; }
    protected ConfirmacionDialog ConfirmacionDialog;
    protected BuscadorEmergente<Pedidos> BuscadorProducto;
    protected Pedidos stock;
    protected Pedidos stockCopiado;
    protected bool confirmaCopy = false;
    protected bool bAgregarInsumo = false;
    protected BuscadorEmergenteResumenStock BuscadorEmergenteRS;


    Producto[] DataSourceProductos;
    [Parameter] public string Titulo { get; set; } = null!;
    [Parameter] public List<Pedidos> DataSource { get; set; } = null!;
    [Parameter] public bool PermiteAgregar { get; set; } = false;
    [Parameter] public bool PermiteEditar { get; set; } = false;
    [Parameter] public bool PermiteEliminar { get; set; } = false;
    [Parameter] public EventCallback<Pedidos> onEnviarDepos { get; set; }

    [Parameter] public EventCallback<Pedidos> onGuardar { get; set; }
    [CascadingParameter] public PedidoEncabezado RegistroGenerado { get; set; }

    private Dictionary<string, object> HtmlAttribute = new Dictionary<string, object>()
{
         {"type", "button" }
    };

    protected List<ItemModel> Toolbaritems = new List<ItemModel>(){
        new ItemModel { CssClass="btn", Text = "Agregar Insumo", ShowTextOn = DisplayMode.Toolbar, Type = ItemType.Button,
            TooltipText = "Agregar Insumo", PrefixIcon = "fa fa-search", Id = "AgregarInsumo" }
    };

    protected DialogSettings DialogParams = new DialogSettings { MinHeight = "400px", Width = "900px" };

    protected SfGrid<Pedidos> Grid;

    private bool deshabilitaBotonBuscar = false;
    bool DeshabilitaBotonBuscar
    {
        get { return deshabilitaBotonBuscar; }
        set
        {
            deshabilitaBotonBuscar = DataSource.Any(s => s.TIPOO == 9);

        }
    }



    protected List<Deposito> depositos = new List<Deposito>();

    protected override async Task OnInitializedAsync()
    {
        depositos = await Http.GetFromJsonAsync<List<Deposito>>("api/Deposito");

        //await InvokeAsync(StateHasChanged);
    }


    public async Task CommandClickHandler(CommandClickEventArgs<Pedidos> args)
    {
        if (args.CommandColumn.Title == "Copiar")
        {


        }
    }

    public async Task ClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "AgregarInsumo")
        {
            await AgregarInsumo();
        }


    }

    protected async Task OnActionBeginHandler(ActionEventArgs<Pedidos> args)
    {

        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            args.PreventRender = false;
            stock = args.Data;
        }
    }

    protected async Task AgregarInsumo()
    {
        PopupBuscadorStockVisible = true;
        bAgregarInsumo = true;
        Items = null;
        await BuscadorEmergenteRS.ShowAsync();
        tituloBuscador = $"Listado de Insumos con Stock";

        ColumnasBuscador = new string[] { "CG_ART", "DEPOSITO","DESPACHO", "SERIE", "LOTE", "STOCK" };

        Items = await Http.GetFromJsonAsync<vResumenStock[]>($"api/ResumenStock/GetResumenStockPositivo");


    }

    public void RowBound(RowDataBoundEventArgs<Pedidos> args)
    {
        if (args.Data.STOCK <= 0)
        {
            args.Row.AddClass(new string[] { "row-red" });
        }
        //else if (args.Data.Freight < 35)
        //{
        //    args.Row.AddClass(new string[] { "below-35" });
        //}
        //else
        //{
        //    args.Row.AddClass(new string[] { "above-35" });
        //}
    }

    public async Task BeginEditHandler(BeginEditArgs<Pedidos> args)
    {
        stock = args.RowData;
        //ir al servidor y cargar el stock del item
        if (stock.TIPOO == 6 || stock.TIPOO == 9) //DEVolucion y Momvim entre deposito
        {
            if (stock == null) return;

            if (!string.IsNullOrEmpty(stock.CG_ART))
            {
                var cg_art = stock.CG_ART;
                var cg_dep = stock.CG_DEP;
                var despacho = stock.DESPACHO == null ? "" : stock.DESPACHO;
                var lote = stock.LOTE == null ? "" : stock.LOTE;
                var serie = stock.SERIE == null ? "" : stock.SERIE;

                var resumen = await Http
                    .GetFromJsonAsync<vResumenStock>($"api/ResumenStock/GetByStock?CG_ART={cg_art}&CG_DEP={cg_dep}&DESPACHO={despacho}&LOTE={lote}&SERIE={serie}");


                stock.ResumenStock = resumen;
            }

        }
    }


    public async Task OnActionComplete(ActionEventArgs<Pedidos> Args)
    {
        Args.PreventRender = false;
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            await Grid.RefreshColumns();
            Grid.Refresh();
            await Grid.RefreshHeader();
        }

    }


    void OnRowRemoving(Pedidos pedido)
    {
        DataSource = DataSource.Where(v => v != pedido).ToList();
        InvokeAsync(StateHasChanged);
    }

    string tituloBuscador { get; set; } = "";
    private bool popupBuscadorVisible = false;
    bool PopupBuscadorStockVisible { get => popupBuscadorVisible; set { popupBuscadorVisible = value; InvokeAsync(StateHasChanged); } }
    bool PopupBuscadorProdVisible { get => popupBuscadorVisible; set { popupBuscadorVisible = value; InvokeAsync(StateHasChanged); } }
    string[] ColumnasBuscador = new string[] { "CG_MAT" };
    vResumenStock[] Items;

    protected async Task Buscar()
    {

        if (RegistroGenerado.TIPOO == 21) //Ajuste
        {
            await BuscarProductosStock();
        }

        if (RegistroGenerado.TIPOO == 9 || RegistroGenerado.TIPOO == 10 || RegistroGenerado.TIPOO == 6) //Devol y Movim
        {

            await BuscarProductosStockEnPositivo();
        }


    }

    protected async Task BuscarProductos()
    {
        PopupBuscadorStockVisible = false;

        Items = null;
        tituloBuscador = "Listado de Productos";
        PopupBuscadorProdVisible = true;
        ColumnasBuscador = new string[] { "CG_PROD", "DES_PROD", "UNID" };
        //DataSourceProductos = await Http.GetFromJsonAsync<Producto[]>($"api/Productos/GetProductos/{cg_orden}");


        await InvokeAsync(StateHasChanged);
    }

    protected async Task BuscarProductosStock()
    {
        PopupBuscadorProdVisible = false;

        Items = null;
        tituloBuscador = "Listado de Productos en Stock";
        PopupBuscadorStockVisible = true;
        ColumnasBuscador = new string[] { "CG_ART","PRODUCTO", "DEPOSITO", "DESPACHO", "SERIE", "LOTE", "STOCK" };
        //int cg_orden = TipoInsumoCodigo;
        Items = await Http.GetFromJsonAsync<vResumenStock[]>("api/ResumenStock");

        await InvokeAsync(StateHasChanged);
    }

    protected async Task BuscarProductosStockEnPositivo()
    {
        PopupBuscadorStockVisible = true;
        Items = null;
        tituloBuscador = $"Listado de Insumo {stock.CG_ART} con Stock";

        ColumnasBuscador = new string[] { "CG_ART", "PRODUCTO", "CG_DEP", "DEPOSITO", "DESPACHO", "SERIE", "LOTE", "STOCK" };
        //int cg_orden = TipoInsumoCodigo;
        Items = await Http.GetFromJsonAsync<vResumenStock[]>($"api/ResumenStock/ByCodigo?Codigo={stock.CG_ART.Trim()}&Descripcion=");
        await BuscadorEmergenteRS.ShowAsync();
        //await InvokeAsync(StateHasChanged);
    }


    private async Task onStockSelected(Pedidos obj)
    {
        PopupBuscadorStockVisible = false;
        var tipoEntidad = obj.GetType().Name;
        if (tipoEntidad == "Stock")
        {
            var pedido = (Pedidos)obj;
            //Get items del vale
            var vale = pedido.VALE;
            DataSource = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Stock/AbriVale/{pedido.VALE}");

            //NumeroVale = ItemsVale[0].VALE;
            //Fecha = ItemsVale[0].FE_MOV;
        }

    }



    private async Task BuscarItem()
    {
        await BuscadorProducto.ShowAsync();
    }

    private async Task OnSelectedItem(Pedidos item)
    {
        stock.CG_ART = item.CG_ART;
        stock.DES_ART = item.DES_ART;
        stock.UNID = item.UNID;
        stock.CG_DEP = 4;
        stock.STOCK = item.STOCK;
        stock.STOCKA = item.STOCKA;
        stock.IMPORTE1 = item.IMPORTE1;


        DataSource.Add(stock);


        await Grid.RefreshColumns();
        Grid.Refresh();
        await Grid.RefreshHeader();
        await BuscadorProducto.HideAsync();
    }


    private async Task OnResumenStockSelected(vResumenStock obj)
    {

        await BuscadorEmergenteRS.HideAsync();

        var resumenStock = (vResumenStock)obj;

        //buscar registro mas reciente con las caracteristicas de resumen stock
        var cg_art = resumenStock.CG_ART;
        var cg_dep = resumenStock.CG_DEP;
        var despacho = resumenStock.DESPACHO == null ? "" : resumenStock.DESPACHO;
        var lote = resumenStock.LOTE == null ? "" : resumenStock.LOTE;
        var serie = resumenStock.SERIE == null ? "" : resumenStock.SERIE;

        var registroCompleto = await Http.GetFromJsonAsync<Pedidos>($"api/Stock/GetByResumenStock?CG_ART={cg_art}" +
            $"&CG_DEP={cg_dep}" +
            $"&DESPACHO={despacho}" +
            $"&LOTE={lote}" +
            $"&SERIE={serie}");

        registroCompleto.REGISTRO = stock?.REGISTRO;
        registroCompleto.TIPOO = RegistroGenerado.TIPOO;
        registroCompleto.ResumenStock = resumenStock;


        if (bAgregarInsumo)
        {
            registroCompleto.STOCK = (decimal?)1.0000;
            registroCompleto.PENDIENTEOC = resumenStock.STOCK;
            registroCompleto.REGISTRO = DataSource.Min(t => t.REGISTRO) - 1;
            DataSource.Add(registroCompleto);
            await Grid.RefreshColumns();
            await Grid.RefreshHeader();
            Grid.Refresh();
            bAgregarInsumo = false;
        }
        else
        {
            stock.ResumenStock = resumenStock;
            stock.PENDIENTEOC = resumenStock.STOCK - stock.STOCK;
            stock.CG_DEP = resumenStock.CG_DEP;
            stock.SERIE = resumenStock.SERIE;
            stock.DESPACHO = resumenStock.DESPACHO;
            stock.LOTE = resumenStock.LOTE;
        }


        await InvokeAsync(StateHasChanged);
    }

    protected void CantChange()
    {
        stock.PENDIENTEOC = stock.ResumenStock.STOCK - stock.STOCK;
    }


    public async Task QueryCellInfoHandler(QueryCellInfoEventArgs<Pedidos> args)
    {
        args.Data.STOCKA = Math.Round((decimal)(args.Data.STOCK / args.Data.CG_DEN), 4);
        if (args.Data.ResumenStock?.STOCK < args.Data.STOCK)
        {
            args.Cell.AddClass(new string[] { "rojo" });
        }
    }
}
<style>
    /*    #dialogo {
        min-height: 400px;
    }*/

    .row-red {
        background-color: red;
    }

    #gridEditStock_dialogEdit_wrapper {
        top: 131px !important;
    }

    .e-grid .e-gridcontent .e-rowcell.rojo {
        background-color: #e3165b;
    }
</style>
@inject HttpClient Http

<div class="dialogContent">
    <BuscadorEmergente @ref="@Buscador" TItem="vResumenStock" DataSource="@DataSource" 
                       Columnas="@Columnas" Visible="@Visible" Height="610px" Width="75%"
                        Titulo="@Titulo" OnObjetoSeleccionado="@(async(o)=> await OnSeleccionado(o))" />

</div>
@code {
    protected BuscadorEmergente<vResumenStock> Buscador;
    SfGrid<vResumenStock> Grid;
    protected bool visibleSpinner = false;
    [Parameter] public vResumenStock[] DataSource { get; set; } = null!;
    [Parameter] public string Titulo { get; set; } = "Listado de: INSUMOS EN STOCK";
    [Parameter] public bool Visible { get; set; } = false;
    [Parameter] public string[] Columnas { get; set; } = null!;
    [Parameter] public EventCallback<vResumenStock> OnObjetoSeleccionado { get; set; }


    public vResumenStock Selected { get; set; }


    public async Task ShowAsync()
    {
        Visible = true;
    }
    public async Task HideAsync()
    {
        Visible = false;
    }

    public async Task OnSeleccionado(vResumenStock vResumenStock)
    {
        Visible = false;
        await OnObjetoSeleccionado.InvokeAsync(vResumenStock);
    }

    public async Task EnviarObjetoSeleccionado()
    {
        Visible = false;
        await OnObjetoSeleccionado.InvokeAsync(Selected);
    }

    protected async Task BeginGrid()
    {
        await Grid.AutoFitColumns();
    }

    public async Task GetSelectedRecords(RowSelectEventArgs<vResumenStock> args)
    {
        args.PreventRender = true; //without this, you may see noticable delay in selection with 75 rows in grid
        //ListaSeleccionada = await this.Grid.GetSelectedRecords();
        Selected = args.Data;
        await InvokeAsync(StateHasChanged);
    }
}

@inject HttpClient Http

<div class="dialogContent">
    <BuscadorEmergente @ref="@Buscador" TItem="vResumenStock" DataSource="@DataSource" TipoSeleccion="@TipoSeleccion"
                       Columnas="@Columnas" Visible="@Visible" Height="600px" Width="75%" HabilitarPaginacion="true"
                       AplicarFiltro="@AplicarFiltro" filterCG_ART="@filterCG_ART" filterDESPACHO="@filterDESPACHO"
                       OnObjetosSeleccionados="@(async l => await OnSeleccionados(l))" HeightGrid="210px"
                       Target="@Target" SpinnerVisible="@VisibleSpinner" IsModal="@EsModal"
                       Titulo="@Titulo" OnObjetoSeleccionado="@(async o => await OnSeleccionado(o))"
                       OnCerrarDialog="@(async b => await Cerrar(b))">
    </BuscadorEmergente>

</div>

@code {
    protected BuscadorEmergente<vResumenStock> Buscador;
    SfGrid<vResumenStock> Grid;

    [Parameter]
    public bool VisibleSpinner { get; set; } = false;

    [Parameter]
    public vResumenStock[] DataSource { get; set; } = null!;

    [Parameter]
    public string Titulo { get; set; } = "Listado: INSUMOS EN STOCK";

    [Parameter]
    public bool Visible { get; set; } = false;

    [Parameter]
    public bool EsModal { get; set; } = false;

    [Parameter]
    public string[] Columnas { get; set; } = null!;

    [Parameter]
    public EventCallback<vResumenStock> OnObjetoSeleccionado { get; set; }

    [Parameter]
    public EventCallback<List<vResumenStock>> OnObjetosSeleccionados { get; set; }

    [Parameter]
    public SelectionType TipoSeleccion { get; set; } = SelectionType.Single;

    [Parameter]
    public string Target { get; set; } = "";

    [Parameter]
    public bool AplicarFiltro { get; set; } = false;

    [Parameter]
    public string filterCG_ART { get; set; } = "";

    [Parameter]
    public string filterDESPACHO { get; set; } = "";

    [Parameter]
    public EventCallback OnCerrar { get; set; }

    public vResumenStock Selected { get; set; }

    public async Task ShowAsyncStockPositivo()
    {
        VisibleSpinner = true;
        DataSource = await Http.GetFromJsonAsync<vResumenStock[]>("api/ResumenStock/GetResumenStockPositivo");
        await ShowAsync();
        VisibleSpinner = false;
    }

    public async Task ShowAsyncStockPositivoSinVentas()
    {
        VisibleSpinner = true;
        await ShowAsync();
        DataSource = await Http.GetFromJsonAsync<vResumenStock[]>("api/ResumenStock/GetResumenStockPositivo?sinDepositoVentas=true");
        VisibleSpinner = false;
    }


    public async Task ShowAsync()
    {
        Visible = true;
        await Buscador.ShowAsync();
    }

    public async Task HideAsync()
    {
        Visible = false;
        await Buscador.HideAsync();
    }

    public async Task OnSeleccionado(vResumenStock vResumenStock)
    {
        Visible = false;
        await OnObjetoSeleccionado.InvokeAsync(vResumenStock);
    }

    public async Task OnSeleccionados(List<vResumenStock> lvResumenStock)
    {
        Visible = false;
        await OnObjetosSeleccionados.InvokeAsync(lvResumenStock);
    }

    public async Task EnviarObjetoSeleccionado()
    {
        Visible = false;
        await OnObjetoSeleccionado.InvokeAsync(Selected);
    }

    protected async Task BeginGrid()
    {
        await Grid.AutoFitColumns();
    }

    public async Task GetSelectedRecords(RowSelectEventArgs<vResumenStock> args)
    {
        args.PreventRender = true; //without this, you may see noticable delay in selection with 75 rows in grid
    //ListaSeleccionada = await this.Grid.GetSelectedRecords();
        Selected = args.Data;
        await InvokeAsync(StateHasChanged);
    }

    protected async Task Cerrar(bool visible)
    {
        Visible = visible;
    }

}
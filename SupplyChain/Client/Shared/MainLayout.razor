@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using SupplyChain.Client.Auth
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using System.Text;
@inject IJSRuntime JS
@attribute [Authorize]
@inject NavigationManager MyNavigationManager
@inherits LayoutComponentBase

<audio id="notification" src="/media/notification.mp3" />
    <CascadingValue Value="this">
        <div id="main-wrapper">
            <!-- ============================================================== -->
            <!-- Topbar header - style you can find in pages.scss -->
            <!-- ============================================================== -->
            <header class="topbar">
                <nav class="navbar top-navbar navbar-expand-md navbar-light">
                    <!-- ============================================================== -->
                    <!-- Logo -->
                    <!-- ============================================================== -->

                    <div class="navbar-header">
                        <a class="navbar-brand" href="/index">
                            <!-- Logo icon --><b>
                                <!--You can put here icon as well // <i class="wi wi-sunset"></i> //-->
                                <!-- Dark Logo icon -->
                                <img src="aerre.jpg" alt="homepage" class="dark-logo" />
                                <!-- Light Logo icon -->
                                @*<img src="aerre.jpg" alt="homepage" class="light-logo" />*@
                            </b>
                            <!--End Logo icon -->
                            <!-- Logo text --><span>
                                <!-- dark Logo text -->
                                <!--<img src="aerre.jpg" alt="homepage" class="dark-logo" />-->
                                <!-- Light Logo text -->
                                <!--<img src="aerre.jpg" class="light-logo" alt="homepage" />-->
                            </span>
                        </a>
                    </div>
                    <!-- ============================================================== -->
                    <!-- End Logo -->
                    <!-- ============================================================== -->
                    <div class="navbar-collapse">
                        <!-- ============================================================== -->
                        <!-- toggle and nav items -->
                        <!-- ============================================================== -->
                        <ul class="navbar-nav mr-auto">
                            <!-- This is  -->
                            <li class="nav-item">
                                <a class="nav-link nav-toggler hidden-md-up waves-effect waves-dark"
                                   @onclick="@(()=> SidebarToggle = !SidebarToggle)">
                                    <i class="e-icons e-play-icon"></i>
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link sidebartoggler hidden-sm-down waves-effect waves-dark"
                                   @onclick="@(()=> SidebarToggle = !SidebarToggle)">
                                    <i class="e-icons e-play-icon"></i>
                                </a>
                            </li>
                            <li class="nav-item hidden-sm-down"></li>
                        </ul>
                        <!-- ============================================================== -->
                        <!-- User profile and search -->
                        <!-- ============================================================== -->
                        <ul class="navbar-nav my-lg-0">
                            <!-- ============================================================== -->
                            <!-- Search -->
                            <!-- ============================================================== -->
                            @*<li class="nav-item hidden-xs-down search-box">
                            <a class="nav-link hidden-sm-down waves-effect waves-dark" href="javascript:void(0)"><i class="ti-search"></i></a>
                            <form class="app-search">
                                <input type="text" class="form-control" placeholder="Search & enter"> <a class="srh-btn"><i class="ti-close"></i></a>
                            </form>
                        </li>*@
                            <!-- ============================================================== -->
                            <!-- CHAT MENSAJE
                            <!-- CHAT MENSAJE
                            <!-- ============================================================== -->
                       @*  <SfButton Content="Mensaje" IsPrimary="false" CssClass="btn-sm e-info" IconCss="fa fa-eye"
                                  OnClick="mensajeChat"></SfButton> *@
                        <li class="nav-item dropdown">

                            <a class="nav-link dropdown-toggle waves-effect waves-dark" href="" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                     <i class="mdi @iconClassNotification"></i> 
                                    <div class="notify"> <span class="heartbit"></span> <span class="point"></span> </div>
                                </a>
                                <div class="dropdown-menu dropdown-menu-right mailbox animated bounceInDown">
                                    <ul>
                                        <li>
                                            <div class="drop-title">Tiene @mensajes.Count() mensajes nuevos!</div>
                                        </li>
                                        
                                        <li>
                                        <div class="msg-tittle">
                                            <h4>Mensajes</h4>
                                        </div>
                                            @foreach (var item in mensajes.Take(4).OrderByDescending(m => m.CreatedDate).ToList())
                                        {

                                            <div class="message-center">
                                                <p>----------------------------------------------</p>
                                                @* <SfIcon Name="IconName.Close" Title="Close" style="position:relative;left:85%; bottom:15%;" onclick="() => CloseMessage(item.Id)"></SfIcon> *@
                                                 

                                                @if(mensajes.Count >0){
                                                    @* <span class="e-icons e-" @onclick="() => CloseMessage(item.Id)">x</span> *@


                                                    @*                                                     <button class="e-link btn-close" @onclick="() => CloseMessage(item.Id)">x</button> *@
                                                    <a href="/chat-app/@item.FromUserId">
                                                        <div class="mail-contnet">
                                                            <h5>@item.FromUser?.UserName</h5><span class="mail-desc" >@item.Message</span>
                                                            <span class="time">@item.CreatedDate</span>
                                                        </div>
                                                    </a>

                                                }
                                                else
                                                {
                                                    
                                                }
                                               
                                            </div>
                                            @* <div class="e-icons-cancel">
                                            </div>
                                             *@<SfButton style="position:relative;bottom:86px;width:11px;left:254px;" Content="x" IconPosition="IconPosition.Right" OnClick="()=> CloseMessage(item.Id)"></SfButton>

                                        }
                                            

                                        </li>
                                        <li>
                                            <a class="nav-link text-center" href="/chat-app"> <strong>Ver todas las notificaciones</strong> <i class="fa fa-angle-right"></i> </a>
                                        </li>
                                    </ul>
                                </div>
                            </li>
                        
                            <!-- ============================================================== -->
                            <!-- Language -->
                            <!-- ============================================================== -->
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle waves-effect waves-dark" href="" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> <i class="flag-icon flag-icon-es"></i></a>
                            @*   <div class="dropdown-menu dropdown-menu-right animated bounceInDown">
                                <a class="dropdown-item" href="#"><i class="flag-icon flag-icon-in"></i> India</a>
                                <a class="dropdown-item" href="#"><i class="flag-icon flag-icon-fr"></i> French</a>
                                <a class="dropdown-item" href="#"><i class="flag-icon flag-icon-cn"></i> China</a>
                                <a class="dropdown-item" href="#"><i class="flag-icon flag-icon-de"></i> Dutch</a>
                                <a class="dropdown-item" href="#"><i class="flag-icon flag-icon-us"></i> US</a>
                            </div> *@
                            </li>
                            <!-- ============================================================== -->
                            <!-- Profile -->
                            <!-- ============================================================== -->
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle waves-effect waves-dark" href="" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    @if (imageUsuario == null || imageUsuario.Length == 0)
                                    {
                                        <img src="./img1-150x150.png" alt="user" class="profile-pic" />
                                    }
                                    else
                                    {
                                        <img src="@($"data:image/png;base64,{Convert.ToBase64String(imageUsuario)}")" alt="user" class="profile-pic" />
                                    }
                                    
                                </a>
                                <div class="dropdown-menu dropdown-menu-right animated flipInY">
                                    <ul class="dropdown-user">
                                        <li>
                                            <div class="dw-user-box">
                                                <div class="u-img">
                                                @if(imageUsuario ==null || imageUsuario.Length == 0)
                                                {
                                                    <img src="img1-150x150.png" alt="user"/>
                                                }
                                                else
                                                {
                                                  <img src="@($"data:image/png;base64,{Convert.ToBase64String(imageUsuario)}")" alt="user" class="profile-pic" />
                                                }
                                            </div>
                                                <div class="u-text">
                                                    <h4>@nombreUsuario</h4>

                                                    <p class="text-muted">@emailUsuario</p>
                                                    <a href="#" class="btn btn-rounded btn-danger btn-sm">Ver Perfil</a>
                                                </div>
                                            </div>
                                        </li>
                                        <li role="separator" class="divider"></li>
                                        <li><a href="#" @onclick:preventDefault><i class="ti-user"></i> Mi Perfil</a></li>
                                        @*<li><a href="#"><i class="ti-wallet"></i> My Balance</a></li>
                                    <li><a href="#"><i class="ti-email"></i> Inbox</a></li>
                                    <li role="separator" class="divider"></li>
                                    <li><a href="#"><i class="ti-settings"></i> Account Setting</a></li>*@
                                        <li role="separator" class="divider"></li>
                                        <li>
                                            <a @onclick="@Logout"><i class="fa fa-power-off"></i> Logout</a>
                                        </li>
                                    </ul>
                                </div>
                            </li>
                        </ul>
                    </div>
                </nav>

            </header>
            @*<div class="ribbon">
                <span>DESARROLLO</span>
            </div>*@
        </div>
        
        <SfSidebar ID="sidebarInit" @ref="sidebarObj" Animate="false" EnableRtl="false" Width="280px" @bind-IsOpen="SidebarToggle"
                   ZIndex="20" EnableDock="true"
                   DockSize="0px" Position="SidebarPosition.Left"
                   MediaQuery="(min-width: 600px)">
            <ChildContent>
                
                @*<span class="e-avatar e-avatar-large e-avatar-circle image text-center"></span>*@
                @if (authState != null)
                {
                    if (authState.User.Identity.IsAuthenticated)
                    {
                        <div class="profile-img">
                        @if (imageUsuario == null || imageUsuario.Length == 0)
                        {
                            <img src="img1-150x150.png" alt="user" class="profile-pic" />
                        }
                        else
                        {
                            <img src="@($"data:image/png;base64,{Convert.ToBase64String(imageUsuario)}")" alt="user" class="profile-pic" />
                        }

                            <div class="text text-white-50" style="width: 100%;font-size: 30px;text-align: center;">
                                @authState.User.Identity.Name
                            </div>
                        </div>


                    }
                }
                @*<hr />*@
                <div class="main-menu">
                    <div class="table-content">
                        @*<input type="text" placeholder="Search..." class="search-icon">*@
                        @*<p class="main-menu-header">TABLE OF CONTENTS</p>*@
                    </div>
                    <TreeViewMenu OnChangeToggle="@Close"></TreeViewMenu>


                </div>
                @*<div class="footer">
            <div class="version">
                Version 0.1
            </div>

        </div>*@
            </ChildContent>

        </SfSidebar>



        <div class="page-wrapper">
            @if (updateReady)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <strong class="">Hay una nueva Version Disponible!</strong>
                    <SfButton Content="Actualizar" CssClass="btn btn-sm btn-success" IconCss="fa fa-refresh" OnClick="Reload" />
                </div>


            }
            <div class="container-fluid">
                <div class="row page-titles">
                    <div class="col-md-5 align-self-center">
                        <h3 class="text-themecolor">@Titulo</h3>
                    </div>
                    <div class="col-md-7 align-self-center">
                        <ol class="breadcrumb">
                            @*<li class="breadcrumb-item"><a href="javascript:void(0)">@BreadCumParent</a></li>
                            <li class="breadcrumb-item">Forms</li>
                            <li class="breadcrumb-item active">Form Basic</li>*@
                        </ol>
                    </div>
                    @*<div class="">
                        <button class="right-side-toggle waves-effect waves-light btn-inverse btn btn-circle btn-sm pull-right m-l-10">
                            <i class="ti-settings text-white"></i></button>
                    </div>*@
                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-body">
                                <CascadingValue Value="hubConnection">
                                @* <SfButton Content="Mensaje" IsPrimary="false" CssClass="btn-sm e-info" IconCss="fa fa-eye"
                                          OnClick="mensajeChat"></SfButton> *@
                                @Body
                                    
                                </CascadingValue>
                            </div>
                        </div>

                    </div>
                </div>


            </div>
        </div>


    </CascadingValue>
    <SfToast @ref="ToastObj" Content="@ToastContent" Width="100%" Title="Nuevo Mensaje" Icon="e-laura">
        <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    </SfToast>

    @*<SfToast ID="toast_custom" @ref="@ToastObj" Width="400px" ExtendedTimeout=0 Timeout="200">
        <ToastPosition X="Right" Y="Bottom"></ToastPosition>
        <ToastTemplates>
            <Template>
                <div id='template_toast'>
                    <div class="horizontal-align">
                        <div class='e-icons toast-icons e-alarm'></div>
                        <div class='toast-content'>
                            <div class='toast-title'>
                                Weekend Alarm
                            </div>
                            <div class='toast-message'>
                                With traffic, its likely to take 45 minutes to get to jenny's 24th Birthday Bash at Hillside Bar, 454 E.
                                Olive Way by 10:00 PM
                            </div>
                        </div>
                    </div>
                    <div class="snoozeBtn">
                        <SfButton ID="snooze" CssClass="e-btn e-flat e-info"> Snooze </SfButton>
                        <SfButton ID="dismiss" CssClass="e-btn e-flat e-info"> Dismiss </SfButton>
                    </div>
                </div>
            </Template>
        </ToastTemplates>
    </SfToast>*@

@code{
    [Inject] public ILoginServiceJWT LoginService { get; set; }
    [Inject] public IJSRuntime Js { get; set; }
    [Inject] public HelperService.ChatService ChatService { get; set; }
    [Inject] public RenovadorToken RenovadorToken { get; set; }
    protected SfSidebar sidebarObj;
    protected SfToast ToastObj;
    protected string ToastContent;
    private Dictionary<string, object> HtmlAttribute = new Dictionary<string, object>()
    {
         {"class", "sidebar-treeview" }
    };
    [CascadingParameter] public Task<AuthenticationState> authenticationState { get; set; }
    public AuthenticationState authState;

    private bool SidebarToggle = false;
    private string nombreUsuario = "";
    private string emailUsuario = "";
    private byte[]? imageUsuario;
    private string CurrentUserId { get; set; }
    public string Titulo { get; set; } = "";
    public string BreadCumParent { get; set; } = "";
    bool updateReady;
    private HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    protected List<ChatMessage> mensajes = new();
    protected string iconClassNotification = string.Empty;


    string Content = "x";
    public string showBtnClass = "e-outline e-primary e-success msg-hidden";
    public bool Visibility { get; set; } = false;
    public void dismissClick()
    {
        this.Visibility = false;
        this.showBtnClass = "e-outline e-primary e-success";
    }

    // private void CloseDialog()
    // {
    //     hubConnection?.On<string, string>("ReceiveChatNotification", (message, senderUserId) =>
    //     {
    //         if ()
    //         {
    //            iconClassNotification = "mdi-message";
    //             Js.InvokeAsync<string>("PlayAudio", "notification");
    //             ToastObj.ShowAsync(new ToastModel()
    //             {
    //                 Title = "Nuevo Mensaje Recibido",
    //                 Content = message,
    //                 NewestOnTop = true,
    //                 ShowCloseButton = true,
    //                 ShowProgressBar = true,
    //                 this.Visibility = true

    //                 };
    //     }

    // }

  

    protected async override Task OnInitializedAsync()
    {
        authState = await authenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            RenovadorToken.Iniciar();
            nombreUsuario = authState.User.Identity.Name;
            var user = authState.User;

            var claims = user.Claims.ToList();
            CurrentUserId = user.Claims.Where(a => a.Type == ClaimTypes.NameIdentifier)
                .Select(a => a.Value).FirstOrDefault();

            emailUsuario = user.Claims.Where(a => a.Type == ClaimTypes.Email)
                .Select(a => a.Value).FirstOrDefault();

            var image = await Js.GetFromSessionStorage("FOTO_KEY");

            if (!string.IsNullOrEmpty(image))
            {
                var bytes = Convert.FromBase64String(image);
                imageUsuario = bytes;
            }
            try
            {
                var response = await ChatService.GetConversationNoViewAsync();
                if (response.Error)
                {

                }
                else
                {
                    mensajes = response.Response;
                    if (mensajes.Count > 0)
                    {
                        iconClassNotification = "mdi-message";
                    }
                }
            }catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }



        }


        await JS.InvokeAsync<object>("blazorFuncs.registerClient", DotNetObjectReference.Create(this));

        hubConnection = new HubConnectionBuilder().WithUrl(MyNavigationManager.ToAbsoluteUri("/chathub")).Build();
        await hubConnection?.StartAsync();
        hubConnection?.On<string, string, string>("ReceiveChatNotification", (message, receiverUserId, senderUserId) =>
        {
            if (CurrentUserId == receiverUserId)
            {
                iconClassNotification = "mdi-message";
                Js.InvokeAsync<string>("PlayAudio", "notification");
                ToastObj.ShowAsync(new ToastModel()
                {
                    Title = "Nuevo Mensaje Recibido",
                    Content = message,
                    NewestOnTop = true,
                    ShowCloseButton = true,
                    ShowProgressBar = true,
                }) ;

                StateHasChanged();
                // MyNavigationManager.NavigateTo("/chat-app");
                // _snackBar.Add(message, Severity.Info, config =>
                // {
                //    config.VisibleStateDuration = 10000;
                //    config.HideTransitionDuration = 500;
                //    config.ShowTransitionDuration = 500;
                //    config.Action = "Chat?";
                //    config.ActionColor = Color.Info;
                //    config.Onclick = snackbar =>
                //    {
                //        _navigationManager.NavigateTo($"chat/{senderUserId}");
                //        return Task.CompletedTask;
                //    };
                // });
            }
            
        });




    }


    [JSInvokable("onupdateavailable")]
    public async Task<string> AppUpdate()
    {
        Console.WriteLine("New version available");
        updateReady = true;
        StateHasChanged();
        return await Task.FromResult("Alerted client");
    }


    protected async Task Logout()
    {
        await LoginService.Logout();
        MyNavigationManager.NavigateTo("/login-identity");
    }

    public void Close()
    {
        SidebarToggle = false;
    }

    public void CloseMessage(long IdMensaje)
    {
        SidebarToggle = false;
        mensajes = mensajes.Where(m => m.Id != IdMensaje).ToList();
    }

    public async Task Reload()
    {
        await JS.InvokeVoidAsync("reload");
    }
}


<style>

    .dropdown-menu li{
        margin-bottom:20px;

    }
    .message-center{
        
        margin:3px;

    }

    .message-center a{
        position:relative;
        bottom:30px;
        width:auto;

    }
/* 
    .msg-tittle {
        position:relative;
        margin-right:55px;
    } */
    .msg-tittle h4{
        position:relative;
        left:100px;
    }

    .mailbox .message-center{
        position:relative;
        height:100px;
 
    }
    .btn-close{
        position:relative;
        bottom:25px;
        /* margin-bottom:1px; */
        left:230px;
        width:11px;

    }

    /* .e-btn, .e-css.e-btn{
        position: relative;
        bottom: 25px;
        /* margin-bottom:1px; */
        left: 230px;
        width:11px;
    }
 */
    .msg-template-section .e-btn.msg-hidden {
        display: none;
    }

    .e-sidebar {
        /*background-color: #242a33;*/
        background-color: #173a7a;
        color: black;
        top: 8% !important;
        position: fixed;
        z-index: initial;
        padding: 15px 0 0 0px;
        height: 90%;
        /* box-shadow: 1px 0px 20px rgb(0 0 0 / 8%); */
    }

    .profile-img {
        border-bottom: 1px solid #656a70;
        /*padding-bottom: 5px;*/
    }

    .e-sidebar .profile-img > img {
        width: 80px;
        border-radius: 100%;
        margin-right: 10px;
        background-repeat: no-repeat;
        background-size: cover;
        background-position: center;
        margin: auto;
        margin-left: 35%;
        margin-top: 15px;
        font-size: 2.5em !important;
    }

    .e-sidebar.e-left {
        /*background: #fff;*/
        border-right: 1px solid #c4c0c0;
        /* box-shadow: 1px 0px 20px rgb(0 0 0 / 8%); */
    }

    .text-content {
        font-size: 1.5rem;
        padding: 3rem;
    }

    .main > div {
        padding: 0px !important;
    }

    e-icons {
        color: #00ffff;
        font-size: 60px;
        
    }
    /* //EICONS CANCEL POSIBLE CONFLICTO */
    e-icons-cancel{
        position:relative;
        top: 80px;
        width: 11px;
        left: 254px;
        
    }

    .e-menu::before {
        content: '\e99a';
    }

    .e-play-icon::before {
        content: '\e99a';
    }


    /* header-section styles */
    #header-section.main-header {
        border-bottom: 1px solid #d2d6de;
        height: 55px;
        width: 100%;
        min-height: 55px;
        max-height: 55px;
        background: #1c86c8;
        color: #fff;
        position: fixed;
    }

    .e-sidebar {
        top: 71px !important;
        position: fixed;
    }

    #header-section .header-style {
        line-height: 40px;
        height: 55px;
        padding: 8px;
        padding-left: 18px;
        list-style: none;
        text-align: center;
        font-size: 18px;
    }

    #header-section .border-left {
        border-left: 1px solid #d2d6de;
        width: 10em;
    }

    #header-section .float-left {
        float: left;
    }

    #header-section .icon-menu {
        width: 40px;
        /* cursor: pointer; */
    }

    /* custom code start */
    .center {
        text-align: center;
        display: none;
        font-size: 13px;
        font-weight: 400;
        margin-top: 20px;
    }

    #header-section .float-right,
    .sidebar-treeview .e-treeview .e-icon-collapsible,
    .sidebar-treeview .e-treeview .e-icon-expandable {
        float: right;
    }

    #header-section .header-list,
    .sidebar-treeview .e-treeview,
    .sidebar-treeview .e-treeview .e-ul {
        padding: 0;
        margin: 0;
    }

    /* custom code end */
    /*end of header-section styles */
    /*main-menu-header  styles */
    .sidebar-treeview .main-menu .main-menu-header {
        color: #656a70;
        padding: 15px;
        font-size: 14px;
        width: 13em;
        margin: 0;
    }
    /*end of main-menu-header styles */
    /*text input styles */
    .sidebar-treeview .main-menu .search-icon {
        text-indent: 10px;
        height: 30px;
        width: 19em;
    }

    .sidebar.e-dock.e-close span.e-text {
        display: none;
    }

    .sidebar.e-dock.e-close > .profile-img {
        visibility: hidden;
    }


    .e-sidebar.e-lib.e-dock.e-left .footer {
        display: block;
        padding-top: 16px;
        border-top: 1px solid #E8E8E8;
        background-color: #395b7b;
    }

    .e-sidebar.e-lib.e-dock.e-left .footer {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 18px;
    }

    /*    .card {
        margin-bottom: 30px !important;
    }

    .card-body{
        padding: 0.25rem;
    }*/
</style>
